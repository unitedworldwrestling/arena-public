{
	"info": {
		"_postman_id": "d2e98d0d-c99b-4d25-a149-19fa847a8a09",
		"name": "Arena API",
		"description": "This API collection was generated automatically from Arena version 1.5.85.2.\nRead Arena upgrade changelog to see any API related changes if you are using against later versions.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "api/{_format}",
			"item": [
				{
					"name": "arena",
					"item": [
						{
							"name": "Get Arena version",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/arena/version",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"arena",
										"version"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns Athletes of a SportEvent",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/arena/version",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"arena",
												"version"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"eu pariatur esse do exercitation\"\n}"
								}
							]
						},
						{
							"name": "Get current event",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/arena/current-event",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"arena",
										"current-event"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns the SportEvent",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/arena/current-event",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"arena",
												"current-event"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/arena/current-event",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"arena",
												"current-event"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Reset Arena to default installation",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"mode\": \"keep\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/arena/reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"arena",
										"reset"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"mode\": \"keep\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/arena/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"arena",
												"reset"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": false\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"mode\": \"keep\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/arena/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"arena",
												"reset"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Clear Symfony cache",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/arena/clearcache",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"arena",
										"clearcache"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/arena/clearcache",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"arena",
												"clearcache"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": false\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/arena/clearcache",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"arena",
												"clearcache"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Download Master version number",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/arena/checkmaster",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"arena",
										"checkmaster"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/arena/checkmaster",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"arena",
												"checkmaster"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": false\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/arena/checkmaster",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"arena",
												"checkmaster"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "athlete",
					"item": [
						{
							"name": "{sportEventId}",
							"item": [
								{
									"name": "Get all athletes of an Event",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId?filters=enim&limit=50&page=72586250.56946471",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												},
												{
													"key": "limit",
													"value": "50",
													"description": "Number of records to return"
												},
												{
													"key": "page",
													"value": "72586250.56946471",
													"description": "Return the page set"
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "48ddd328-94ea-59d9-f0b5-f7f9a9efdbad",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns Athletes of a SportEvent",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId?filters=enim&limit=50&page=72586250.56946471",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "page",
															"value": "72586250.56946471"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "48ddd328-94ea-59d9-f0b5-f7f9a9efdbad",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"athletes\": {\n    \"currentPageNumber\": 58582006,\n    \"numItemsPerPage\": 55779468,\n    \"items\": {},\n    \"totalCount\": 75852128,\n    \"paginatorOptions\": {},\n    \"customParameters\": {},\n    \"route\": \"dolore Duis labore exercitation\",\n    \"params\": {},\n    \"pageRange\": -28365112,\n    \"template\": \"irure officia\",\n    \"sortableTemplate\": \"in anim occaecat\",\n    \"filtrationTemplate\": \"commodo sed laboris proident\"\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId?filters=enim&limit=50&page=72586250.56946471",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "page",
															"value": "72586250.56946471"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "48ddd328-94ea-59d9-f0b5-f7f9a9efdbad",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId?filters=enim&limit=50&page=72586250.56946471",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														},
														{
															"key": "limit",
															"value": "50"
														},
														{
															"key": "page",
															"value": "72586250.56946471"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "48ddd328-94ea-59d9-f0b5-f7f9a9efdbad",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a athlete",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personId\": \"esse aute proident ex\",\n  \"sportEventTeamId\": \"des\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get an athlete by Competition and Person",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId/get/:personId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												":sportEventId",
												"get",
												":personId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "personId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns the Athlete",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId/get/:personId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														":sportEventId",
														"get",
														":personId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "personId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"personId\": \"sed\",\n  \"sportEventId\": \"do est dolore\",\n  \"personFullName\": \"Ut adipisicin\",\n  \"athenaPrintId\": \"ut nisi\",\n  \"personFamilyName\": \"consequat nulla\",\n  \"personGivenName\": \"nulla esse pariatur\",\n  \"personPhoto\": \"ut occaecat nostrud eu elit\",\n  \"teamFullName\": \"reprehenderit irure\",\n  \"teamName\": \"dolor\",\n  \"teamAlternateName\": \"veniam nulla reprehenderit in aliqui\",\n  \"teamCountryFlag\": \"esse dolore\",\n  \"teamCountryFlagMobile\": \"qui eu in\",\n  \"isCompeting\": false,\n  \"weightCategories\": [\n    {\n      \"name\": \"Lorem adipisicing\",\n      \"audience\": \"voluptate minim ullamco officia\",\n      \"sport\": \"irure non qui cupidatat\",\n      \"minWeight\": 221,\n      \"maxWeight\": 58,\n      \"roundsNumber\": 5,\n      \"roundDuration\": 273,\n      \"overtime\": 70078462,\n      \"tournamentType\": \"adipisicing\",\n      \"sportEventId\": \"dolor officia dolore mollit elit\",\n      \"sportAlternateName\": \"est\",\n      \"sportName\": \"irure\",\n      \"fullName\": \"velit mollit sit\",\n      \"alternateName\": \"dolor tempor\",\n      \"shortName\": \"adipisicing n\",\n      \"sportId\": \"reprehenderit labore\",\n      \"audienceId\": \"Excepteur dolore\",\n      \"audienceName\": \"incididunt laborum\",\n      \"isVeteran\": false,\n      \"audienceShortName\": \"Excepteur amet dolore aute\",\n      \"isSinglebracketTournament\": true,\n      \"isDoublebracketTournament\": false,\n      \"isRoundRobinTournament\": false,\n      \"isBeltWrestlingCategory\": false,\n      \"isAlyshTournament\": true,\n      \"isKazakhCategory\": false,\n      \"isPankrationCategory\": false,\n      \"isBeachWrestlingTournament\": true,\n      \"fightersIsReady\": [\n        {\n          \"athleteId\": \"deserunt proident\",\n          \"sportEventWeightCategoryId\": \"laborum velit ea nostrud\",\n          \"weightCategoryFullName\": \"qui laborum nostrud aliqua\",\n          \"weightCategoryShortName\": \"enim proident in Ut veniam\",\n          \"weightCategoryCountFights\": 963728,\n          \"hasWeightCategoryBlockchainIds\": true,\n          \"weightCategoryCountReadyFighters\": 39793,\n          \"countFights\": -11648723,\n          \"personId\": \"nisi dolor fugiat id eiusmod\",\n          \"fullName\": \"labore ut\",\n          \"preferedName\": \"voluptate \",\n          \"displayName\": \"tempor exercitation\",\n          \"givenName\": \"aute nisi sed\",\n          \"familyName\": \"cillum sed sunt\",\n          \"personPhoto\": \"dolor ut consequat in\",\n          \"athenaPrintId\": \"eiusmod amet est commodo\",\n          \"teamAlternateName\": \"occaecat ad magna\",\n          \"teamName\": \"ad dolore voluptate eu\",\n          \"teamCountryFlag\": \"magna in\",\n          \"sportEventTeamId\": \"magna pa\",\n          \"sportEventId\": \"laborum s\",\n          \"drawRank\": 34520071,\n          \"robinGroup\": {\n            \"qui_35\": 1295531.2866870463,\n            \"ea_d5\": false,\n            \"velit_7\": -29642791\n          },\n          \"robinGroupRank\": 12740939,\n          \"teamRankingPoint\": 12228075,\n          \"uwwPoint\": 21863862,\n          \"isFinalistBronze\": true,\n          \"isFinalistGold\": false,\n          \"isFinalist\": true,\n          \"knockOutStatus\": {\n            \"in7\": 90612855\n          },\n          \"hasLostknockOut\": false,\n          \"completed\": 43057706,\n          \"wins\": 3927083,\n          \"losses\": 21581210,\n          \"technicalPointsFor\": -22759897,\n          \"technicalPointsAgainst\": -28919947,\n          \"technicalPointsDiff\": 64262056,\n          \"rankingPointsFor\": 1588088,\n          \"rankingPointsAgainst\": 252438,\n          \"rankingPointsDiff\": 40505054,\n          \"winsEasy\": -20659154,\n          \"winsSuperiority\": 79878934,\n          \"rank\": 99969705,\n          \"rankRobinGroup\": -9997096,\n          \"fightByOpponent\": {\n            \"sportEventId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventWeightCategoryId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2AthenaId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1Name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1AlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1CountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1CountryFlagScoreboard\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1CountryFlagMobile\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1PoolName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1FightByOpponent\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2Name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2AlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2CountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2CountryFlagScoreboard\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2CountryFlagMobile\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2PoolName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2FightByOpponent\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundFriendlyName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayOrderInRound\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"round1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"round2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"countReferees\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete1Color\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete2Color\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete1TextColor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete2TextColor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"matName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sessionId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sessionName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sessionStartDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPoints\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPointsDetail\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPointsTagStatus\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPointIds\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"cautionsList\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isCompleted\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isReady\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isRobinGroupFight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"winnerFighter\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"winnerTeam\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"winnerTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventStartDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventLogo\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"rankingPoint\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"completedDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundsNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundDuration\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryShortName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryMaxWeight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isWeightCategoryVisible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryAverageDuration\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryColor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryReady\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryStarted\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryCompleted\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"victoryTypes\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"victoryTypesArray\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"audienceId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"audienceName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"audienceShortName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"injuryTime\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"warnings\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"cautions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"legFouls\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"activityTime\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1DisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1FamilyName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1GivenName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1PreferedName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1DrawRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1RobinRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1SeedNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1AthleteId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1PersonId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1AthenaId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1IsSeeded\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1Status\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1IsInjured\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1Weight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2DisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2FamilyName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2GivenName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2PreferedName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2DrawRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2RobinRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2SeedNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2AthleteId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2PersonId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2IsSeeded\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2Status\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2IsInjured\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2Weight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"result\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"victoryType\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"endTime\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"endDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"expectedDateStart\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"expectedStartDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1Fighters\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2Fighters\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"rankingPointNiceName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"resultText\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"resultTextSmall\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundRenamedSmall\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFightNumber1\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFightNumber2\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightRefereesWithRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"needsRefresh\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isCountdown\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"branding\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFight1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFight2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1RankingPoint\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2RankingPoint\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeGroup\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventTeam1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventTeam2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightMatId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"round\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"qualifying\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"teamFightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"rankingCheck\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalCheck\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundWeight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"repechageWeight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"repechageSection\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayOrder\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"canceled\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightReferees\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"odfCode\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeComment\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"uploaderFight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"isCompeting\": false,\n          \"hasOpenFight\": true,\n          \"isDisqualified\": true,\n          \"isNotRanked\": false,\n          \"isInjured\": true,\n          \"isForfeit\": true,\n          \"isRobinGroupNotRanked\": false,\n          \"accreditationStatus\": -12822901,\n          \"id\": \"velit do dolore eiusmod\",\n          \"sportEventWeightCategory\": \"re\",\n          \"weight\": 476,\n          \"drawNumber\": 119,\n          \"seedNumber\": 12,\n          \"fighterWeight\": \"ea\",\n          \"points\": 56,\n          \"fighterStatus\": -39662975\n        },\n        {\n          \"athleteId\": \"voluptate ipsum\",\n          \"sportEventWeightCategoryId\": \"esse deserunt nisi in consectetur\",\n          \"weightCategoryFullName\": \"com\",\n          \"weightCategoryShortName\": \"adipisicing do sint\",\n          \"weightCategoryCountFights\": 35413972,\n          \"hasWeightCategoryBlockchainIds\": true,\n          \"weightCategoryCountReadyFighters\": 31658624,\n          \"countFights\": -5047199,\n          \"personId\": \"deserunt in\",\n          \"fullName\": \"cillum sint proident nostrud\",\n          \"preferedName\": \"reprehenderit\",\n          \"displayName\": \"ad laboris non\",\n          \"givenName\": \"officia\",\n          \"familyName\": \"quis dolor non sint esse\",\n          \"personPhoto\": \"cupidatat\",\n          \"athenaPrintId\": \"sint in incididunt culpa Duis\",\n          \"teamAlternateName\": \"nostrud nisi ipsum\",\n          \"teamName\": \"voluptate magna quis\",\n          \"teamCountryFlag\": \"labore occaecat est\",\n          \"sportEventTeamId\": \"proident\",\n          \"sportEventId\": \"ullamco veniam culpa sint officia\",\n          \"drawRank\": 816828,\n          \"robinGroup\": {\n            \"incididunt3_e\": -1087141\n          },\n          \"robinGroupRank\": 15094816,\n          \"teamRankingPoint\": -31013409,\n          \"uwwPoint\": -65717800,\n          \"isFinalistBronze\": true,\n          \"isFinalistGold\": false,\n          \"isFinalist\": true,\n          \"knockOutStatus\": {\n            \"Excepteur_4\": true,\n            \"et_de\": 89641053.94082516,\n            \"occaecatf\": \"in pariatur\",\n            \"mollit_9\": false\n          },\n          \"hasLostknockOut\": true,\n          \"completed\": 61480003,\n          \"wins\": 52588271,\n          \"losses\": -34974830,\n          \"technicalPointsFor\": 64908796,\n          \"technicalPointsAgainst\": 41230987,\n          \"technicalPointsDiff\": -54852436,\n          \"rankingPointsFor\": 13116219,\n          \"rankingPointsAgainst\": -17473780,\n          \"rankingPointsDiff\": 90960653,\n          \"winsEasy\": 44647896,\n          \"winsSuperiority\": 96186762,\n          \"rank\": 61240303,\n          \"rankRobinGroup\": -85828577,\n          \"fightByOpponent\": {\n            \"sportEventId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventWeightCategoryId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2AthenaId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1Name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1AlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1CountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1CountryFlagScoreboard\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1CountryFlagMobile\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1PoolName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1FightByOpponent\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2Name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2AlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2CountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2CountryFlagScoreboard\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2CountryFlagMobile\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2PoolName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2FightByOpponent\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundFriendlyName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayOrderInRound\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"round1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"round2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"countReferees\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete1Color\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete2Color\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete1TextColor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete2TextColor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"matName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sessionId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sessionName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sessionStartDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPoints\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPointsDetail\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPointsTagStatus\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPointIds\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"cautionsList\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isCompleted\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isReady\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isRobinGroupFight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"winnerFighter\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"winnerTeam\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"winnerTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventStartDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventLogo\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"rankingPoint\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"completedDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundsNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundDuration\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryShortName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryMaxWeight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isWeightCategoryVisible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryAverageDuration\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryColor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryReady\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryStarted\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryCompleted\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"victoryTypes\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"victoryTypesArray\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"audienceId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"audienceName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"audienceShortName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"injuryTime\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"warnings\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"cautions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"legFouls\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"activityTime\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1DisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1FamilyName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1GivenName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1PreferedName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1DrawRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1RobinRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1SeedNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1AthleteId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1PersonId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1AthenaId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1IsSeeded\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1Status\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1IsInjured\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1Weight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2DisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2FamilyName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2GivenName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2PreferedName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2DrawRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2RobinRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2SeedNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2AthleteId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2PersonId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2IsSeeded\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2Status\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2IsInjured\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2Weight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"result\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"victoryType\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"endTime\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"endDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"expectedDateStart\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"expectedStartDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1Fighters\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2Fighters\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"rankingPointNiceName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"resultText\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"resultTextSmall\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundRenamedSmall\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFightNumber1\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFightNumber2\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightRefereesWithRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"needsRefresh\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isCountdown\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"branding\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFight1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFight2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1RankingPoint\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2RankingPoint\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeGroup\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventTeam1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventTeam2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightMatId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"round\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"qualifying\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"teamFightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"rankingCheck\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalCheck\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundWeight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"repechageWeight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"repechageSection\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayOrder\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"canceled\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightReferees\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"odfCode\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeComment\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"uploaderFight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"isCompeting\": true,\n          \"hasOpenFight\": false,\n          \"isDisqualified\": true,\n          \"isNotRanked\": true,\n          \"isInjured\": false,\n          \"isForfeit\": false,\n          \"isRobinGroupNotRanked\": false,\n          \"accreditationStatus\": 73311032,\n          \"id\": \"ad dolore Duis ut mollit\",\n          \"sportEventWeightCategory\": \"cillum dolore Excepteur\",\n          \"weight\": 412,\n          \"drawNumber\": 173,\n          \"seedNumber\": 14,\n          \"fighterWeight\": \"ut anim Ut sed est\",\n          \"points\": 9,\n          \"fighterStatus\": 37794299\n        }\n      ],\n      \"countReadyTeams\": -78311586,\n      \"countReadyFighters\": 11530260,\n      \"countReadySeededFighters\": 22196848,\n      \"countSeededFighters\": 71211146,\n      \"countFighters\": -96326028,\n      \"maxSeeds\": -91793555,\n      \"isRepechageSet\": false,\n      \"countTeams\": 35892569,\n      \"countFights\": -32838576,\n      \"countFightsLive\": 12735299,\n      \"perfectNumber\": {\n        \"esse2\": -48277443.619042955,\n        \"amet_c0\": -5385774\n      },\n      \"isCompleted\": false,\n      \"isStarted\": true,\n      \"isRobin\": false,\n      \"isRobinGrouped\": true,\n      \"id\": \"pariatur quis sunt Duis elit\",\n      \"averageDuration\": -80342928,\n      \"color\": \"dolo\",\n      \"odfCode\": \"adipisicing\",\n      \"uwwRanking\": true,\n      \"blockchainIds\": {\n        \"quidb_\": true,\n        \"nisi__b\": \"anim id laborum\"\n      },\n      \"sessionStartDay\": 50166577,\n      \"matAssignment\": 92622369,\n      \"visible\": false,\n      \"fightersUpdated\": \"1975-11-30T12:11:03.884Z\",\n      \"athenaFinalized\": true\n    },\n    {\n      \"name\": \"occaecat dolore ea\",\n      \"audience\": \"est cillum Ut\",\n      \"sport\": \"culpa quis reprehenderi\",\n      \"minWeight\": 456,\n      \"maxWeight\": 114,\n      \"roundsNumber\": 2,\n      \"roundDuration\": 327,\n      \"overtime\": 39096402,\n      \"tournamentType\": \"nulla ullamco in sint\",\n      \"sportEventId\": \"culpa adipisicing minim\",\n      \"sportAlternateName\": \"ut in ad minim et\",\n      \"sportName\": \"culpa consequat labor\",\n      \"fullName\": \"anim elit ipsum qui ut\",\n      \"alternateName\": \"anim enim minim\",\n      \"shortName\": \"elit\",\n      \"sportId\": \"Lorem\",\n      \"audienceId\": \"reprehenderit Excepteur dolor\",\n      \"audienceName\": \"minim laboris amet dolore in\",\n      \"isVeteran\": false,\n      \"audienceShortName\": \"do Duis et non cupidatat\",\n      \"isSinglebracketTournament\": true,\n      \"isDoublebracketTournament\": true,\n      \"isRoundRobinTournament\": true,\n      \"isBeltWrestlingCategory\": true,\n      \"isAlyshTournament\": false,\n      \"isKazakhCategory\": true,\n      \"isPankrationCategory\": true,\n      \"isBeachWrestlingTournament\": true,\n      \"fightersIsReady\": [\n        {\n          \"athleteId\": \"Excepteur sint ad velit\",\n          \"sportEventWeightCategoryId\": \"est sed voluptate\",\n          \"weightCategoryFullName\": \"qui cillum quis Duis nostrud\",\n          \"weightCategoryShortName\": \"dolore proident incididunt\",\n          \"weightCategoryCountFights\": -3823806,\n          \"hasWeightCategoryBlockchainIds\": true,\n          \"weightCategoryCountReadyFighters\": 82944946,\n          \"countFights\": -84948753,\n          \"personId\": \"sint nisi\",\n          \"fullName\": \"sit elit\",\n          \"preferedName\": \"nulla officia pariatur\",\n          \"displayName\": \"ullamco in Duis id\",\n          \"givenName\": \"adipisicing\",\n          \"familyName\": \"velit culpa minim id\",\n          \"personPhoto\": \"est voluptate ex\",\n          \"athenaPrintId\": \"ipsum esse\",\n          \"teamAlternateName\": \"ad labore est sint in\",\n          \"teamName\": \"e\",\n          \"teamCountryFlag\": \"velit sed do\",\n          \"sportEventTeamId\": \"reprehenderit tempor officia consectetur Excepteur\",\n          \"sportEventId\": \"dolore proident dolor nulla\",\n          \"drawRank\": 56837117,\n          \"robinGroup\": {\n            \"irure7\": \"sit consectetur ea do laboris\"\n          },\n          \"robinGroupRank\": -36152139,\n          \"teamRankingPoint\": -64854747,\n          \"uwwPoint\": 56882579,\n          \"isFinalistBronze\": false,\n          \"isFinalistGold\": true,\n          \"isFinalist\": false,\n          \"knockOutStatus\": {\n            \"consequat_774\": false\n          },\n          \"hasLostknockOut\": false,\n          \"completed\": 5308705,\n          \"wins\": 31059043,\n          \"losses\": 65629709,\n          \"technicalPointsFor\": -67283293,\n          \"technicalPointsAgainst\": 75362486,\n          \"technicalPointsDiff\": 49912284,\n          \"rankingPointsFor\": -94441008,\n          \"rankingPointsAgainst\": -54416226,\n          \"rankingPointsDiff\": -78782102,\n          \"winsEasy\": 34586922,\n          \"winsSuperiority\": 43892567,\n          \"rank\": -25852367,\n          \"rankRobinGroup\": -22029249,\n          \"fightByOpponent\": {\n            \"sportEventId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventWeightCategoryId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2AthenaId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1Name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1AlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1CountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1CountryFlagScoreboard\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1CountryFlagMobile\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1PoolName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1FightByOpponent\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2Name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2AlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2CountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2CountryFlagScoreboard\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2CountryFlagMobile\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2PoolName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2FightByOpponent\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundFriendlyName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayOrderInRound\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"round1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"round2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"countReferees\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete1Color\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete2Color\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete1TextColor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete2TextColor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"matName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sessionId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sessionName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sessionStartDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPoints\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPointsDetail\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPointsTagStatus\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPointIds\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"cautionsList\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isCompleted\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isReady\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isRobinGroupFight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"winnerFighter\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"winnerTeam\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"winnerTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventStartDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventLogo\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"rankingPoint\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"completedDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundsNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundDuration\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryShortName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryMaxWeight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isWeightCategoryVisible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryAverageDuration\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryColor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryReady\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryStarted\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryCompleted\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"victoryTypes\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"victoryTypesArray\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"audienceId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"audienceName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"audienceShortName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"injuryTime\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"warnings\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"cautions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"legFouls\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"activityTime\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1DisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1FamilyName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1GivenName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1PreferedName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1DrawRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1RobinRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1SeedNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1AthleteId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1PersonId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1AthenaId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1IsSeeded\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1Status\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1IsInjured\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1Weight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2DisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2FamilyName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2GivenName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2PreferedName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2DrawRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2RobinRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2SeedNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2AthleteId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2PersonId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2IsSeeded\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2Status\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2IsInjured\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2Weight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"result\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"victoryType\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"endTime\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"endDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"expectedDateStart\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"expectedStartDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1Fighters\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2Fighters\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"rankingPointNiceName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"resultText\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"resultTextSmall\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundRenamedSmall\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFightNumber1\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFightNumber2\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightRefereesWithRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"needsRefresh\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isCountdown\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"branding\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFight1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFight2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1RankingPoint\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2RankingPoint\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeGroup\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventTeam1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventTeam2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightMatId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"round\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"qualifying\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"teamFightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"rankingCheck\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalCheck\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundWeight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"repechageWeight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"repechageSection\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayOrder\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"canceled\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightReferees\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"odfCode\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeComment\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"uploaderFight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"isCompeting\": false,\n          \"hasOpenFight\": true,\n          \"isDisqualified\": true,\n          \"isNotRanked\": true,\n          \"isInjured\": false,\n          \"isForfeit\": false,\n          \"isRobinGroupNotRanked\": true,\n          \"accreditationStatus\": -40032169,\n          \"id\": \"elit dolor labore\",\n          \"sportEventWeightCategory\": \"in id minim\",\n          \"weight\": 370,\n          \"drawNumber\": 64,\n          \"seedNumber\": 20,\n          \"fighterWeight\": \"dolor\",\n          \"points\": 43,\n          \"fighterStatus\": -54247171\n        },\n        {\n          \"athleteId\": \"in labore sunt\",\n          \"sportEventWeightCategoryId\": \"sunt commodo elit cu\",\n          \"weightCategoryFullName\": \"dolor labore ad aute veniam\",\n          \"weightCategoryShortName\": \"dolore Excepteur eu\",\n          \"weightCategoryCountFights\": 3137672,\n          \"hasWeightCategoryBlockchainIds\": true,\n          \"weightCategoryCountReadyFighters\": 71244867,\n          \"countFights\": -21170919,\n          \"personId\": \"commodo officia sint consectetur\",\n          \"fullName\": \"non \",\n          \"preferedName\": \"anim et id consequat nisi\",\n          \"displayName\": \"nulla aliquip sed consequat ut\",\n          \"givenName\": \"Excepteur labore\",\n          \"familyName\": \"enim eu minim ea\",\n          \"personPhoto\": \"dolore non\",\n          \"athenaPrintId\": \"dolor dolore eu in\",\n          \"teamAlternateName\": \"ipsum dolor laboris dolore\",\n          \"teamName\": \"ut irure adipisicing aliquip mollit\",\n          \"teamCountryFlag\": \"commodo tempor dolore\",\n          \"sportEventTeamId\": \"eiusmod ea consectetur\",\n          \"sportEventId\": \"ad ex est eiusmod\",\n          \"drawRank\": 17571965,\n          \"robinGroup\": {\n            \"cupidatatf72\": true,\n            \"Duis_292\": 43856459.102137476,\n            \"nostrud_9\": -686057.1320254356,\n            \"quis_8d\": -38806524,\n            \"exa5\": 9742247\n          },\n          \"robinGroupRank\": -78746246,\n          \"teamRankingPoint\": 61983476,\n          \"uwwPoint\": 37002235,\n          \"isFinalistBronze\": true,\n          \"isFinalistGold\": true,\n          \"isFinalist\": true,\n          \"knockOutStatus\": {\n            \"sint_883\": false,\n            \"dolore_f\": true\n          },\n          \"hasLostknockOut\": true,\n          \"completed\": -53417694,\n          \"wins\": 66817556,\n          \"losses\": 19988126,\n          \"technicalPointsFor\": 59836607,\n          \"technicalPointsAgainst\": -50385298,\n          \"technicalPointsDiff\": 56920500,\n          \"rankingPointsFor\": -62521998,\n          \"rankingPointsAgainst\": -77915486,\n          \"rankingPointsDiff\": 7770029,\n          \"winsEasy\": 37877288,\n          \"winsSuperiority\": -1189719,\n          \"rank\": 27265077,\n          \"rankRobinGroup\": 28583462,\n          \"fightByOpponent\": {\n            \"sportEventId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventWeightCategoryId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2AthenaId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1Name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1AlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1CountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1CountryFlagScoreboard\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1CountryFlagMobile\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1PoolName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1FightByOpponent\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2Name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2AlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2CountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2CountryFlagScoreboard\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2CountryFlagMobile\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2PoolName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2FightByOpponent\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundFriendlyName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayOrderInRound\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"round1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"round2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"countReferees\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete1Color\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete2Color\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete1TextColor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"athlete2TextColor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"matName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sessionId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sessionName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sessionStartDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPoints\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPointsDetail\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPointsTagStatus\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalPointIds\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"cautionsList\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isCompleted\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isReady\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isRobinGroupFight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"winnerFighter\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"winnerTeam\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"winnerTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventStartDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventLogo\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"rankingPoint\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"completedDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundsNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundDuration\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryShortName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryMaxWeight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isWeightCategoryVisible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryAverageDuration\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryColor\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryReady\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryStarted\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weightCategoryCompleted\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"victoryTypes\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"victoryTypesArray\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"audienceId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"audienceName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"audienceShortName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"injuryTime\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"warnings\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"cautions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"legFouls\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"activityTime\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1DisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1FamilyName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1GivenName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1PreferedName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1DrawRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1RobinRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1SeedNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1AthleteId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1PersonId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1AthenaId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1IsSeeded\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1Status\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1IsInjured\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1Weight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2FullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2DisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2FamilyName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2GivenName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2PreferedName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2DrawRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2RobinRank\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2SeedNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2AthleteId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2PersonId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2IsSeeded\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2Status\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2IsInjured\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2Weight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"result\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"victoryType\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"endTime\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"endDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"expectedDateStart\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"expectedStartDate\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team1Fighters\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"team2Fighters\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"rankingPointNiceName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"resultText\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"resultTextSmall\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundRenamedSmall\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFightNumber1\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFightNumber2\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightRefereesWithRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"needsRefresh\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isCountdown\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"branding\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFight1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"parentFight2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter1RankingPoint\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fighter2RankingPoint\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeGroup\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventTeam1Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"sportEventTeam2Id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightMatId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"round\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"qualifying\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"teamFightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"rankingCheck\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"technicalCheck\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"weight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"roundWeight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"repechageWeight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"repechageSection\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayOrder\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"canceled\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightReferees\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"odfCode\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeComment\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"uploaderFight\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"isCompeting\": true,\n          \"hasOpenFight\": false,\n          \"isDisqualified\": true,\n          \"isNotRanked\": true,\n          \"isInjured\": true,\n          \"isForfeit\": false,\n          \"isRobinGroupNotRanked\": true,\n          \"accreditationStatus\": -83051068,\n          \"id\": \"occaecat exercitation pariatur\",\n          \"sportEventWeightCategory\": \"veniam consectetur\",\n          \"weight\": 347,\n          \"drawNumber\": 98,\n          \"seedNumber\": 10,\n          \"fighterWeight\": \"consectetur aliqua dolor amet\",\n          \"points\": 201,\n          \"fighterStatus\": 16550880\n        }\n      ],\n      \"countReadyTeams\": -14980787,\n      \"countReadyFighters\": -74819556,\n      \"countReadySeededFighters\": -8165234,\n      \"countSeededFighters\": 8158880,\n      \"countFighters\": -65139236,\n      \"maxSeeds\": -54782066,\n      \"isRepechageSet\": true,\n      \"countTeams\": -10685627,\n      \"countFights\": 17978042,\n      \"countFightsLive\": 60959999,\n      \"perfectNumber\": {\n        \"sed9\": true,\n        \"Lorem1f2\": -1455705.8340925425,\n        \"quid\": -6179593\n      },\n      \"isCompleted\": true,\n      \"isStarted\": false,\n      \"isRobin\": true,\n      \"isRobinGrouped\": true,\n      \"id\": \"commodo Lorem Duis\",\n      \"averageDuration\": 14096114,\n      \"color\": \"magn\",\n      \"odfCode\": \"Lorem\",\n      \"uwwRanking\": false,\n      \"blockchainIds\": {\n        \"non_13\": false\n      },\n      \"sessionStartDay\": -52193605,\n      \"matAssignment\": -20435978,\n      \"visible\": true,\n      \"fightersUpdated\": \"1974-05-26T21:01:25.187Z\",\n      \"athenaFinalized\": false\n    }\n  ],\n  \"id\": \"cillum pariatur non consequat\",\n  \"sportEventTeamId\": \"sed dolore cupidatat elit\",\n  \"disqualified\": true,\n  \"accreditationStatus\": -49933933\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId/get/:personId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														":sportEventId",
														"get",
														":personId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "personId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Athlete not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId/get/:personId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														":sportEventId",
														"get",
														":personId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "personId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "team",
									"item": [
										{
											"name": "Add a sport team",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sportEventTeamId\": \"dolore fugiat mollit\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"team"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sportEventTeamId\": \"dolore fugiat mollit\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"athlete",
																"get",
																":id",
																"team"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when invalid parameters are submitted",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sportEventTeamId\": \"dolore fugiat mollit\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"athlete",
																"get",
																":id",
																"team"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sportEventTeamId\": \"dolore fugiat mollit\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"athlete",
																"get",
																":id",
																"team"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sportEventTeamId\": \"dolore fugiat mollit\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"athlete",
																"get",
																":id",
																"team"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Remove sport team",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team/unset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"team",
														"unset"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team/unset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"athlete",
																"get",
																":id",
																"team",
																"unset"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team/unset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"athlete",
																"get",
																":id",
																"team",
																"unset"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team/unset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"athlete",
																"get",
																":id",
																"team",
																"unset"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get an athlete",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns Athletes of a SportEvent",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"athlete\": {\n    \"personId\": \"deserunt dolor aliquip minim Ut\",\n    \"sportEventId\": \"velit ullamco labore incididunt nulla\",\n    \"personFullName\": \"labore amet nisi anim ve\",\n    \"athenaPrintId\": \"aliquip nisi tempor\",\n    \"personFamilyName\": \"elit qui\",\n    \"personGivenName\": \"dolore laborum\",\n    \"personPhoto\": \"dolore occaecat dolor\",\n    \"teamFullName\": \"ea est mollit in\",\n    \"teamName\": \"officia tempor\",\n    \"teamAlternateName\": \"anim\",\n    \"teamCountryFlag\": \"ad dolore sed mollit\",\n    \"teamCountryFlagMobile\": \"ad minim Duis non amet\",\n    \"isCompeting\": false,\n    \"weightCategories\": [\n      {\n        \"name\": \"cillum veniam\",\n        \"audience\": \"Excepteur ut enim incididun\",\n        \"sport\": \"ullamco qui\",\n        \"minWeight\": 17,\n        \"maxWeight\": 192,\n        \"roundsNumber\": 6,\n        \"roundDuration\": 131,\n        \"overtime\": -78543495,\n        \"tournamentType\": \"consectetur in sit\",\n        \"sportEventId\": \"est cillum adipisicing magna\",\n        \"sportAlternateName\": \"consequat deserunt nostrud\",\n        \"sportName\": \"laboris qui commodo ut\",\n        \"fullName\": \"consequat laborum enim consectetu\",\n        \"alternateName\": \"aute esse cillum fugi\",\n        \"shortName\": \"eu enim ut Duis\",\n        \"sportId\": \"Excepteur\",\n        \"audienceId\": \"dolore\",\n        \"audienceName\": \"cupidatat deserunt\",\n        \"isVeteran\": false,\n        \"audienceShortName\": \"deserunt pariatur cillum laboris\",\n        \"isSinglebracketTournament\": true,\n        \"isDoublebracketTournament\": true,\n        \"isRoundRobinTournament\": true,\n        \"isBeltWrestlingCategory\": true,\n        \"isAlyshTournament\": true,\n        \"isKazakhCategory\": true,\n        \"isPankrationCategory\": false,\n        \"isBeachWrestlingTournament\": false,\n        \"fightersIsReady\": [\n          {\n            \"athleteId\": \"p\",\n            \"sportEventWeightCategoryId\": \"inci\",\n            \"weightCategoryFullName\": \"ipsum veniam\",\n            \"weightCategoryShortName\": \"elit non sed\",\n            \"weightCategoryCountFights\": 27131747,\n            \"hasWeightCategoryBlockchainIds\": false,\n            \"weightCategoryCountReadyFighters\": -61798581,\n            \"countFights\": 93630283,\n            \"personId\": \"dolore ea Excepteur\",\n            \"fullName\": \"ut velit Lorem\",\n            \"preferedName\": \"irure\",\n            \"displayName\": \"irure elit minim qui enim\",\n            \"givenName\": \"deserunt consectetur eiusmod minim\",\n            \"familyName\": \"qui quis\",\n            \"personPhoto\": \"cill\",\n            \"athenaPrintId\": \"nisi ipsum quis sint\",\n            \"teamAlternateName\": \"ullamco exercitation\",\n            \"teamName\": \"magna in cupidatat dolore\",\n            \"teamCountryFlag\": \"nisi qui\",\n            \"sportEventTeamId\": \"reprehender\",\n            \"sportEventId\": \"est nulla\",\n            \"drawRank\": -66928450,\n            \"robinGroup\": {\n              \"euc\": 83274298.30205211,\n              \"laborum_e\": false\n            },\n            \"robinGroupRank\": 71286563,\n            \"teamRankingPoint\": 30706230,\n            \"uwwPoint\": 16447111,\n            \"isFinalistBronze\": true,\n            \"isFinalistGold\": true,\n            \"isFinalist\": true,\n            \"knockOutStatus\": {\n              \"essebe\": \"proident sin\"\n            },\n            \"hasLostknockOut\": false,\n            \"completed\": -95121693,\n            \"wins\": -56799576,\n            \"losses\": 43522654,\n            \"technicalPointsFor\": -76476170,\n            \"technicalPointsAgainst\": -75377597,\n            \"technicalPointsDiff\": 98265007,\n            \"rankingPointsFor\": -45603589,\n            \"rankingPointsAgainst\": 52528993,\n            \"rankingPointsDiff\": -74681999,\n            \"winsEasy\": -77806338,\n            \"winsSuperiority\": 87118470,\n            \"rank\": 96527637,\n            \"rankRobinGroup\": 90154311,\n            \"fightByOpponent\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isCompeting\": true,\n            \"hasOpenFight\": true,\n            \"isDisqualified\": true,\n            \"isNotRanked\": false,\n            \"isInjured\": false,\n            \"isForfeit\": false,\n            \"isRobinGroupNotRanked\": true,\n            \"accreditationStatus\": -9378027,\n            \"id\": \"exercitation aliquip nostrud\",\n            \"sportEventWeightCategory\": \"qui est\",\n            \"weight\": 316,\n            \"drawNumber\": 213,\n            \"seedNumber\": 9,\n            \"fighterWeight\": \"aliquip occaecat in non\",\n            \"points\": 280,\n            \"fighterStatus\": 21232103\n          },\n          {\n            \"athleteId\": \"et dolor dolore Lorem\",\n            \"sportEventWeightCategoryId\": \"sunt qui\",\n            \"weightCategoryFullName\": \"velit cupidatat voluptate dolor\",\n            \"weightCategoryShortName\": \"aliqua amet enim sed non\",\n            \"weightCategoryCountFights\": -2720843,\n            \"hasWeightCategoryBlockchainIds\": true,\n            \"weightCategoryCountReadyFighters\": -25274052,\n            \"countFights\": 46031959,\n            \"personId\": \"qu\",\n            \"fullName\": \"ex esse aliquip labore\",\n            \"preferedName\": \"exercitation aute ut\",\n            \"displayName\": \"ad nisi enim laborum officia\",\n            \"givenName\": \"velit ut\",\n            \"familyName\": \"nisi sit irure consectetur\",\n            \"personPhoto\": \"eiusmod\",\n            \"athenaPrintId\": \"culpa dolor\",\n            \"teamAlternateName\": \"do laborum ea\",\n            \"teamName\": \"eu nulla culpa est commodo\",\n            \"teamCountryFlag\": \"consequat deserunt\",\n            \"sportEventTeamId\": \"occ\",\n            \"sportEventId\": \"aliqua Lorem ullamco magna Duis\",\n            \"drawRank\": -58179755,\n            \"robinGroup\": {\n              \"sedae0\": false,\n              \"est_909\": true,\n              \"ea3f\": true\n            },\n            \"robinGroupRank\": 20581138,\n            \"teamRankingPoint\": 30521102,\n            \"uwwPoint\": 49630183,\n            \"isFinalistBronze\": true,\n            \"isFinalistGold\": false,\n            \"isFinalist\": true,\n            \"knockOutStatus\": {\n              \"pariatur_235\": 71297977\n            },\n            \"hasLostknockOut\": true,\n            \"completed\": -67947325,\n            \"wins\": 15904773,\n            \"losses\": -27889318,\n            \"technicalPointsFor\": -37719253,\n            \"technicalPointsAgainst\": -30834085,\n            \"technicalPointsDiff\": -39633748,\n            \"rankingPointsFor\": -35381659,\n            \"rankingPointsAgainst\": 54233547,\n            \"rankingPointsDiff\": 88650318,\n            \"winsEasy\": 76956253,\n            \"winsSuperiority\": 70764538,\n            \"rank\": -52625019,\n            \"rankRobinGroup\": -10736201,\n            \"fightByOpponent\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isCompeting\": true,\n            \"hasOpenFight\": true,\n            \"isDisqualified\": true,\n            \"isNotRanked\": true,\n            \"isInjured\": true,\n            \"isForfeit\": true,\n            \"isRobinGroupNotRanked\": false,\n            \"accreditationStatus\": -28383420,\n            \"id\": \"ex est in\",\n            \"sportEventWeightCategory\": \"sunt aliqua\",\n            \"weight\": 224,\n            \"drawNumber\": 262,\n            \"seedNumber\": 17,\n            \"fighterWeight\": \"commodo\",\n            \"points\": 434,\n            \"fighterStatus\": 7912737\n          }\n        ],\n        \"countReadyTeams\": -19382792,\n        \"countReadyFighters\": 85060589,\n        \"countReadySeededFighters\": -77330278,\n        \"countSeededFighters\": -31162180,\n        \"countFighters\": 28071834,\n        \"maxSeeds\": 38955947,\n        \"isRepechageSet\": false,\n        \"countTeams\": 3305502,\n        \"countFights\": -29192037,\n        \"countFightsLive\": 89377184,\n        \"perfectNumber\": {\n          \"consectetur38\": \"dolore cupidatat aliqua labore\"\n        },\n        \"isCompleted\": true,\n        \"isStarted\": false,\n        \"isRobin\": true,\n        \"isRobinGrouped\": false,\n        \"id\": \"consectetur\",\n        \"averageDuration\": -75833148,\n        \"color\": \"Ut adi\",\n        \"odfCode\": \"do sint voluptate dolor veniam\",\n        \"uwwRanking\": false,\n        \"blockchainIds\": {\n          \"cillum_\": \"Ut sed\"\n        },\n        \"sessionStartDay\": -32540004,\n        \"matAssignment\": 8789131,\n        \"visible\": true,\n        \"fightersUpdated\": \"1984-12-03T19:37:01.777Z\",\n        \"athenaFinalized\": false\n      },\n      {\n        \"name\": \"dolore ullamco in sint\",\n        \"audience\": \"eu anim officia\",\n        \"sport\": \"aute magna\",\n        \"minWeight\": 192,\n        \"maxWeight\": 154,\n        \"roundsNumber\": 7,\n        \"roundDuration\": 130,\n        \"overtime\": -84763607,\n        \"tournamentType\": \"Excepteur eiusmod\",\n        \"sportEventId\": \"in in tempor dolore voluptate\",\n        \"sportAlternateName\": \"laborum laboris pariatur labore\",\n        \"sportName\": \"pariatur\",\n        \"fullName\": \"eu ea\",\n        \"alternateName\": \"qui sed deserunt in\",\n        \"shortName\": \"est in\",\n        \"sportId\": \"in ullamco sed enim quis\",\n        \"audienceId\": \"sit an\",\n        \"audienceName\": \"exercitation elit\",\n        \"isVeteran\": true,\n        \"audienceShortName\": \"Ut pariatur veniam\",\n        \"isSinglebracketTournament\": true,\n        \"isDoublebracketTournament\": false,\n        \"isRoundRobinTournament\": false,\n        \"isBeltWrestlingCategory\": false,\n        \"isAlyshTournament\": true,\n        \"isKazakhCategory\": true,\n        \"isPankrationCategory\": true,\n        \"isBeachWrestlingTournament\": false,\n        \"fightersIsReady\": [\n          {\n            \"athleteId\": \"Duis do\",\n            \"sportEventWeightCategoryId\": \"eiusmod\",\n            \"weightCategoryFullName\": \"Excepteur consequat minim eu\",\n            \"weightCategoryShortName\": \"adipisicing\",\n            \"weightCategoryCountFights\": 31042755,\n            \"hasWeightCategoryBlockchainIds\": true,\n            \"weightCategoryCountReadyFighters\": 95050240,\n            \"countFights\": 49613129,\n            \"personId\": \"id mollit aliqua ut\",\n            \"fullName\": \"Duis\",\n            \"preferedName\": \"consectetur dolor velit eiusmod\",\n            \"displayName\": \"eiusmod minim\",\n            \"givenName\": \"sint sed in\",\n            \"familyName\": \"proident laborum\",\n            \"personPhoto\": \"culpa deserunt Lorem\",\n            \"athenaPrintId\": \"labore dolor cillum consequat\",\n            \"teamAlternateName\": \"aute adipisicing tempor\",\n            \"teamName\": \"ut\",\n            \"teamCountryFlag\": \"occaecat dolore\",\n            \"sportEventTeamId\": \"magna Duis\",\n            \"sportEventId\": \"consequat\",\n            \"drawRank\": -18089957,\n            \"robinGroup\": {\n              \"ullamco4\": \"magna commodo\"\n            },\n            \"robinGroupRank\": -84997035,\n            \"teamRankingPoint\": -7263778,\n            \"uwwPoint\": 50212549,\n            \"isFinalistBronze\": false,\n            \"isFinalistGold\": false,\n            \"isFinalist\": false,\n            \"knockOutStatus\": {\n              \"eu_89_\": -91122967.8377568,\n              \"dolore_b\": true\n            },\n            \"hasLostknockOut\": false,\n            \"completed\": -67594546,\n            \"wins\": -3317276,\n            \"losses\": 26673966,\n            \"technicalPointsFor\": 66377991,\n            \"technicalPointsAgainst\": 7755154,\n            \"technicalPointsDiff\": -53775195,\n            \"rankingPointsFor\": -81486104,\n            \"rankingPointsAgainst\": -45769184,\n            \"rankingPointsDiff\": 56167619,\n            \"winsEasy\": 47713317,\n            \"winsSuperiority\": 25225432,\n            \"rank\": 81553317,\n            \"rankRobinGroup\": 65649250,\n            \"fightByOpponent\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isCompeting\": false,\n            \"hasOpenFight\": true,\n            \"isDisqualified\": false,\n            \"isNotRanked\": false,\n            \"isInjured\": true,\n            \"isForfeit\": false,\n            \"isRobinGroupNotRanked\": false,\n            \"accreditationStatus\": -66744340,\n            \"id\": \"Lorem est n\",\n            \"sportEventWeightCategory\": \"es\",\n            \"weight\": 288,\n            \"drawNumber\": 81,\n            \"seedNumber\": 13,\n            \"fighterWeight\": \"laboris dolore occaecat\",\n            \"points\": 343,\n            \"fighterStatus\": -82981662\n          },\n          {\n            \"athleteId\": \"est\",\n            \"sportEventWeightCategoryId\": \"consequat ut dolore\",\n            \"weightCategoryFullName\": \"in magna\",\n            \"weightCategoryShortName\": \"eu quis proident ad\",\n            \"weightCategoryCountFights\": -15332219,\n            \"hasWeightCategoryBlockchainIds\": false,\n            \"weightCategoryCountReadyFighters\": -22991346,\n            \"countFights\": -31729824,\n            \"personId\": \"laboru\",\n            \"fullName\": \"laborum adipisicing enim do\",\n            \"preferedName\": \"sit labore deserunt ut\",\n            \"displayName\": \"magna incididunt nostrud\",\n            \"givenName\": \"aliqua laboris deserunt\",\n            \"familyName\": \"cillum aliqua sit irure\",\n            \"personPhoto\": \"reprehenderit incididunt sed veniam elit\",\n            \"athenaPrintId\": \"aute ut\",\n            \"teamAlternateName\": \"dolor sit veniam\",\n            \"teamName\": \"dolor nisi\",\n            \"teamCountryFlag\": \"elit in do Ut\",\n            \"sportEventTeamId\": \"sunt velit veniam ut\",\n            \"sportEventId\": \"occaecat\",\n            \"drawRank\": 93051660,\n            \"robinGroup\": {\n              \"pariatur94\": 53925549,\n              \"consequat_df\": -83990113.47784802,\n              \"irure_\": false\n            },\n            \"robinGroupRank\": -23929898,\n            \"teamRankingPoint\": 56109091,\n            \"uwwPoint\": 72934654,\n            \"isFinalistBronze\": false,\n            \"isFinalistGold\": false,\n            \"isFinalist\": false,\n            \"knockOutStatus\": {\n              \"sunt7\": \"nisi ullamco ad sint\",\n              \"labore_8b\": 17112135.763287023,\n              \"ad_185\": 56189827\n            },\n            \"hasLostknockOut\": true,\n            \"completed\": -79150696,\n            \"wins\": -81497792,\n            \"losses\": -92263927,\n            \"technicalPointsFor\": 32324937,\n            \"technicalPointsAgainst\": -96195814,\n            \"technicalPointsDiff\": 75267704,\n            \"rankingPointsFor\": 34376240,\n            \"rankingPointsAgainst\": 84845849,\n            \"rankingPointsDiff\": 96718741,\n            \"winsEasy\": -37817743,\n            \"winsSuperiority\": 84382787,\n            \"rank\": 57908249,\n            \"rankRobinGroup\": -43515437,\n            \"fightByOpponent\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"isCompeting\": true,\n            \"hasOpenFight\": true,\n            \"isDisqualified\": false,\n            \"isNotRanked\": true,\n            \"isInjured\": false,\n            \"isForfeit\": false,\n            \"isRobinGroupNotRanked\": true,\n            \"accreditationStatus\": -5923376,\n            \"id\": \"dolor occaecat nulla\",\n            \"sportEventWeightCategory\": \"Lorem adipisicing cupidatat\",\n            \"weight\": 271,\n            \"drawNumber\": 295,\n            \"seedNumber\": 20,\n            \"fighterWeight\": \"incididunt Excepteur\",\n            \"points\": 464,\n            \"fighterStatus\": 97768497\n          }\n        ],\n        \"countReadyTeams\": -7596595,\n        \"countReadyFighters\": 68210897,\n        \"countReadySeededFighters\": 5367973,\n        \"countSeededFighters\": -42975630,\n        \"countFighters\": -40377546,\n        \"maxSeeds\": -20335000,\n        \"isRepechageSet\": true,\n        \"countTeams\": -99282729,\n        \"countFights\": 21370781,\n        \"countFightsLive\": 30195877,\n        \"perfectNumber\": {\n          \"nulla7\": -82547407.63414916,\n          \"velit_9\": -78965431\n        },\n        \"isCompleted\": true,\n        \"isStarted\": true,\n        \"isRobin\": true,\n        \"isRobinGrouped\": true,\n        \"id\": \"enim labore fugiat\",\n        \"averageDuration\": 34956282,\n        \"color\": \"incidid\",\n        \"odfCode\": \"officia et consequat\",\n        \"uwwRanking\": false,\n        \"blockchainIds\": {\n          \"ex936\": -7760720.714508772,\n          \"nostrud_1\": false,\n          \"sunt__89\": true\n        },\n        \"sessionStartDay\": -33865177,\n        \"matAssignment\": -25227632,\n        \"visible\": true,\n        \"fightersUpdated\": \"1985-08-11T08:27:32.452Z\",\n        \"athenaFinalized\": true\n      }\n    ],\n    \"id\": \"aliquip fugiat\",\n    \"sportEventTeamId\": \"esse consequa\",\n    \"disqualified\": true,\n    \"accreditationStatus\": -58752533\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Athlete not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update an athlete",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personId\": \"esse aute proident ex\",\n  \"sportEventTeamId\": \"des\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when update is successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete an athlete",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when delete is successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Toggle Disqualified flag on an athlete",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/disqualify",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id",
												"disqualify"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/disqualify",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"disqualify"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/disqualify",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"disqualify"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/disqualify",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"disqualify"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Set AccreditationStatus of an athlete",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/accreditation/:status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id",
												"accreditation",
												":status"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "status",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns the Athlete",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/accreditation/:status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"accreditation",
														":status"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "status",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"accreditationStatus\": -64815063\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/accreditation/:status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"accreditation",
														":status"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "status",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/accreditation/:status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"accreditation",
														":status"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "status",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "blockchain",
					"item": [
						{
							"name": "Return details of a block",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/blockchain/get/:blockNumber",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"blockchain",
										"get",
										":blockNumber"
									],
									"variable": [
										{
											"key": "blockNumber",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns the block",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/blockchain/get/:blockNumber",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"blockchain",
												"get",
												":blockNumber"
											],
											"variable": [
												{
													"key": "blockNumber",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"block\": {\n    \"sportEventWeightCategoryId\": \"ut et do\",\n    \"blockNumber\": \"pariatur sint deserunt\",\n    \"timestamp\": \"1970-06-17T14:43:44.263Z\",\n    \"hash\": \"cupidatat\",\n    \"parentHash\": \"ullamco ut\",\n    \"sha3Uncles\": \"consequ\",\n    \"nonce\": \"mollit fugiat voluptate tempor\"\n  }\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/blockchain/get/:blockNumber",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"blockchain",
												"get",
												":blockNumber"
											],
											"variable": [
												{
													"key": "blockNumber",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/blockchain/get/:blockNumber",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"blockchain",
												"get",
												":blockNumber"
											],
											"variable": [
												{
													"key": "blockNumber",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Allocate a block to a weightcategory",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/blockchain/allocate/:weightCategory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"blockchain",
										"allocate",
										":weightCategory"
									],
									"variable": [
										{
											"key": "weightCategory",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns the block",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/blockchain/allocate/:weightCategory",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"blockchain",
												"allocate",
												":weightCategory"
											],
											"variable": [
												{
													"key": "weightCategory",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"block\": {\n    \"sportEventWeightCategoryId\": \"ut et do\",\n    \"blockNumber\": \"pariatur sint deserunt\",\n    \"timestamp\": \"1970-06-17T14:43:44.263Z\",\n    \"hash\": \"cupidatat\",\n    \"parentHash\": \"ullamco ut\",\n    \"sha3Uncles\": \"consequ\",\n    \"nonce\": \"mollit fugiat voluptate tempor\"\n  }\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/blockchain/allocate/:weightCategory",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"blockchain",
												"allocate",
												":weightCategory"
											],
											"variable": [
												{
													"key": "weightCategory",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/blockchain/allocate/:weightCategory",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"blockchain",
												"allocate",
												":weightCategory"
											],
											"variable": [
												{
													"key": "weightCategory",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Dump random numbers from all blocks",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/blockchain/dump",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"blockchain",
										"dump"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns random numbers per block",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/blockchain/dump",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"blockchain",
												"dump"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"randomNumbers\": [\n    -92121386,\n    -69333607\n  ]\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/blockchain/dump",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"blockchain",
												"dump"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/blockchain/dump",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"blockchain",
												"dump"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "caution",
					"item": [
						{
							"name": "{roundId}",
							"item": [
								{
									"name": "Get round cautions",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/caution/:roundId?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"caution",
												":roundId"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												}
											],
											"variable": [
												{
													"key": "roundId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns Cautions for a Round",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/:roundId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														":roundId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"cautions\": {},\n  \"sportEventId\": \"in dolor enim tempor id\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/:roundId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														":roundId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/:roundId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														":roundId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a Caution to a Round",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"second\": 81870,\n  \"type\": \"minim ut ve\",\n  \"fighter\": \"eiusmod\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/caution/:roundId?force=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"caution",
												":roundId"
											],
											"query": [
												{
													"key": "force",
													"value": "true",
													"description": "Override checked match exception"
												}
											],
											"variable": [
												{
													"key": "roundId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/:roundId?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														":roundId"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/:roundId?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														":roundId"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello, or the match has been checked",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/:roundId?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														":roundId"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/:roundId?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														":roundId"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "Get a caution",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/caution/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"caution",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a Caution",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"roundCaution\": {\n    \"second\": 30504,\n    \"type\": \"ad sunt voluptate\",\n    \"roundId\": \"eu sit nisi officia Duis\",\n    \"fighterId\": \"do deserunt\",\n    \"fighterFullName\": \"in elit exercitation\",\n    \"sportEventId\": \"veniam commodo sunt\",\n    \"id\": \"sed ipsum nostrud anim\",\n    \"round\": \"quis aute\",\n    \"fighter\": \"consequat dolor qui\"\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a round caution",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"second\": 81870,\n  \"type\": \"minim ut ve\",\n  \"fighter\": \"eiusmod\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/caution/get/:id?force=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"caution",
												"get",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "true",
													"description": "Override checked match exception"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/get/:id?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														"get",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/get/:id?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														"get",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello, or the match has been checked",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/get/:id?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														"get",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/get/:id?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														"get",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a round caution",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/caution/get/:id?force=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"caution",
												"get",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "true",
													"description": "Override checked match exception"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/get/:id?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														"get",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello, or the match has been checked",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/get/:id?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														"get",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/caution/get/:id?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"caution",
														"get",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "client",
					"item": [
						{
							"name": "get/{client}",
							"item": [
								{
									"name": "trusted",
									"item": [
										{
											"name": "Get trusted status of a client",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client",
														"trusted"
													],
													"variable": [
														{
															"key": "client",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned if trusted",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"client",
																"get",
																":client",
																"trusted"
															],
															"variable": [
																{
																	"key": "client",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"client",
																"get",
																":client",
																"trusted"
															],
															"variable": [
																{
																	"key": "client",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"client",
																"get",
																":client",
																"trusted"
															],
															"variable": [
																{
																	"key": "client",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Toggle trusted status of a client",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client",
														"trusted"
													],
													"variable": [
														{
															"key": "client",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"client",
																"get",
																":client",
																"trusted"
															],
															"variable": [
																{
																	"key": "client",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"client",
																"get",
																":client",
																"trusted"
															],
															"variable": [
																{
																	"key": "client",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"client",
																"get",
																":client",
																"trusted"
															],
															"variable": [
																{
																	"key": "client",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Return a client",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"get",
												":client"
											],
											"variable": [
												{
													"key": "client",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a client",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client"
													],
													"variable": [
														{
															"key": "client",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fullname\": \"cupidatat eiusmod est\",\n  \"id\": \"sunt\",\n  \"email\": \"minim magna ex dolore\",\n  \"name\": \"sint in in amet\",\n  \"organization\": \"sit reprehenderit cillum quis\",\n  \"version\": \"in ut eu ea\",\n  \"remoteVersion\": \"deserunt magna ullamco\",\n  \"maintenance\": true,\n  \"trusted\": false,\n  \"created\": \"1986-04-27T14:17:59.955Z\",\n  \"updated\": \"2003-10-29T05:54:53.312Z\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client"
													],
													"variable": [
														{
															"key": "client",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client"
													],
													"variable": [
														{
															"key": "client",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a client",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"culpa voluptate amet\",\n  \"email\": \"id deserunt laboris aliquip\",\n  \"name\": \"do dolore\",\n  \"organization\": \"in nostrud ad\",\n  \"remoteVersion\": \"minim aliqua dolor\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"get",
												":client"
											],
											"variable": [
												{
													"key": "client",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client"
													],
													"variable": [
														{
															"key": "client",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client"
													],
													"variable": [
														{
															"key": "client",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client"
													],
													"variable": [
														{
															"key": "client",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a client",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"get",
												":client"
											],
											"variable": [
												{
													"key": "client",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client"
													],
													"variable": [
														{
															"key": "client",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client"
													],
													"variable": [
														{
															"key": "client",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client"
													],
													"variable": [
														{
															"key": "client",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List all clients in paginated response",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/?filters=enim&page=8575981&limit=8575981",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "enim",
											"description": "Filter parameters"
										},
										{
											"key": "page",
											"value": "8575981",
											"description": "Page number"
										},
										{
											"key": "limit",
											"value": "8575981",
											"description": "Entries per page"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns all clients",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/?filters=enim&page=8575981&limit=8575981",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												},
												{
													"key": "page",
													"value": "8575981"
												},
												{
													"key": "limit",
													"value": "8575981"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"clients\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/?filters=enim&page=8575981&limit=8575981",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												},
												{
													"key": "page",
													"value": "8575981"
												},
												{
													"key": "limit",
													"value": "8575981"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create a client",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"culpa voluptate amet\",\n  \"email\": \"id deserunt laboris aliquip\",\n  \"name\": \"do dolore\",\n  \"organization\": \"in nostrud ad\",\n  \"remoteVersion\": \"minim aliqua dolor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List all trusted clients",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/trusted?filters=enim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										"trusted"
									],
									"query": [
										{
											"key": "filters",
											"value": "enim",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns all trusted clients",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/trusted?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"trusted"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"clients\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/trusted?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"trusted"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Return the localclient",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/local",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										"local"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns the localclient",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/local",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"local"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"fullname\": \"cupidatat eiusmod est\",\n  \"id\": \"sunt\",\n  \"email\": \"minim magna ex dolore\",\n  \"name\": \"sint in in amet\",\n  \"organization\": \"sit reprehenderit cillum quis\",\n  \"version\": \"in ut eu ea\",\n  \"remoteVersion\": \"deserunt magna ullamco\",\n  \"maintenance\": true,\n  \"trusted\": false,\n  \"created\": \"1986-04-27T14:17:59.955Z\",\n  \"updated\": \"2003-10-29T05:54:53.312Z\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/local",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"local"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "config",
					"item": [
						{
							"name": "custom-config",
							"item": [
								{
									"name": "List custom entities for weight categories, audiences, victory types, sports",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"custom-config"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns custom configs",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"custom-config"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"weights\": {\n    \"id\": -776547,\n    \"configKey\": \"mollit et\",\n    \"configValue\": {\n      \"reprehenderita5a\": 58948535.4644939\n    },\n    \"enabled\": true\n  },\n  \"audiences\": {\n    \"id\": 93341529,\n    \"configKey\": \"labore\",\n    \"configValue\": {\n      \"esse__03\": false,\n      \"pariatur_c\": -53786492,\n      \"Duis_83\": -90074044,\n      \"in_826\": -49939676\n    },\n    \"enabled\": true\n  },\n  \"sports\": {\n    \"id\": -67206599,\n    \"configKey\": \"est Lorem aliqua in nisi\",\n    \"configValue\": {\n      \"Lorem1\": -7785209\n    },\n    \"enabled\": false\n  },\n  \"victoryTypes\": {\n    \"id\": 70610210,\n    \"configKey\": \"sunt quis Duis aliquip\",\n    \"configValue\": {\n      \"cillum051\": true,\n      \"nonb9\": \"id ullamco et\"\n    },\n    \"enabled\": false\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"custom-config"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update custom entities for weight categories, audiences, victory types, sports",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"weights\": {\n    \"configValue\": \"irure culpa velit reprehenderit\",\n    \"enabled\": false\n  },\n  \"audiences\": {\n    \"configValue\": \"proiden\",\n    \"enabled\": false\n  },\n  \"sports\": {\n    \"configValue\": \"ullamco\",\n    \"enabled\": false\n  },\n  \"victoryTypes\": {\n    \"configValue\": \"sunt dolore id eiusmod \",\n    \"enabled\": false\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"custom-config"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"weights\": {\n    \"configValue\": \"irure culpa velit reprehenderit\",\n    \"enabled\": false\n  },\n  \"audiences\": {\n    \"configValue\": \"proiden\",\n    \"enabled\": false\n  },\n  \"sports\": {\n    \"configValue\": \"ullamco\",\n    \"enabled\": false\n  },\n  \"victoryTypes\": {\n    \"configValue\": \"sunt dolore id eiusmod \",\n    \"enabled\": false\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"custom-config"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    \"consequat eiusmod ad\",\n    \"qui anim\"\n  ],\n  \"configs\": [\n    \"anim adipisicing ad\",\n    \"consequat dolore occaecat veniam do\"\n  ],\n  \"weights\": [\n    \"ex sint consectetur dolore labore\",\n    \"officia laborum aute\"\n  ]\n}"
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"weights\": {\n    \"configValue\": \"irure culpa velit reprehenderit\",\n    \"enabled\": false\n  },\n  \"audiences\": {\n    \"configValue\": \"proiden\",\n    \"enabled\": false\n  },\n  \"sports\": {\n    \"configValue\": \"ullamco\",\n    \"enabled\": false\n  },\n  \"victoryTypes\": {\n    \"configValue\": \"sunt dolore id eiusmod \",\n    \"enabled\": false\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"custom-config"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"weights\": {\n    \"configValue\": \"irure culpa velit reprehenderit\",\n    \"enabled\": false\n  },\n  \"audiences\": {\n    \"configValue\": \"proiden\",\n    \"enabled\": false\n  },\n  \"sports\": {\n    \"configValue\": \"ullamco\",\n    \"enabled\": false\n  },\n  \"victoryTypes\": {\n    \"configValue\": \"sunt dolore id eiusmod \",\n    \"enabled\": false\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"custom-config"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"weights\": {\n    \"configValue\": \"irure culpa velit reprehenderit\",\n    \"enabled\": false\n  },\n  \"audiences\": {\n    \"configValue\": \"proiden\",\n    \"enabled\": false\n  },\n  \"sports\": {\n    \"configValue\": \"ullamco\",\n    \"enabled\": false\n  },\n  \"victoryTypes\": {\n    \"configValue\": \"sunt dolore id eiusmod \",\n    \"enabled\": false\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"custom-config"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "victory-types/{sport}",
							"item": [
								{
									"name": "Get victory types by sport",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/victory-types/:sport",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"victory-types",
												":sport"
											],
											"variable": [
												{
													"key": "sport",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/victory-types/:sport",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"victory-types",
														":sport"
													],
													"variable": [
														{
															"key": "sport",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"victoryTypes\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/victory-types/:sport",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"victory-types",
														":sport"
													],
													"variable": [
														{
															"key": "sport",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get victory type by sport and identifier",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/victory-types/:sport/:identifier",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"victory-types",
												":sport",
												":identifier"
											],
											"variable": [
												{
													"key": "sport",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "identifier",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/victory-types/:sport/:identifier",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"victory-types",
														":sport",
														":identifier"
													],
													"variable": [
														{
															"key": "sport",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "identifier",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"victoryType\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/victory-types/:sport/:identifier",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"victory-types",
														":sport",
														":identifier"
													],
													"variable": [
														{
															"key": "sport",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "identifier",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "audiences",
							"item": [
								{
									"name": "Get audiences",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/audiences",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"audiences"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/audiences",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"audiences"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"audiences\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/audiences",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"audiences"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get audience by identifier",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/audiences/:identifier",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"audiences",
												":identifier"
											],
											"variable": [
												{
													"key": "identifier",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/audiences/:identifier",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"audiences",
														":identifier"
													],
													"variable": [
														{
															"key": "identifier",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"audience\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/audiences/:identifier",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"audiences",
														":identifier"
													],
													"variable": [
														{
															"key": "identifier",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "sports",
							"item": [
								{
									"name": "Get sports",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/sports",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"sports"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/sports",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"sports"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"sports\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/sports",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"sports"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get sport by identifier",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/sports/:identifier",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"sports",
												":identifier"
											],
											"variable": [
												{
													"key": "identifier",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/sports/:identifier",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"sports",
														":identifier"
													],
													"variable": [
														{
															"key": "identifier",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"audience\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/sports/:identifier",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"sports",
														":identifier"
													],
													"variable": [
														{
															"key": "identifier",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "weight-categories",
							"item": [
								{
									"name": "{audience}",
									"item": [
										{
											"name": "{sport}",
											"item": [
												{
													"name": "Get official weight categories by audience and sport",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience/:sport",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"config",
																"weight-categories",
																":audience",
																":sport"
															],
															"variable": [
																{
																	"key": "audience",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "sport",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Returned when successful",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience/:sport",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"config",
																		"weight-categories",
																		":audience",
																		":sport"
																	],
																	"variable": [
																		{
																			"key": "audience",
																			"value": "enim",
																			"description": "(Required) "
																		},
																		{
																			"key": "sport",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"weightCategories\": {}\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience/:sport",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"config",
																		"weight-categories",
																		":audience",
																		":sport"
																	],
																	"variable": [
																		{
																			"key": "audience",
																			"value": "enim",
																			"description": "(Required) "
																		},
																		{
																			"key": "sport",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Get weight category",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience/:sport/:identifier",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"config",
																"weight-categories",
																":audience",
																":sport",
																":identifier"
															],
															"variable": [
																{
																	"key": "audience",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "sport",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "identifier",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Returned when successful",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience/:sport/:identifier",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"config",
																		"weight-categories",
																		":audience",
																		":sport",
																		":identifier"
																	],
																	"variable": [
																		{
																			"key": "audience",
																			"value": "enim",
																			"description": "(Required) "
																		},
																		{
																			"key": "sport",
																			"value": "enim",
																			"description": "(Required) "
																		},
																		{
																			"key": "identifier",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"audience\": {}\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience/:sport/:identifier",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"config",
																		"weight-categories",
																		":audience",
																		":sport",
																		":identifier"
																	],
																	"variable": [
																		{
																			"key": "audience",
																			"value": "enim",
																			"description": "(Required) "
																		},
																		{
																			"key": "sport",
																			"value": "enim",
																			"description": "(Required) "
																		},
																		{
																			"key": "identifier",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Get official weight categories by audience and sport",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"weight-categories",
														":audience"
													],
													"variable": [
														{
															"key": "audience",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"config",
																"weight-categories",
																":audience"
															],
															"variable": [
																{
																	"key": "audience",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"weightCategories\": {}\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"config",
																"weight-categories",
																":audience"
															],
															"variable": [
																{
																	"key": "audience",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get official weight categories by audience and sport",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"weight-categories"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"weight-categories"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"weightCategories\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"weight-categories"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "fight",
					"item": [
						{
							"name": "get",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "mat",
											"item": [
												{
													"name": "Set the fight mat",
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"fightMatId\": \"aliqua proident Duis magna sunt\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"mat"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Returned when update is successful",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"fightMatId\": \"aliqua proident Duis magna sunt\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"mat"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when invalid parameters are submitted",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"fightMatId\": \"aliqua proident Duis magna sunt\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"mat"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"fightMatId\": \"aliqua proident Duis magna sunt\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"mat"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"fightMatId\": \"aliqua proident Duis magna sunt\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"mat"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Free the fight mat",
													"request": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat/unset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"mat",
																"unset"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Returned when update is successful",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat/unset",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"mat",
																		"unset"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when invalid parameters are submitted",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat/unset",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"mat",
																		"unset"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat/unset",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"mat",
																		"unset"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat/unset",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"mat",
																		"unset"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "confirm",
											"item": [
												{
													"name": "Confirm wrestlers",
													"request": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"confirm"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Returned when update is successful",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"confirm"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"confirm"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"confirm"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Confirm wrestlers in Team competition",
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"fighter1\": \"in culpa adipisicing\",\n  \"fighter2\": \"veniam nisi\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm/wrestler",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"confirm",
																"wrestler"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Returned when update is successful",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"fighter1\": \"in culpa adipisicing\",\n  \"fighter2\": \"veniam nisi\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm/wrestler",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"confirm",
																		"wrestler"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"fighter1\": \"in culpa adipisicing\",\n  \"fighter2\": \"veniam nisi\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm/wrestler",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"confirm",
																		"wrestler"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"fighter1\": \"in culpa adipisicing\",\n  \"fighter2\": \"veniam nisi\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm/wrestler",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"confirm",
																		"wrestler"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "print",
											"item": [
												{
													"name": "Print scoresheet",
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print?template=data",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"print"
															],
															"query": [
																{
																	"key": "template",
																	"value": "data",
																	"description": "Scoresheet template"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "PDF path",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print?template=data",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"print"
																	],
																	"query": [
																		{
																			"key": "template",
																			"value": "data"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print?template=data",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"print"
																	],
																	"query": [
																		{
																			"key": "template",
																			"value": "data"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Fight not found",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print?template=data",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"print"
																	],
																	"query": [
																		{
																			"key": "template",
																			"value": "data"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Print scoresheet",
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print/template/:template?template=data",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"print",
																"template",
																":template"
															],
															"query": [
																{
																	"key": "template",
																	"value": "data",
																	"description": "Scoresheet template"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "template",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "PDF path",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print/template/:template?template=data",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"print",
																		"template",
																		":template"
																	],
																	"query": [
																		{
																			"key": "template",
																			"value": "data"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		},
																		{
																			"key": "template",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print/template/:template?template=data",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"print",
																		"template",
																		":template"
																	],
																	"query": [
																		{
																			"key": "template",
																			"value": "data"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		},
																		{
																			"key": "template",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Fight not found",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print/template/:template?template=data",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"print",
																		"template",
																		":template"
																	],
																	"query": [
																		{
																			"key": "template",
																			"value": "data"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		},
																		{
																			"key": "template",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "referee-comment",
											"item": [
												{
													"name": "Get Referee Comments",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/referee-comment",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"referee-comment"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Returns comments set by Head of Referee",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/referee-comment",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"referee-comment"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"refereeComment\": \"officia et\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/referee-comment",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"referee-comment"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Fight not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/referee-comment",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"referee-comment"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Get Referee Comments",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/referee-comment",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"referee-comment"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Returns comments set by Head of Referee",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/referee-comment",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"referee-comment"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"refereeComment\": \"officia et\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/referee-comment",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"referee-comment"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Fight not found",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/referee-comment",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fight",
																		"get",
																		":id",
																		"referee-comment"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Get a fight",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns a fight",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"fight\": {\n    \"sportEventId\": \"ut dolor sit\",\n    \"sportEventWeightCategoryId\": \"sunt labore\",\n    \"fighter1Id\": \"culpa cillum officia\",\n    \"fighter2Id\": \"eu occaecat aute quis\",\n    \"fighter2AthenaId\": -56668914,\n    \"team1Name\": \"deserunt veniam Excepteur ad\",\n    \"team1AlternateName\": \"nisi ad officia\",\n    \"team1FullName\": \"reprehenderit dolore ipsum\",\n    \"team1CountryFlag\": \"ipsum sunt id\",\n    \"team1CountryFlagScoreboard\": \"\",\n    \"team1CountryFlagMobile\": \"in velit do aliquip\",\n    \"team1PoolName\": \"aute n\",\n    \"team1FightByOpponent\": {\n      \"aliqua_2\": -11469292.740194082,\n      \"Excepteur3f\": \"Lorem dolore deserunt ea do\",\n      \"quis_19e\": 41826852.15511918\n    },\n    \"team2Name\": \"consectetur sint\",\n    \"team2AlternateName\": \"in ipsum ex\",\n    \"team2FullName\": \"in reprehenderit laborum ex\",\n    \"team2CountryFlag\": \"Duis consequat non\",\n    \"team2CountryFlagScoreboard\": \"ea quis sed cillum\",\n    \"team2CountryFlagMobile\": \"consequat voluptate\",\n    \"team2PoolName\": \"ut quis cillum\",\n    \"team2FightByOpponent\": {\n      \"elit_c70\": \"fugiat irure\"\n    },\n    \"roundFriendlyName\": \"anim occaecat eu incididunt\",\n    \"displayOrderInRound\": 28432578,\n    \"round1Id\": \"irure aliquip anim consecte\",\n    \"round2Id\": \"in est ex esse\",\n    \"countReferees\": -14329923,\n    \"sportId\": \"magna aliqua id ex\",\n    \"athlete1Color\": \"non veniam deserunt mollit\",\n    \"athlete2Color\": \"incididunt ipsum nostrud ut\",\n    \"athlete1TextColor\": \"nisi id\",\n    \"athlete2TextColor\": \"commodo laborum eius\",\n    \"matName\": \"consectetur reprehenderit\",\n    \"sessionId\": \"irure ea\",\n    \"sessionName\": \"velit nisi non qui\",\n    \"sessionStartDate\": \"1954-06-11T23:22:23.898Z\",\n    \"technicalPoints\": {\n      \"ut_4af\": -74513790.41740203\n    },\n    \"technicalPointsDetail\": {\n      \"pariatur2e_\": 3074356\n    },\n    \"technicalPointsTagStatus\": \"minim elit in consectetur\",\n    \"technicalPointIds\": {\n      \"Lorem_8\": true\n    },\n    \"cautionsList\": {\n      \"Excepteur_6ef\": -18875931\n    },\n    \"isCompleted\": false,\n    \"isReady\": false,\n    \"isRobinGroupFight\": false,\n    \"winnerFighter\": \"consectetur ut mollit\",\n    \"winnerTeam\": \"Duis sunt\",\n    \"winnerTeamAlternateName\": \"exercitation sed reprehenderit sunt ut\",\n    \"sportEventName\": \"exercitation velit pariatur culpa Duis\",\n    \"sportEventStartDate\": \"1989-02-16T01:11:16.066Z\",\n    \"sportEventLogo\": \"nisi fugiat aliquip Excepteur\",\n    \"rankingPoint\": {\n      \"fightId\": \"do ad cillum laborum et\",\n      \"victoryType\": \"esse enim\",\n      \"fighterId\": \"Ut Lorem deserunt\",\n      \"fighterFullName\": \"in nisi\",\n      \"victoryTypeId\": \"in qui tempor exercitation id\",\n      \"victoryTypeName\": \"Duis ut\",\n      \"victoryTypeNiceName\": \"esse incididunt\",\n      \"sportId\": \"in sit incididunt id\",\n      \"sportEventId\": \"ess\",\n      \"id\": \"commodo voluptate proident consequat\",\n      \"fighter\": \"aliquip ipsum\",\n      \"second\": 68228\n    },\n    \"completedDate\": \"1994-05-03T05:23:44.897Z\",\n    \"roundsNumber\": -77269078,\n    \"roundDuration\": -15701325,\n    \"sportAlternateName\": \"sint adipisicing Duis\",\n    \"weightCategoryName\": \"labore\",\n    \"weightCategoryAlternateName\": \"l\",\n    \"weightCategoryShortName\": \"tempor in in aute fugiat\",\n    \"weightCategoryMaxWeight\": -90162011,\n    \"weightCategoryFullName\": \"culpa non est et\",\n    \"isWeightCategoryVisible\": true,\n    \"weightCategoryAverageDuration\": -50212628,\n    \"weightCategoryColor\": \"adipisicing Duis nostrud do\",\n    \"weightCategoryReady\": true,\n    \"weightCategoryStarted\": false,\n    \"weightCategoryCompleted\": false,\n    \"victoryTypes\": {\n      \"exercitation_7ed\": true,\n      \"id47\": false\n    },\n    \"victoryTypesArray\": {\n      \"minim_22\": 44780530,\n      \"eiusmod_4f\": -33423382.49836754\n    },\n    \"audienceId\": \"cul\",\n    \"audienceName\": \"irure ad Excepteur\",\n    \"audienceShortName\": \"in id\",\n    \"sportName\": \"ad reprehenderit dolor\",\n    \"injuryTime\": -71701814,\n    \"warnings\": false,\n    \"cautions\": 35272999,\n    \"legFouls\": 43443703,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"deserunt cillum\",\n    \"fighter1DisplayName\": \"dolore\",\n    \"fighter1FamilyName\": \"est cupidatat in tempor dolore\",\n    \"fighter1GivenName\": \"dolore ullamco consequat cillum\",\n    \"fighter1PreferedName\": \"anim qui\",\n    \"fighter1DrawRank\": \"sed proident magna eiusmod\",\n    \"fighter1RobinRank\": \"a\",\n    \"fighter1SeedNumber\": -24101899,\n    \"fighter1AthleteId\": \"dolor eu cillum exercitation\",\n    \"fighter1PersonId\": \"ullamco nostrud a\",\n    \"fighter1AthenaId\": -54143851,\n    \"fighter1IsSeeded\": true,\n    \"fighter1Status\": -17588020,\n    \"fighter1IsInjured\": false,\n    \"fighter1Weight\": -32834008.470758393,\n    \"fighter2FullName\": \"consequat laboris aliquip\",\n    \"fighter2DisplayName\": \"in eu ex incididunt amet\",\n    \"fighter2FamilyName\": \"nisi dolor fugiat\",\n    \"fighter2GivenName\": \"in consectetur voluptate ex\",\n    \"fighter2PreferedName\": \"aliqua ad\",\n    \"fighter2DrawRank\": -88133659,\n    \"fighter2RobinRank\": -77082717,\n    \"fighter2SeedNumber\": -18992673,\n    \"fighter2AthleteId\": \"laboris in sunt\",\n    \"fighter2PersonId\": \"cillu\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": 33728836,\n    \"fighter2IsInjured\": false,\n    \"fighter2Weight\": 38611778.63539153,\n    \"result\": \"magna Duis\",\n    \"victoryType\": \"est anim nulla\",\n    \"endTime\": -85167873,\n    \"endDate\": \"1997-04-27T11:34:43.738Z\",\n    \"expectedDateStart\": \"1989-07-04T00:52:42.277Z\",\n    \"expectedStartDate\": \"1995-06-19T11:16:39.609Z\",\n    \"team1Fighters\": [\n      {\n        \"athleteId\": \"est\",\n        \"sportEventWeightCategoryId\": \"pariatur\",\n        \"weightCategoryFullName\": \"Excepteur irure ea\",\n        \"weightCategoryShortName\": \"pariatur ipsum sit exercitation consectetur\",\n        \"weightCategoryCountFights\": 82217504,\n        \"hasWeightCategoryBlockchainIds\": false,\n        \"weightCategoryCountReadyFighters\": -48278885,\n        \"countFights\": -1441510,\n        \"personId\": \"laborum dolor irure\",\n        \"fullName\": \"anim in proident\",\n        \"preferedName\": \"non fugiat\",\n        \"displayName\": \"dolor velit ullamco\",\n        \"givenName\": \"quis consectetur aute esse\",\n        \"familyName\": \"sunt\",\n        \"personPhoto\": \"eu amet\",\n        \"athenaPrintId\": \"proident elit\",\n        \"teamAlternateName\": \"irure ea cupidatat pariatur\",\n        \"teamName\": \"Excepteur si\",\n        \"teamCountryFlag\": \"cupidatat culpa do magna\",\n        \"sportEventTeamId\": \"aute sint\",\n        \"sportEventId\": \"\",\n        \"drawRank\": -87497398,\n        \"robinGroup\": {\n          \"Ut4\": -40951660.25016495,\n          \"culpa59\": -15925849.59046644,\n          \"exercitation_6\": 20279177.739977345,\n          \"aliqua07\": 90109029\n        },\n        \"robinGroupRank\": 72628227,\n        \"teamRankingPoint\": -41284147,\n        \"uwwPoint\": 16705401,\n        \"isFinalistBronze\": false,\n        \"isFinalistGold\": false,\n        \"isFinalist\": false,\n        \"knockOutStatus\": {\n          \"suntadd\": -11910898\n        },\n        \"hasLostknockOut\": true,\n        \"completed\": 92445333,\n        \"wins\": -30132694,\n        \"losses\": -63724363,\n        \"technicalPointsFor\": 79541375,\n        \"technicalPointsAgainst\": -59607964,\n        \"technicalPointsDiff\": 28555371,\n        \"rankingPointsFor\": -56665029,\n        \"rankingPointsAgainst\": -37346091,\n        \"rankingPointsDiff\": -31950453,\n        \"winsEasy\": 46286034,\n        \"winsSuperiority\": 3014678,\n        \"rank\": 29479826,\n        \"rankRobinGroup\": 36571156,\n        \"fightByOpponent\": {\n          \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n        },\n        \"isCompeting\": true,\n        \"hasOpenFight\": false,\n        \"isDisqualified\": false,\n        \"isNotRanked\": false,\n        \"isInjured\": false,\n        \"isForfeit\": false,\n        \"isRobinGroupNotRanked\": false,\n        \"accreditationStatus\": -38709073,\n        \"id\": \"incidi\",\n        \"sportEventWeightCategory\": \"consectetur quis adipisicing fugiat\",\n        \"weight\": 276,\n        \"drawNumber\": 16,\n        \"seedNumber\": 20,\n        \"fighterWeight\": \"deserunt aliqua\",\n        \"points\": 82,\n        \"fighterStatus\": 95576182\n      },\n      {\n        \"athleteId\": \"fugiat laborum sint adipisicing\",\n        \"sportEventWeightCategoryId\": \"sunt dolor tempor\",\n        \"weightCategoryFullName\": \"eu fugiat\",\n        \"weightCategoryShortName\": \"fugiat anim\",\n        \"weightCategoryCountFights\": 43591476,\n        \"hasWeightCategoryBlockchainIds\": true,\n        \"weightCategoryCountReadyFighters\": -30845966,\n        \"countFights\": 83023217,\n        \"personId\": \"exercitation \",\n        \"fullName\": \"anim ea\",\n        \"preferedName\": \"ut irure laboris et\",\n        \"displayName\": \"nulla laborum\",\n        \"givenName\": \"magna\",\n        \"familyName\": \"consectetur \",\n        \"personPhoto\": \"Excepteur aute magna\",\n        \"athenaPrintId\": \"culpa\",\n        \"teamAlternateName\": \"et quis exercitation Ut\",\n        \"teamName\": \"amet labore\",\n        \"teamCountryFlag\": \"ex sint\",\n        \"sportEventTeamId\": \"irure Excepteur dolor reprehenderit\",\n        \"sportEventId\": \"a\",\n        \"drawRank\": 32442839,\n        \"robinGroup\": {\n          \"in43\": true,\n          \"deserunt_c\": 20094265\n        },\n        \"robinGroupRank\": -45433227,\n        \"teamRankingPoint\": 62685098,\n        \"uwwPoint\": -72530378,\n        \"isFinalistBronze\": true,\n        \"isFinalistGold\": false,\n        \"isFinalist\": false,\n        \"knockOutStatus\": {\n          \"Ut_06\": -31957717,\n          \"Utb\": \"consequat amet reprehenderit cupidatat\"\n        },\n        \"hasLostknockOut\": true,\n        \"completed\": -88328891,\n        \"wins\": 47965502,\n        \"losses\": 81540142,\n        \"technicalPointsFor\": -837628,\n        \"technicalPointsAgainst\": -99236655,\n        \"technicalPointsDiff\": 62988132,\n        \"rankingPointsFor\": 10613880,\n        \"rankingPointsAgainst\": 53626902,\n        \"rankingPointsDiff\": 41819068,\n        \"winsEasy\": 5343532,\n        \"winsSuperiority\": -69841480,\n        \"rank\": -59086978,\n        \"rankRobinGroup\": -60719268,\n        \"fightByOpponent\": {\n          \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n        },\n        \"isCompeting\": false,\n        \"hasOpenFight\": false,\n        \"isDisqualified\": true,\n        \"isNotRanked\": true,\n        \"isInjured\": false,\n        \"isForfeit\": false,\n        \"isRobinGroupNotRanked\": false,\n        \"accreditationStatus\": -77167886,\n        \"id\": \"fugiat ullamco ut esse\",\n        \"sportEventWeightCategory\": \"consectetur sunt esse ex\",\n        \"weight\": 273,\n        \"drawNumber\": 234,\n        \"seedNumber\": 23,\n        \"fighterWeight\": \"ex ut labore cillum aliqua\",\n        \"points\": 261,\n        \"fighterStatus\": 43548290\n      }\n    ],\n    \"team2Fighters\": [\n      {\n        \"athleteId\": \"nulla labore ea proident ali\",\n        \"sportEventWeightCategoryId\": \"non\",\n        \"weightCategoryFullName\": \"irure aliqua Lorem\",\n        \"weightCategoryShortName\": \"in ut nostrud aute\",\n        \"weightCategoryCountFights\": 86643710,\n        \"hasWeightCategoryBlockchainIds\": true,\n        \"weightCategoryCountReadyFighters\": 16712272,\n        \"countFights\": 68007234,\n        \"personId\": \"Ut ad eu ea commodo\",\n        \"fullName\": \"ex elit laborum\",\n        \"preferedName\": \"non voluptate\",\n        \"displayName\": \"dolore\",\n        \"givenName\": \"aliquip voluptate laborum Duis dolor\",\n        \"familyName\": \"adipisicing in ut dolor\",\n        \"personPhoto\": \"aliquip et adipisicing fugiat\",\n        \"athenaPrintId\": \"in\",\n        \"teamAlternateName\": \"pr\",\n        \"teamName\": \"aliqua nostrud\",\n        \"teamCountryFlag\": \"irure sit dolor in\",\n        \"sportEventTeamId\": \"consequat commodo\",\n        \"sportEventId\": \"sed non do\",\n        \"drawRank\": 16511605,\n        \"robinGroup\": {\n          \"ad_d\": \"Lorem cillum labore\",\n          \"sint0\": true\n        },\n        \"robinGroupRank\": 78000027,\n        \"teamRankingPoint\": -10400241,\n        \"uwwPoint\": 32991146,\n        \"isFinalistBronze\": true,\n        \"isFinalistGold\": false,\n        \"isFinalist\": false,\n        \"knockOutStatus\": {\n          \"ad_2\": true,\n          \"laboris_6\": 39219751\n        },\n        \"hasLostknockOut\": true,\n        \"completed\": 23176006,\n        \"wins\": 99500029,\n        \"losses\": 38459457,\n        \"technicalPointsFor\": -36998495,\n        \"technicalPointsAgainst\": -38331525,\n        \"technicalPointsDiff\": -698247,\n        \"rankingPointsFor\": -71763075,\n        \"rankingPointsAgainst\": -12153004,\n        \"rankingPointsDiff\": -11739885,\n        \"winsEasy\": -19490335,\n        \"winsSuperiority\": 71905860,\n        \"rank\": 64968783,\n        \"rankRobinGroup\": 8493441,\n        \"fightByOpponent\": {\n          \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n        },\n        \"isCompeting\": false,\n        \"hasOpenFight\": true,\n        \"isDisqualified\": false,\n        \"isNotRanked\": false,\n        \"isInjured\": true,\n        \"isForfeit\": false,\n        \"isRobinGroupNotRanked\": false,\n        \"accreditationStatus\": 95627076,\n        \"id\": \"in fugiat\",\n        \"sportEventWeightCategory\": \"occaecat minim\",\n        \"weight\": 317,\n        \"drawNumber\": 155,\n        \"seedNumber\": 16,\n        \"fighterWeight\": \"ex mol\",\n        \"points\": 60,\n        \"fighterStatus\": 7821015\n      },\n      {\n        \"athleteId\": \"adipisicing\",\n        \"sportEventWeightCategoryId\": \"do Ex\",\n        \"weightCategoryFullName\": \"nisi et qui\",\n        \"weightCategoryShortName\": \"do\",\n        \"weightCategoryCountFights\": 98419989,\n        \"hasWeightCategoryBlockchainIds\": false,\n        \"weightCategoryCountReadyFighters\": -54193977,\n        \"countFights\": -87047728,\n        \"personId\": \"do magna nisi ipsum\",\n        \"fullName\": \"anim\",\n        \"preferedName\": \"consequat\",\n        \"displayName\": \"ex enim dolor dolor\",\n        \"givenName\": \"nisi consequat\",\n        \"familyName\": \"esse enim elit laboris aute\",\n        \"personPhoto\": \"officia elit proident minim\",\n        \"athenaPrintId\": \"cillum est Excepteur tempor irure\",\n        \"teamAlternateName\": \"eiusmod Excepteur\",\n        \"teamName\": \"Duis quis\",\n        \"teamCountryFlag\": \"commodo id aute\",\n        \"sportEventTeamId\": \"deserunt Ut quis ea\",\n        \"sportEventId\": \"ut ad\",\n        \"drawRank\": 63148829,\n        \"robinGroup\": {\n          \"laborum_abe\": \"ullamco est veniam sint\",\n          \"id2\": true\n        },\n        \"robinGroupRank\": -20169576,\n        \"teamRankingPoint\": -70962390,\n        \"uwwPoint\": 13656502,\n        \"isFinalistBronze\": true,\n        \"isFinalistGold\": false,\n        \"isFinalist\": true,\n        \"knockOutStatus\": {\n          \"eaf22\": 62162402.80702433\n        },\n        \"hasLostknockOut\": true,\n        \"completed\": 48805206,\n        \"wins\": -97118853,\n        \"losses\": 2168213,\n        \"technicalPointsFor\": -3291073,\n        \"technicalPointsAgainst\": -93841547,\n        \"technicalPointsDiff\": 51300718,\n        \"rankingPointsFor\": 28431561,\n        \"rankingPointsAgainst\": 88714664,\n        \"rankingPointsDiff\": 50049706,\n        \"winsEasy\": 14258758,\n        \"winsSuperiority\": -78986391,\n        \"rank\": -1174238,\n        \"rankRobinGroup\": 78918116,\n        \"fightByOpponent\": {\n          \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n        },\n        \"isCompeting\": true,\n        \"hasOpenFight\": true,\n        \"isDisqualified\": false,\n        \"isNotRanked\": true,\n        \"isInjured\": false,\n        \"isForfeit\": false,\n        \"isRobinGroupNotRanked\": false,\n        \"accreditationStatus\": -49214012,\n        \"id\": \"nostrud ut\",\n        \"sportEventWeightCategory\": \"quis Ut proident nulla dolore\",\n        \"weight\": 374,\n        \"drawNumber\": 274,\n        \"seedNumber\": 10,\n        \"fighterWeight\": \"in sunt ullamco amet Ut\",\n        \"points\": 419,\n        \"fighterStatus\": 53487225\n      }\n    ],\n    \"rankingPointNiceName\": \"aute ut consequat ad commodo\",\n    \"resultText\": \"elit laboris do reprehenderit dolore\",\n    \"resultTextSmall\": \"in\",\n    \"roundRenamedSmall\": \"dolore deserunt tempor magna veniam\",\n    \"parentFightNumber1\": -34852265,\n    \"parentFightNumber2\": -69258630,\n    \"fightRefereesWithRole\": [\n      {\n        \"refereeId\": \"ex mollit\",\n        \"fightId\": \"cupidatat\",\n        \"refereeRole\": \"non id dolor\",\n        \"refereeFullName\": \"ut ipsum Ut\",\n        \"refereeDisplayName\": \"esse Lorem repreh\",\n        \"refereeNumber\": 27343672,\n        \"refereeTeamAlternateName\": \"Duis est ipsum\",\n        \"refereeCountryFlag\": \"exercitation est proident dolor aliqua\",\n        \"refereeFull\": \"ad nostrud\",\n        \"id\": \"ad dolore ut qui\"\n      },\n      {\n        \"refereeId\": \"sint in labore pariat\",\n        \"fightId\": \"ullamco voluptate consequat pariatur\",\n        \"refereeRole\": \"fugiat id reprehenderit Ut enim\",\n        \"refereeFullName\": \"anim aliqua in in reprehenderit\",\n        \"refereeDisplayName\": \"in aliqua dolore\",\n        \"refereeNumber\": 14599254,\n        \"refereeTeamAlternateName\": \"consectetur sint\",\n        \"refereeCountryFlag\": \"aliquip pariatur nostrud quis\",\n        \"refereeFull\": \"sit\",\n        \"id\": \"tempor quis\"\n      }\n    ],\n    \"needsRefresh\": true,\n    \"isCountdown\": true,\n    \"branding\": \"dolor\",\n    \"id\": \"esse Ut reprehenderit eu\",\n    \"parentFight1Id\": \"do\",\n    \"parentFight2Id\": \"minim adipisicing eu non\",\n    \"fighter1\": \"ipsum ut eiusmod\",\n    \"fighter1RankingPoint\": 3872,\n    \"fighter2\": \"dolore nostrud\",\n    \"fighter2RankingPoint\": 5317,\n    \"refereeGroup\": \"a\",\n    \"sportEventTeam1Id\": \"aliqua incididunt\",\n    \"sportEventTeam2Id\": \"mollit sit sunt deserunt nisi\",\n    \"fightMatId\": \"ea adipisicing\",\n    \"round\": \"in eiusmod non occaecat\",\n    \"qualifying\": true,\n    \"teamFightId\": \"aliquip Duis exercitation\",\n    \"status\": -16023731,\n    \"rankingCheck\": true,\n    \"technicalCheck\": true,\n    \"weight\": 83510308,\n    \"fightNumber\": 2261,\n    \"roundWeight\": 4388,\n    \"repechageWeight\": 7452,\n    \"repechageSection\": 7066,\n    \"displayOrder\": 4953,\n    \"canceled\": \"2010-03-07T20:14:14.569Z\",\n    \"fightReferees\": [\n      {\n        \"refereeId\": \"commodo irure minim dolor\",\n        \"fightId\": \"officia veniam\",\n        \"refereeRole\": \"officia Duis enim sint\",\n        \"refereeFullName\": \"ex ea sit\",\n        \"refereeDisplayName\": \"anim\",\n        \"refereeNumber\": 73211577,\n        \"refereeTeamAlternateName\": \"Duis magna\",\n        \"refereeCountryFlag\": \"irure elit fugiat\",\n        \"refereeFull\": \"ullamco anim deserunt\",\n        \"id\": \"ex in tempor nisi\"\n      },\n      {\n        \"refereeId\": \"qui de\",\n        \"fightId\": \"labore elit eiusmod Excepteur pariatur\",\n        \"refereeRole\": \"magna elit sed voluptate\",\n        \"refereeFullName\": \"Excepteur lab\",\n        \"refereeDisplayName\": \"dolore\",\n        \"refereeNumber\": -20860553,\n        \"refereeTeamAlternateName\": \"nostrud elit non laboris\",\n        \"refereeCountryFlag\": \"veniam exercitation\",\n        \"refereeFull\": \"elit dolo\",\n        \"id\": \"ut nulla sed laborum\"\n      }\n    ],\n    \"odfCode\": \"\",\n    \"refereeComment\": \"in quis aute\",\n    \"uploaderFight\": {\n      \"Duisa\": false,\n      \"temporbfe\": false\n    }\n  }\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update a fight",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sportEventWeightCategoryId\": \"consequat cupidatat\",\n  \"fighter1\": \"amet\",\n  \"fighter2\": \"in cupidatat dolor do nisi\",\n  \"sportEventTeam1Id\": \"sunt culpa laboris ea minim\",\n  \"sportEventTeam2Id\": \"ullamco elit nostrud Ut\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when update is successful",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sportEventWeightCategoryId\": \"consequat cupidatat\",\n  \"fighter1\": \"amet\",\n  \"fighter2\": \"in cupidatat dolor do nisi\",\n  \"sportEventTeam1Id\": \"sunt culpa laboris ea minim\",\n  \"sportEventTeam2Id\": \"ullamco elit nostrud Ut\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when invalid parameters are submitted",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sportEventWeightCategoryId\": \"consequat cupidatat\",\n  \"fighter1\": \"amet\",\n  \"fighter2\": \"in cupidatat dolor do nisi\",\n  \"sportEventTeam1Id\": \"sunt culpa laboris ea minim\",\n  \"sportEventTeam2Id\": \"ullamco elit nostrud Ut\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sportEventWeightCategoryId\": \"consequat cupidatat\",\n  \"fighter1\": \"amet\",\n  \"fighter2\": \"in cupidatat dolor do nisi\",\n  \"sportEventTeam1Id\": \"sunt culpa laboris ea minim\",\n  \"sportEventTeam2Id\": \"ullamco elit nostrud Ut\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sportEventWeightCategoryId\": \"consequat cupidatat\",\n  \"fighter1\": \"amet\",\n  \"fighter2\": \"in cupidatat dolor do nisi\",\n  \"sportEventTeam1Id\": \"sunt culpa laboris ea minim\",\n  \"sportEventTeam2Id\": \"ullamco elit nostrud Ut\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update a fight",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fightMatId\": \"et mollit consequat esse dolore\",\n  \"fightNumber\": 4974,\n  \"odfCode\": \"Ut dolor in enim tempor\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when update is successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"fightMatId\": \"et mollit consequat esse dolore\",\n  \"fightNumber\": 4974,\n  \"odfCode\": \"Ut dolor in enim tempor\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when invalid parameters are submitted",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"fightMatId\": \"et mollit consequat esse dolore\",\n  \"fightNumber\": 4974,\n  \"odfCode\": \"Ut dolor in enim tempor\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"fightMatId\": \"et mollit consequat esse dolore\",\n  \"fightNumber\": 4974,\n  \"odfCode\": \"Ut dolor in enim tempor\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"fightMatId\": \"et mollit consequat esse dolore\",\n  \"fightNumber\": 4974,\n  \"odfCode\": \"Ut dolor in enim tempor\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete a fight",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when update is successful",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get expected start time of a fight",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/expected",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"expected"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Expected time",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/expected",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"expected"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"expected\": \"sint aliqua dolor Lorem \"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/expected",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"expected"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/expected",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"expected"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unconfirm wrestlers in Team competition",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/unconfirm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"unconfirm"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when update is successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/unconfirm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"unconfirm"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/unconfirm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"unconfirm"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/unconfirm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"unconfirm"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Ranking check",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-check",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"ranking-check"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when update is successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-check",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"ranking-check"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-check",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"ranking-check"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-check",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"ranking-check"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Ranking uncheck",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-uncheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"ranking-uncheck"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when update is successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-uncheck",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"ranking-uncheck"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-uncheck",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"ranking-uncheck"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-uncheck",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"ranking-uncheck"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Technical check",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-check",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"technical-check"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when update is successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-check",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"technical-check"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-check",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"technical-check"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-check",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"technical-check"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Technical uncheck",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-uncheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"technical-uncheck"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when update is successful",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-uncheck",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"technical-uncheck"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-uncheck",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"technical-uncheck"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-uncheck",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"technical-uncheck"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Fight in progress",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/starting",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"starting"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when update is successful",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/starting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"starting"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/starting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"starting"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/starting",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"starting"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Clear result of a fight",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/clear-result",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"clear-result"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns number of fights updated",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/clear-result",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"clear-result"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"isClear\": true\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/clear-result",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"clear-result"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Fight not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/clear-result",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"clear-result"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get status of a team fight",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:teamFightId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":teamFightId",
												"status"
											],
											"variable": [
												{
													"key": "teamFightId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns number of fights updated",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:teamFightId/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":teamFightId",
														"status"
													],
													"variable": [
														{
															"key": "teamFightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": [\n    \"fugiat\",\n    \"Duis in\"\n  ]\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:teamFightId/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":teamFightId",
														"status"
													],
													"variable": [
														{
															"key": "teamFightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fight not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:teamFightId/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":teamFightId",
														"status"
													],
													"variable": [
														{
															"key": "teamFightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "video/{sportEventId}/match/{fightNumber}",
							"item": [
								{
									"name": "Get video details of a fight",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/video/:sportEventId/match/:fightNumber",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"video",
												":sportEventId",
												"match",
												":fightNumber"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "fightNumber",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a fight",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/video/:sportEventId/match/:fightNumber",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"video",
														":sportEventId",
														"match",
														":fightNumber"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "fightNumber",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fight\": {\n    \"fighter1Id\": \"quis deserunt laborum magna\",\n    \"fighter2Id\": \"elit ut tempor\",\n    \"fighter2AthenaId\": 35424636,\n    \"team1Name\": \"quis dolore dolor\",\n    \"team1AlternateName\": \"culpa\",\n    \"team1FullName\": \"commodo minim m\",\n    \"team1PoolName\": \"culpa velit enim aute\",\n    \"team2Name\": \"pariatur\",\n    \"team2AlternateName\": \"mollit sunt in est\",\n    \"team2FullName\": \"voluptate ipsum\",\n    \"team2PoolName\": \"aliquip proident tempor dolore sit\",\n    \"roundFriendlyName\": \"Duis ullamco Lorem aliquip\",\n    \"displayOrderInRound\": -97632065,\n    \"round1Id\": \"labore\",\n    \"round2Id\": \"ipsum elit\",\n    \"athlete1Color\": \"dolor magna\",\n    \"athlete2Color\": \"sunt\",\n    \"athlete1TextColor\": \"nisi proident\",\n    \"athlete2TextColor\": \"minim consectetur\",\n    \"matName\": \"officia\",\n    \"technicalPoints\": {\n      \"quis_6\": 18395971\n    },\n    \"technicalPointsDetail\": {\n      \"consectetur_6\": \"ea\",\n      \"amet621\": 84866142,\n      \"magna_1\": 59607944,\n      \"consequatc\": -5215783\n    },\n    \"technicalPointsTagStatus\": \"irure id aute consequat Lorem\",\n    \"cautionsList\": {\n      \"est6\": true\n    },\n    \"winnerFighter\": \"laborum labore\",\n    \"winnerTeam\": \"Ut\",\n    \"winnerTeamAlternateName\": \"quis deserunt id nulla sit\",\n    \"weightCategoryName\": \"fugiat sed aliqua\",\n    \"weightCategoryAlternateName\": \"qui enim in laboris\",\n    \"weightCategoryShortName\": \"mollit amet\",\n    \"weightCategoryMaxWeight\": 84567205,\n    \"weightCategoryColor\": \"irure ea\",\n    \"weightCategoryCompleted\": true,\n    \"audienceName\": \"culpa\",\n    \"audienceShortName\": \"occaecat\",\n    \"sportName\": \"cupidatat ea v\",\n    \"fighter1FullName\": \"non sed in in\",\n    \"fighter1DisplayName\": \"est qui minim in\",\n    \"fighter1FamilyName\": \"nostrud eu elit labore\",\n    \"fighter1GivenName\": \"voluptate eu conse\",\n    \"fighter1PreferedName\": \"non magna in dolore\",\n    \"fighter1PersonId\": \"elit laboris magna dolore\",\n    \"fighter1AthenaId\": 88940,\n    \"fighter1Weight\": -72139651.58272395,\n    \"fighter2FullName\": \"laborum esse enim dolore Duis\",\n    \"fighter2DisplayName\": \"minim ut esse\",\n    \"fighter2FamilyName\": \"incididunt laboris minim\",\n    \"fighter2GivenName\": \"deserunt ut tempor magna\",\n    \"fighter2PreferedName\": \"adipisicing laborum ut est\",\n    \"fighter2PersonId\": \"cillum\",\n    \"fighter2Weight\": -82061897.61847061,\n    \"victoryType\": \"deseru\",\n    \"endTime\": -63938360,\n    \"expectedStartDate\": \"2014-03-17T16:17:29.028Z\",\n    \"rankingPointNiceName\": \"elit ea nulla nostrud\",\n    \"resultText\": \"reprehenderit consectetur fugiat non\",\n    \"resultTextSmall\": \"id nulla aute amet\",\n    \"parentFightNumber1\": -90484211,\n    \"parentFightNumber2\": -91178312,\n    \"branding\": \"ut culpa aliquip incididunt\",\n    \"id\": \"cillum\",\n    \"fighter1RankingPoint\": 4773,\n    \"fighter2RankingPoint\": 5321,\n    \"refereeGroup\": \"s\",\n    \"sportEventTeam1Id\": \"culpa Excepteur\",\n    \"sportEventTeam2Id\": \"veniam amet ips\",\n    \"round\": \"ullamco Lorem\",\n    \"qualifying\": false,\n    \"teamFightId\": \"cupidatat sit\",\n    \"status\": 33905544,\n    \"weight\": -6138653,\n    \"fightNumber\": 3551,\n    \"canceled\": \"1957-03-14T12:21:54.451Z\",\n    \"odfCode\": \"eiusmod adipisicing Ut sint nulla\",\n    \"refereeComment\": \"in id ut sed non\",\n    \"uploaderFight\": {\n      \"magnab_\": \"elit irure\"\n    }\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/video/:sportEventId/match/:fightNumber",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"video",
														":sportEventId",
														"match",
														":fightNumber"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "fightNumber",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/video/:sportEventId/match/:fightNumber",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"video",
														":sportEventId",
														"match",
														":fightNumber"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "fightNumber",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get video details of a fight",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/video/:sportEventId/match/:fightNumber",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"video",
												":sportEventId",
												"match",
												":fightNumber"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "fightNumber",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a fight",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/video/:sportEventId/match/:fightNumber",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"video",
														":sportEventId",
														"match",
														":fightNumber"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "fightNumber",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fight\": {\n    \"fighter1Id\": \"officia nulla\",\n    \"fighter2Id\": \"magna ut\",\n    \"fighter2AthenaId\": 48854684,\n    \"team1Name\": \"in commodo\",\n    \"team1AlternateName\": \"adipisicing incididunt ullamco dolore veniam\",\n    \"team1FullName\": \"amet\",\n    \"team1PoolName\": \"aute ipsum magna do\",\n    \"team2Name\": \"elit aliquip dolor minim\",\n    \"team2AlternateName\": \"pro\",\n    \"team2FullName\": \"eiusmod aute cillum\",\n    \"team2PoolName\": \"Excepteur\",\n    \"roundFriendlyName\": \"ipsum in\",\n    \"displayOrderInRound\": -53132640,\n    \"round1Id\": \"adipisicing sunt magna in\",\n    \"round2Id\": \"eiusmod aliqua\",\n    \"athlete1Color\": \"s\",\n    \"athlete2Color\": \"nostrud laborum consectetur pariatur\",\n    \"athlete1TextColor\": \"do\",\n    \"athlete2TextColor\": \"officia\",\n    \"matName\": \"et consectetur dolore si\",\n    \"technicalPoints\": {\n      \"pariatur8\": \"adipisicing sit\"\n    },\n    \"technicalPointsDetail\": {\n      \"dolore_36\": 93122101.02700213\n    },\n    \"technicalPointsTagStatus\": \"reprehenderit pariatur dolor\",\n    \"cautionsList\": {\n      \"consectetur3e2\": 14429620.97935912,\n      \"etc53\": \"proident sed min\",\n      \"et57\": false\n    },\n    \"winnerFighter\": \"velit ipsum incididunt dolor\",\n    \"winnerTeam\": \"minim labore\",\n    \"winnerTeamAlternateName\": \"sunt laboris\",\n    \"weightCategoryName\": \"fugiat tempor do\",\n    \"weightCategoryAlternateName\": \"officia nulla\",\n    \"weightCategoryShortName\": \"ipsum Excepteur\",\n    \"weightCategoryMaxWeight\": 83030575,\n    \"weightCategoryColor\": \"dolore in in et\",\n    \"weightCategoryCompleted\": true,\n    \"audienceName\": \"aliqua ullamco consequat\",\n    \"audienceShortName\": \"eiusmod incididunt occaecat\",\n    \"sportName\": \"nulla ad adipisicing\",\n    \"fighter1FullName\": \"est minim enim voluptate aliqua\",\n    \"fighter1DisplayName\": \"est non veniam\",\n    \"fighter1FamilyName\": \"deserunt\",\n    \"fighter1GivenName\": \"in commodo cillum quis\",\n    \"fighter1PreferedName\": \"in esse dolor\",\n    \"fighter1PersonId\": \"eiusmod\",\n    \"fighter1AthenaId\": -32869621,\n    \"fighter1Weight\": 37005891.026273906,\n    \"fighter2FullName\": \"laborum\",\n    \"fighter2DisplayName\": \"id\",\n    \"fighter2FamilyName\": \"magna irure Excepteur non\",\n    \"fighter2GivenName\": \"cupidatat ad\",\n    \"fighter2PreferedName\": \"dolor dolore consequat\",\n    \"fighter2PersonId\": \"fugiat sit exerc\",\n    \"fighter2Weight\": -72941768.77920729,\n    \"victoryType\": \"sint consectetur nulla\",\n    \"endTime\": -79913886,\n    \"expectedStartDate\": \"1998-05-31T06:28:11.618Z\",\n    \"rankingPointNiceName\": \"amet officia dolore consectetur\",\n    \"resultText\": \"ex ut\",\n    \"resultTextSmall\": \"officia\",\n    \"parentFightNumber1\": 47989942,\n    \"parentFightNumber2\": 54274690,\n    \"branding\": \"eiusmod culpa\",\n    \"id\": \"sint quis pariatur\",\n    \"fighter1RankingPoint\": 2035,\n    \"fighter2RankingPoint\": 1154,\n    \"refereeGroup\": \"i\",\n    \"sportEventTeam1Id\": \"minim dolore est incididunt Lorem\",\n    \"sportEventTeam2Id\": \"sed aliqua\",\n    \"round\": \"occaecat\",\n    \"qualifying\": true,\n    \"teamFightId\": \"cupidatat in adipisicing ut cillum\",\n    \"status\": -37273786,\n    \"weight\": -79045839,\n    \"fightNumber\": 8948,\n    \"canceled\": \"1982-02-23T15:15:49.012Z\",\n    \"odfCode\": \"reprehenderit id dolor est sit\",\n    \"refereeComment\": \"incididunt id\",\n    \"uploaderFight\": {\n      \"est_76\": -57105431,\n      \"Duisac\": 25594040.15559727\n    }\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/video/:sportEventId/match/:fightNumber",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"video",
														":sportEventId",
														"match",
														":fightNumber"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "fightNumber",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/video/:sportEventId/match/:fightNumber",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"video",
														":sportEventId",
														"match",
														":fightNumber"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "fightNumber",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "odf",
							"item": [
								{
									"name": "Get a fight by its ODF Code",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/get/:odfCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"odf",
												"get",
												":odfCode"
											],
											"variable": [
												{
													"key": "odfCode",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a fight",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/get/:odfCode",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"odf",
														"get",
														":odfCode"
													],
													"variable": [
														{
															"key": "odfCode",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"sportEventId\": \"non in minim in\",\n  \"sportEventWeightCategoryId\": \"fugiat et\",\n  \"fighter1Id\": \"eu ullamco ex\",\n  \"fighter2Id\": \"laborum magna minim e\",\n  \"fighter2AthenaId\": 67573124,\n  \"team1Name\": \"ex fugiat\",\n  \"team1AlternateName\": \"cupidatat aliqua incididunt Excepteur\",\n  \"team1FullName\": \"aliquip pa\",\n  \"team1CountryFlag\": \"occaecat\",\n  \"team1CountryFlagScoreboard\": \"minim in officia nulla\",\n  \"team1CountryFlagMobile\": \"cillum ipsum ut\",\n  \"team1PoolName\": \"non nulla ullamco pariatur\",\n  \"team1FightByOpponent\": {\n    \"cupidatat0d\": -14508481\n  },\n  \"team2Name\": \"ipsum\",\n  \"team2AlternateName\": \"velit cupidatat sunt enim\",\n  \"team2FullName\": \"reprehenderit esse\",\n  \"team2CountryFlag\": \"adipisicing ad eu ut Duis\",\n  \"team2CountryFlagScoreboard\": \"ipsum ea incididunt dolore laboris\",\n  \"team2CountryFlagMobile\": \"irure in \",\n  \"team2PoolName\": \"consectetur nulla\",\n  \"team2FightByOpponent\": {\n    \"ut_98\": \"laborum\",\n    \"cupidatatc_\": -51253404\n  },\n  \"roundFriendlyName\": \"pariatur minim\",\n  \"displayOrderInRound\": -74847636,\n  \"round1Id\": \"pariatur eu\",\n  \"round2Id\": \"qui consectetur\",\n  \"countReferees\": 14171807,\n  \"sportId\": \"ea officia\",\n  \"athlete1Color\": \"elit\",\n  \"athlete2Color\": \"officia proident ut nisi\",\n  \"athlete1TextColor\": \"reprehenderit velit\",\n  \"athlete2TextColor\": \"ex consequat elit\",\n  \"matName\": \"eu anim\",\n  \"sessionId\": \"officia\",\n  \"sessionName\": \"magna\",\n  \"sessionStartDate\": \"2005-03-04T05:31:30.142Z\",\n  \"technicalPoints\": {\n    \"officia6\": 77009409,\n    \"idee\": 20752769.26900527\n  },\n  \"technicalPointsDetail\": {\n    \"nostrud_8\": \"velit aute dolore esse reprehenderit\",\n    \"aliquipccb\": 30273699\n  },\n  \"technicalPointsTagStatus\": \"quis\",\n  \"technicalPointIds\": {\n    \"Excepteur89\": -66356366.13269282,\n    \"dolor1\": -2106139.7158765495\n  },\n  \"cautionsList\": {\n    \"Ut_39\": -26413300,\n    \"enim_8f\": -61101878.298206545,\n    \"Ut_0ce\": true\n  },\n  \"isCompleted\": false,\n  \"isReady\": false,\n  \"isRobinGroupFight\": false,\n  \"winnerFighter\": \"ullamco Excepteur sed in\",\n  \"winnerTeam\": \"adipisicing\",\n  \"winnerTeamAlternateName\": \"quis consequat officia\",\n  \"sportEventName\": \"est Excepteur incididunt\",\n  \"sportEventStartDate\": \"1989-06-21T09:31:08.466Z\",\n  \"sportEventLogo\": \"aliquip i\",\n  \"rankingPoint\": {\n    \"fightId\": \"a\",\n    \"victoryType\": \"mollit exercitation sed culpa\",\n    \"fighterId\": \"in eu aliquip dolore\",\n    \"fighterFullName\": \"aute ex consectetur\",\n    \"victoryTypeId\": \"exercitation ullamco \",\n    \"victoryTypeName\": \"officia\",\n    \"victoryTypeNiceName\": \"ut consectetur aliqua\",\n    \"sportId\": \"occaecat anim Lorem\",\n    \"sportEventId\": \"officia non sint\",\n    \"id\": \"commodo amet\",\n    \"fighter\": \"occaecat Ut qui\",\n    \"second\": 47125\n  },\n  \"completedDate\": \"2019-07-19T22:06:27.328Z\",\n  \"roundsNumber\": -20795313,\n  \"roundDuration\": -99225426,\n  \"sportAlternateName\": \"ut dolor non ipsum mollit\",\n  \"weightCategoryName\": \"irure\",\n  \"weightCategoryAlternateName\": \"Ut ea elit\",\n  \"weightCategoryShortName\": \"Lorem dolor quis\",\n  \"weightCategoryMaxWeight\": -78677221,\n  \"weightCategoryFullName\": \"Duis et enim\",\n  \"isWeightCategoryVisible\": true,\n  \"weightCategoryAverageDuration\": -7063301,\n  \"weightCategoryColor\": \"in adipisicing est aute\",\n  \"weightCategoryReady\": true,\n  \"weightCategoryStarted\": true,\n  \"weightCategoryCompleted\": true,\n  \"victoryTypes\": {\n    \"sunt__\": -19858326.542087257,\n    \"ullamco_045\": 87142610\n  },\n  \"victoryTypesArray\": {\n    \"minimf\": 68213404,\n    \"ut_a\": false\n  },\n  \"audienceId\": \"Excepteur voluptate\",\n  \"audienceName\": \"dolor pariatur\",\n  \"audienceShortName\": \"temp\",\n  \"sportName\": \"in proiden\",\n  \"injuryTime\": 91641312,\n  \"warnings\": false,\n  \"cautions\": -30729953,\n  \"legFouls\": -74432857,\n  \"activityTime\": false,\n  \"fighter1FullName\": \"nulla aliqua\",\n  \"fighter1DisplayName\": \"est\",\n  \"fighter1FamilyName\": \"proident\",\n  \"fighter1GivenName\": \"reprehenderit incididunt magna consectetur\",\n  \"fighter1PreferedName\": \"dolor velit sint\",\n  \"fighter1DrawRank\": \"pariatur do id fugiat consequat\",\n  \"fighter1RobinRank\": \"Duis est officia mollit laboris\",\n  \"fighter1SeedNumber\": 10718804,\n  \"fighter1AthleteId\": \"in\",\n  \"fighter1PersonId\": \"do sint\",\n  \"fighter1AthenaId\": -3403130,\n  \"fighter1IsSeeded\": true,\n  \"fighter1Status\": 15133634,\n  \"fighter1IsInjured\": false,\n  \"fighter1Weight\": 35048267.93446782,\n  \"fighter2FullName\": \"dolore\",\n  \"fighter2DisplayName\": \"anim consectetur\",\n  \"fighter2FamilyName\": \"anim mollit exercitation\",\n  \"fighter2GivenName\": \"mollit cupidatat Lorem anim eu\",\n  \"fighter2PreferedName\": \"aute\",\n  \"fighter2DrawRank\": -81986224,\n  \"fighter2RobinRank\": -57358232,\n  \"fighter2SeedNumber\": -41223170,\n  \"fighter2AthleteId\": \"elit tempor incididunt\",\n  \"fighter2PersonId\": \"eu incididunt minim\",\n  \"fighter2IsSeeded\": true,\n  \"fighter2Status\": 48916474,\n  \"fighter2IsInjured\": true,\n  \"fighter2Weight\": -65884501.84307066,\n  \"result\": \"est anim aute\",\n  \"victoryType\": \"reprehenderit irure\",\n  \"endTime\": 81883836,\n  \"endDate\": \"2003-03-20T22:47:04.558Z\",\n  \"expectedDateStart\": \"1956-01-16T03:44:42.174Z\",\n  \"expectedStartDate\": \"1949-05-08T09:51:43.131Z\",\n  \"team1Fighters\": [\n    {\n      \"athleteId\": \"sed deserunt\",\n      \"sportEventWeightCategoryId\": \"laboris laborum sunt\",\n      \"weightCategoryFullName\": \"in labore\",\n      \"weightCategoryShortName\": \"ut in\",\n      \"weightCategoryCountFights\": -46767506,\n      \"hasWeightCategoryBlockchainIds\": false,\n      \"weightCategoryCountReadyFighters\": -73887987,\n      \"countFights\": -53521208,\n      \"personId\": \"ut\",\n      \"fullName\": \"dolor Lorem ea dolore nisi\",\n      \"preferedName\": \"dolor cillum nostrud reprehenderit\",\n      \"displayName\": \"officia voluptate laborum cillum\",\n      \"givenName\": \"nostrud dolore\",\n      \"familyName\": \"in quis\",\n      \"personPhoto\": \"irure velit pariatur ad cupidatat\",\n      \"athenaPrintId\": \"voluptate\",\n      \"teamAlternateName\": \"est sunt irure nulla\",\n      \"teamName\": \"in commodo elit\",\n      \"teamCountryFlag\": \"do non\",\n      \"sportEventTeamId\": \"minim culpa est\",\n      \"sportEventId\": \"culpa aliqua mollit exercitatio\",\n      \"drawRank\": -88667916,\n      \"robinGroup\": {\n        \"voluptate6a1\": 58228363,\n        \"consequat4\": false\n      },\n      \"robinGroupRank\": 76950700,\n      \"teamRankingPoint\": 67834631,\n      \"uwwPoint\": -87730918,\n      \"isFinalistBronze\": true,\n      \"isFinalistGold\": true,\n      \"isFinalist\": true,\n      \"knockOutStatus\": {\n        \"Duis_d\": 43507978.55920035,\n        \"minim_3\": \"consequat id\"\n      },\n      \"hasLostknockOut\": true,\n      \"completed\": 97293815,\n      \"wins\": 56910266,\n      \"losses\": -10546426,\n      \"technicalPointsFor\": -72693089,\n      \"technicalPointsAgainst\": -63056126,\n      \"technicalPointsDiff\": -43118241,\n      \"rankingPointsFor\": -77413704,\n      \"rankingPointsAgainst\": -34151726,\n      \"rankingPointsDiff\": -50040149,\n      \"winsEasy\": 63326384,\n      \"winsSuperiority\": -93794502,\n      \"rank\": -56694182,\n      \"rankRobinGroup\": -72930823,\n      \"fightByOpponent\": {\n        \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n      },\n      \"isCompeting\": false,\n      \"hasOpenFight\": true,\n      \"isDisqualified\": true,\n      \"isNotRanked\": true,\n      \"isInjured\": true,\n      \"isForfeit\": true,\n      \"isRobinGroupNotRanked\": true,\n      \"accreditationStatus\": -11712315,\n      \"id\": \"cupidatat voluptate dolore et\",\n      \"sportEventWeightCategory\": \"ex laborum\",\n      \"weight\": 131,\n      \"drawNumber\": 113,\n      \"seedNumber\": 3,\n      \"fighterWeight\": \"aliquip Excepteur occaecat fugiat sed\",\n      \"points\": 193,\n      \"fighterStatus\": 19964569\n    },\n    {\n      \"athleteId\": \"dolor dolore cupidatat\",\n      \"sportEventWeightCategoryId\": \"eiusmod\",\n      \"weightCategoryFullName\": \"sed dolore\",\n      \"weightCategoryShortName\": \"eu dolor esse\",\n      \"weightCategoryCountFights\": -16532250,\n      \"hasWeightCategoryBlockchainIds\": false,\n      \"weightCategoryCountReadyFighters\": -73683826,\n      \"countFights\": -86622511,\n      \"personId\": \"dolore aliquip minim ut\",\n      \"fullName\": \"est\",\n      \"preferedName\": \"consectetur mollit anim irure\",\n      \"displayName\": \"pariatur in anim amet ut\",\n      \"givenName\": \"\",\n      \"familyName\": \"eiusmod cillum Excepteur in\",\n      \"personPhoto\": \"elit adipisicing in non irure\",\n      \"athenaPrintId\": \"elit reprehenderit cillum nisi minim\",\n      \"teamAlternateName\": \"culpa\",\n      \"teamName\": \"aliqua\",\n      \"teamCountryFlag\": \"ipsum in commodo\",\n      \"sportEventTeamId\": \"pariatur\",\n      \"sportEventId\": \"proident Duis fugiat\",\n      \"drawRank\": 49512457,\n      \"robinGroup\": {\n        \"do_8\": 67363177.49309322,\n        \"cillum_a\": \"consectetur aute\",\n        \"suntf02\": \"minim nisi aliquip\",\n        \"est_dce\": \"cupidatat laborum labore aliqua\"\n      },\n      \"robinGroupRank\": 82437053,\n      \"teamRankingPoint\": -95475802,\n      \"uwwPoint\": 29950855,\n      \"isFinalistBronze\": false,\n      \"isFinalistGold\": false,\n      \"isFinalist\": true,\n      \"knockOutStatus\": {\n        \"deserunt_5d1\": true,\n        \"do7e\": \"eu fugiat consectetur in\"\n      },\n      \"hasLostknockOut\": false,\n      \"completed\": 14411080,\n      \"wins\": 72475515,\n      \"losses\": 73611246,\n      \"technicalPointsFor\": -45066125,\n      \"technicalPointsAgainst\": -10922544,\n      \"technicalPointsDiff\": 81615257,\n      \"rankingPointsFor\": -86796864,\n      \"rankingPointsAgainst\": 90477359,\n      \"rankingPointsDiff\": -99010920,\n      \"winsEasy\": -39089520,\n      \"winsSuperiority\": -15529146,\n      \"rank\": 29259506,\n      \"rankRobinGroup\": -58142170,\n      \"fightByOpponent\": {\n        \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n      },\n      \"isCompeting\": true,\n      \"hasOpenFight\": false,\n      \"isDisqualified\": true,\n      \"isNotRanked\": true,\n      \"isInjured\": true,\n      \"isForfeit\": false,\n      \"isRobinGroupNotRanked\": true,\n      \"accreditationStatus\": -45103409,\n      \"id\": \"adipisicing deserunt irure ut\",\n      \"sportEventWeightCategory\": \"adipisicing cillum sunt ea mollit\",\n      \"weight\": 187,\n      \"drawNumber\": 231,\n      \"seedNumber\": 23,\n      \"fighterWeight\": \"cillum mollit dolor\",\n      \"points\": 66,\n      \"fighterStatus\": 2410320\n    }\n  ],\n  \"team2Fighters\": [\n    {\n      \"athleteId\": \"adipisicing labore minim\",\n      \"sportEventWeightCategoryId\": \"qui sunt Lorem ad\",\n      \"weightCategoryFullName\": \"cupidatat officia Excepteur\",\n      \"weightCategoryShortName\": \"nulla sit\",\n      \"weightCategoryCountFights\": -8868977,\n      \"hasWeightCategoryBlockchainIds\": false,\n      \"weightCategoryCountReadyFighters\": 61984690,\n      \"countFights\": -88522990,\n      \"personId\": \"amet enim pariatur\",\n      \"fullName\": \"a\",\n      \"preferedName\": \"sit laborum tempor\",\n      \"displayName\": \"esse quis\",\n      \"givenName\": \"Excepteur officia dolor\",\n      \"familyName\": \"exercitation officia in labore\",\n      \"personPhoto\": \"non elit\",\n      \"athenaPrintId\": \"esse\",\n      \"teamAlternateName\": \"officia\",\n      \"teamName\": \"aliquip deserunt nulla\",\n      \"teamCountryFlag\": \"id reprehenderit et tempor\",\n      \"sportEventTeamId\": \"dolore\",\n      \"sportEventId\": \"minim veniam\",\n      \"drawRank\": -33901030,\n      \"robinGroup\": {\n        \"mollit95a\": false,\n        \"Excepteurf4_\": -20170587.791455746,\n        \"aliquip714\": \"sint minim reprehenderit\",\n        \"aute139\": 4273014\n      },\n      \"robinGroupRank\": 23919903,\n      \"teamRankingPoint\": -28775613,\n      \"uwwPoint\": -1934287,\n      \"isFinalistBronze\": false,\n      \"isFinalistGold\": false,\n      \"isFinalist\": true,\n      \"knockOutStatus\": {\n        \"in_3bf\": false,\n        \"euce8\": -49594263\n      },\n      \"hasLostknockOut\": false,\n      \"completed\": -27240275,\n      \"wins\": 26575073,\n      \"losses\": -67833227,\n      \"technicalPointsFor\": 5000945,\n      \"technicalPointsAgainst\": 76005077,\n      \"technicalPointsDiff\": 85020673,\n      \"rankingPointsFor\": 92920752,\n      \"rankingPointsAgainst\": 11973416,\n      \"rankingPointsDiff\": 30186831,\n      \"winsEasy\": -87218705,\n      \"winsSuperiority\": 81860397,\n      \"rank\": -69052897,\n      \"rankRobinGroup\": -85811797,\n      \"fightByOpponent\": {\n        \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n      },\n      \"isCompeting\": false,\n      \"hasOpenFight\": false,\n      \"isDisqualified\": false,\n      \"isNotRanked\": true,\n      \"isInjured\": true,\n      \"isForfeit\": true,\n      \"isRobinGroupNotRanked\": true,\n      \"accreditationStatus\": 38436096,\n      \"id\": \"do ut\",\n      \"sportEventWeightCategory\": \"veniam aliquip\",\n      \"weight\": 158,\n      \"drawNumber\": 21,\n      \"seedNumber\": 2,\n      \"fighterWeight\": \"dolore\",\n      \"points\": 455,\n      \"fighterStatus\": 55215617\n    },\n    {\n      \"athleteId\": \"in laborum\",\n      \"sportEventWeightCategoryId\": \"ipsum\",\n      \"weightCategoryFullName\": \"in esse exercitation aute\",\n      \"weightCategoryShortName\": \"commodo et do tempor\",\n      \"weightCategoryCountFights\": 4805171,\n      \"hasWeightCategoryBlockchainIds\": true,\n      \"weightCategoryCountReadyFighters\": 53667803,\n      \"countFights\": 88803724,\n      \"personId\": \"veniam sit\",\n      \"fullName\": \"dolore\",\n      \"preferedName\": \"do sint officia lab\",\n      \"displayName\": \"reprehenderit do nostrud Lorem\",\n      \"givenName\": \"velit nisi ut\",\n      \"familyName\": \"dolore pariatur mollit\",\n      \"personPhoto\": \"labore aliqua do Excepteur\",\n      \"athenaPrintId\": \"fugiat\",\n      \"teamAlternateName\": \"reprehenderit aliqua Duis\",\n      \"teamName\": \"mollit sit\",\n      \"teamCountryFlag\": \"in ex sit\",\n      \"sportEventTeamId\": \"magna adipisicing\",\n      \"sportEventId\": \"cupidatat laboris pariatur in\",\n      \"drawRank\": -34883743,\n      \"robinGroup\": {\n        \"irure_c23\": \"officia laboris consequat sunt id\"\n      },\n      \"robinGroupRank\": -80310368,\n      \"teamRankingPoint\": 36661839,\n      \"uwwPoint\": -82468335,\n      \"isFinalistBronze\": true,\n      \"isFinalistGold\": false,\n      \"isFinalist\": true,\n      \"knockOutStatus\": {\n        \"eu_e_b\": -21730156\n      },\n      \"hasLostknockOut\": true,\n      \"completed\": 67046525,\n      \"wins\": -42120728,\n      \"losses\": -77249867,\n      \"technicalPointsFor\": -83357748,\n      \"technicalPointsAgainst\": 76601528,\n      \"technicalPointsDiff\": 50243804,\n      \"rankingPointsFor\": -92387644,\n      \"rankingPointsAgainst\": 14899151,\n      \"rankingPointsDiff\": -29060156,\n      \"winsEasy\": 15577098,\n      \"winsSuperiority\": 49302887,\n      \"rank\": -94640149,\n      \"rankRobinGroup\": -23721417,\n      \"fightByOpponent\": {\n        \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n      },\n      \"isCompeting\": true,\n      \"hasOpenFight\": false,\n      \"isDisqualified\": false,\n      \"isNotRanked\": false,\n      \"isInjured\": false,\n      \"isForfeit\": false,\n      \"isRobinGroupNotRanked\": true,\n      \"accreditationStatus\": -67728547,\n      \"id\": \"fugiat sint nisi ut minim\",\n      \"sportEventWeightCategory\": \"dolor sed sit\",\n      \"weight\": 6,\n      \"drawNumber\": 49,\n      \"seedNumber\": 12,\n      \"fighterWeight\": \"ut\",\n      \"points\": 294,\n      \"fighterStatus\": -57756034\n    }\n  ],\n  \"rankingPointNiceName\": \"eu Excepteur cillum\",\n  \"resultText\": \"consectetur id ea est cillum\",\n  \"resultTextSmall\": \"aliquip nostrud veniam do\",\n  \"roundRenamedSmall\": \"elit est Ut nisi\",\n  \"parentFightNumber1\": 20093383,\n  \"parentFightNumber2\": 93967280,\n  \"fightRefereesWithRole\": [\n    {\n      \"refereeId\": \"ut sit dolor\",\n      \"fightId\": \"esse\",\n      \"refereeRole\": \"Ut ali\",\n      \"refereeFullName\": \"elit magna Ut sit\",\n      \"refereeDisplayName\": \"l\",\n      \"refereeNumber\": -5013535,\n      \"refereeTeamAlternateName\": \"amet\",\n      \"refereeCountryFlag\": \"proident aliquip ullamco et\",\n      \"refereeFull\": \"velit cillum\",\n      \"id\": \"sit cillum aliqua\"\n    },\n    {\n      \"refereeId\": \"voluptate\",\n      \"fightId\": \"eiusmod fugiat occaecat dolore\",\n      \"refereeRole\": \"occaecat sit\",\n      \"refereeFullName\": \"velit aliqua incididunt magna\",\n      \"refereeDisplayName\": \"Ut dolor pariatur et\",\n      \"refereeNumber\": 58644030,\n      \"refereeTeamAlternateName\": \"dolor\",\n      \"refereeCountryFlag\": \"pariatur sint officia fugiat culpa\",\n      \"refereeFull\": \"ex proident\",\n      \"id\": \"aliquip sint sed sunt\"\n    }\n  ],\n  \"needsRefresh\": false,\n  \"isCountdown\": true,\n  \"branding\": \"cillum mollit\",\n  \"id\": \"fugiat nisi\",\n  \"parentFight1Id\": \"ad reprehenderit id\",\n  \"parentFight2Id\": \"veniam ali\",\n  \"fighter1\": \"in Ut aliqua\",\n  \"fighter1RankingPoint\": 6779,\n  \"fighter2\": \"cupidatat sunt sint\",\n  \"fighter2RankingPoint\": 5228,\n  \"refereeGroup\": \"u\",\n  \"sportEventTeam1Id\": \"laboris adipisicing quis fugiat\",\n  \"sportEventTeam2Id\": \"dolore adipisicing id magna\",\n  \"fightMatId\": \"consequat Lorem\",\n  \"round\": \"aliquip amet sit\",\n  \"qualifying\": true,\n  \"teamFightId\": \"nulla in consectetur\",\n  \"status\": -79139202,\n  \"rankingCheck\": false,\n  \"technicalCheck\": false,\n  \"weight\": -4887123,\n  \"fightNumber\": 9373,\n  \"roundWeight\": 3836,\n  \"repechageWeight\": 1959,\n  \"repechageSection\": 2171,\n  \"displayOrder\": 9652,\n  \"canceled\": \"1986-09-09T03:37:54.599Z\",\n  \"fightReferees\": [\n    {\n      \"refereeId\": \"adipisicing minim ad\",\n      \"fightId\": \"minim consequat nulla\",\n      \"refereeRole\": \"do adipisicing repre\",\n      \"refereeFullName\": \"aute in Duis eiusmod\",\n      \"refereeDisplayName\": \"dolore ut in\",\n      \"refereeNumber\": 70370269,\n      \"refereeTeamAlternateName\": \"exercitation irure nisi\",\n      \"refereeCountryFlag\": \"consectetur exercitation\",\n      \"refereeFull\": \"eu ut est quis\",\n      \"id\": \"Ut ut laborum nulla\"\n    },\n    {\n      \"refereeId\": \"anim amet enim in reprehenderit\",\n      \"fightId\": \"ut\",\n      \"refereeRole\": \"\",\n      \"refereeFullName\": \"ea elit quis\",\n      \"refereeDisplayName\": \"in n\",\n      \"refereeNumber\": 91858875,\n      \"refereeTeamAlternateName\": \"anim elit\",\n      \"refereeCountryFlag\": \"mollit ipsum anim sint tempor\",\n      \"refereeFull\": \"exercitation Duis Lorem ut\",\n      \"id\": \"nu\"\n    }\n  ],\n  \"odfCode\": \"con\",\n  \"refereeComment\": \"commodo adipisicing dolor id sint\",\n  \"uploaderFight\": {\n    \"dolore_c50\": 69127781,\n    \"ullamco_c2c\": true\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/get/:odfCode",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"odf",
														"get",
														":odfCode"
													],
													"variable": [
														{
															"key": "odfCode",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/get/:odfCode",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"odf",
														"get",
														":odfCode"
													],
													"variable": [
														{
															"key": "odfCode",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get a fight by its ODF Wrestlers Code",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/:odfCompetitionCode/get/:odfWrestler1/:odfWrestler2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"odf",
												":odfCompetitionCode",
												"get",
												":odfWrestler1",
												":odfWrestler2"
											],
											"variable": [
												{
													"key": "odfCompetitionCode",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "odfWrestler1",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "odfWrestler2",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a fight",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/:odfCompetitionCode/get/:odfWrestler1/:odfWrestler2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"odf",
														":odfCompetitionCode",
														"get",
														":odfWrestler1",
														":odfWrestler2"
													],
													"variable": [
														{
															"key": "odfCompetitionCode",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "odfWrestler1",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "odfWrestler2",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"sportEventId\": \"non in minim in\",\n  \"sportEventWeightCategoryId\": \"fugiat et\",\n  \"fighter1Id\": \"eu ullamco ex\",\n  \"fighter2Id\": \"laborum magna minim e\",\n  \"fighter2AthenaId\": 67573124,\n  \"team1Name\": \"ex fugiat\",\n  \"team1AlternateName\": \"cupidatat aliqua incididunt Excepteur\",\n  \"team1FullName\": \"aliquip pa\",\n  \"team1CountryFlag\": \"occaecat\",\n  \"team1CountryFlagScoreboard\": \"minim in officia nulla\",\n  \"team1CountryFlagMobile\": \"cillum ipsum ut\",\n  \"team1PoolName\": \"non nulla ullamco pariatur\",\n  \"team1FightByOpponent\": {\n    \"cupidatat0d\": -14508481\n  },\n  \"team2Name\": \"ipsum\",\n  \"team2AlternateName\": \"velit cupidatat sunt enim\",\n  \"team2FullName\": \"reprehenderit esse\",\n  \"team2CountryFlag\": \"adipisicing ad eu ut Duis\",\n  \"team2CountryFlagScoreboard\": \"ipsum ea incididunt dolore laboris\",\n  \"team2CountryFlagMobile\": \"irure in \",\n  \"team2PoolName\": \"consectetur nulla\",\n  \"team2FightByOpponent\": {\n    \"ut_98\": \"laborum\",\n    \"cupidatatc_\": -51253404\n  },\n  \"roundFriendlyName\": \"pariatur minim\",\n  \"displayOrderInRound\": -74847636,\n  \"round1Id\": \"pariatur eu\",\n  \"round2Id\": \"qui consectetur\",\n  \"countReferees\": 14171807,\n  \"sportId\": \"ea officia\",\n  \"athlete1Color\": \"elit\",\n  \"athlete2Color\": \"officia proident ut nisi\",\n  \"athlete1TextColor\": \"reprehenderit velit\",\n  \"athlete2TextColor\": \"ex consequat elit\",\n  \"matName\": \"eu anim\",\n  \"sessionId\": \"officia\",\n  \"sessionName\": \"magna\",\n  \"sessionStartDate\": \"2005-03-04T05:31:30.142Z\",\n  \"technicalPoints\": {\n    \"officia6\": 77009409,\n    \"idee\": 20752769.26900527\n  },\n  \"technicalPointsDetail\": {\n    \"nostrud_8\": \"velit aute dolore esse reprehenderit\",\n    \"aliquipccb\": 30273699\n  },\n  \"technicalPointsTagStatus\": \"quis\",\n  \"technicalPointIds\": {\n    \"Excepteur89\": -66356366.13269282,\n    \"dolor1\": -2106139.7158765495\n  },\n  \"cautionsList\": {\n    \"Ut_39\": -26413300,\n    \"enim_8f\": -61101878.298206545,\n    \"Ut_0ce\": true\n  },\n  \"isCompleted\": false,\n  \"isReady\": false,\n  \"isRobinGroupFight\": false,\n  \"winnerFighter\": \"ullamco Excepteur sed in\",\n  \"winnerTeam\": \"adipisicing\",\n  \"winnerTeamAlternateName\": \"quis consequat officia\",\n  \"sportEventName\": \"est Excepteur incididunt\",\n  \"sportEventStartDate\": \"1989-06-21T09:31:08.466Z\",\n  \"sportEventLogo\": \"aliquip i\",\n  \"rankingPoint\": {\n    \"fightId\": \"a\",\n    \"victoryType\": \"mollit exercitation sed culpa\",\n    \"fighterId\": \"in eu aliquip dolore\",\n    \"fighterFullName\": \"aute ex consectetur\",\n    \"victoryTypeId\": \"exercitation ullamco \",\n    \"victoryTypeName\": \"officia\",\n    \"victoryTypeNiceName\": \"ut consectetur aliqua\",\n    \"sportId\": \"occaecat anim Lorem\",\n    \"sportEventId\": \"officia non sint\",\n    \"id\": \"commodo amet\",\n    \"fighter\": \"occaecat Ut qui\",\n    \"second\": 47125\n  },\n  \"completedDate\": \"2019-07-19T22:06:27.328Z\",\n  \"roundsNumber\": -20795313,\n  \"roundDuration\": -99225426,\n  \"sportAlternateName\": \"ut dolor non ipsum mollit\",\n  \"weightCategoryName\": \"irure\",\n  \"weightCategoryAlternateName\": \"Ut ea elit\",\n  \"weightCategoryShortName\": \"Lorem dolor quis\",\n  \"weightCategoryMaxWeight\": -78677221,\n  \"weightCategoryFullName\": \"Duis et enim\",\n  \"isWeightCategoryVisible\": true,\n  \"weightCategoryAverageDuration\": -7063301,\n  \"weightCategoryColor\": \"in adipisicing est aute\",\n  \"weightCategoryReady\": true,\n  \"weightCategoryStarted\": true,\n  \"weightCategoryCompleted\": true,\n  \"victoryTypes\": {\n    \"sunt__\": -19858326.542087257,\n    \"ullamco_045\": 87142610\n  },\n  \"victoryTypesArray\": {\n    \"minimf\": 68213404,\n    \"ut_a\": false\n  },\n  \"audienceId\": \"Excepteur voluptate\",\n  \"audienceName\": \"dolor pariatur\",\n  \"audienceShortName\": \"temp\",\n  \"sportName\": \"in proiden\",\n  \"injuryTime\": 91641312,\n  \"warnings\": false,\n  \"cautions\": -30729953,\n  \"legFouls\": -74432857,\n  \"activityTime\": false,\n  \"fighter1FullName\": \"nulla aliqua\",\n  \"fighter1DisplayName\": \"est\",\n  \"fighter1FamilyName\": \"proident\",\n  \"fighter1GivenName\": \"reprehenderit incididunt magna consectetur\",\n  \"fighter1PreferedName\": \"dolor velit sint\",\n  \"fighter1DrawRank\": \"pariatur do id fugiat consequat\",\n  \"fighter1RobinRank\": \"Duis est officia mollit laboris\",\n  \"fighter1SeedNumber\": 10718804,\n  \"fighter1AthleteId\": \"in\",\n  \"fighter1PersonId\": \"do sint\",\n  \"fighter1AthenaId\": -3403130,\n  \"fighter1IsSeeded\": true,\n  \"fighter1Status\": 15133634,\n  \"fighter1IsInjured\": false,\n  \"fighter1Weight\": 35048267.93446782,\n  \"fighter2FullName\": \"dolore\",\n  \"fighter2DisplayName\": \"anim consectetur\",\n  \"fighter2FamilyName\": \"anim mollit exercitation\",\n  \"fighter2GivenName\": \"mollit cupidatat Lorem anim eu\",\n  \"fighter2PreferedName\": \"aute\",\n  \"fighter2DrawRank\": -81986224,\n  \"fighter2RobinRank\": -57358232,\n  \"fighter2SeedNumber\": -41223170,\n  \"fighter2AthleteId\": \"elit tempor incididunt\",\n  \"fighter2PersonId\": \"eu incididunt minim\",\n  \"fighter2IsSeeded\": true,\n  \"fighter2Status\": 48916474,\n  \"fighter2IsInjured\": true,\n  \"fighter2Weight\": -65884501.84307066,\n  \"result\": \"est anim aute\",\n  \"victoryType\": \"reprehenderit irure\",\n  \"endTime\": 81883836,\n  \"endDate\": \"2003-03-20T22:47:04.558Z\",\n  \"expectedDateStart\": \"1956-01-16T03:44:42.174Z\",\n  \"expectedStartDate\": \"1949-05-08T09:51:43.131Z\",\n  \"team1Fighters\": [\n    {\n      \"athleteId\": \"sed deserunt\",\n      \"sportEventWeightCategoryId\": \"laboris laborum sunt\",\n      \"weightCategoryFullName\": \"in labore\",\n      \"weightCategoryShortName\": \"ut in\",\n      \"weightCategoryCountFights\": -46767506,\n      \"hasWeightCategoryBlockchainIds\": false,\n      \"weightCategoryCountReadyFighters\": -73887987,\n      \"countFights\": -53521208,\n      \"personId\": \"ut\",\n      \"fullName\": \"dolor Lorem ea dolore nisi\",\n      \"preferedName\": \"dolor cillum nostrud reprehenderit\",\n      \"displayName\": \"officia voluptate laborum cillum\",\n      \"givenName\": \"nostrud dolore\",\n      \"familyName\": \"in quis\",\n      \"personPhoto\": \"irure velit pariatur ad cupidatat\",\n      \"athenaPrintId\": \"voluptate\",\n      \"teamAlternateName\": \"est sunt irure nulla\",\n      \"teamName\": \"in commodo elit\",\n      \"teamCountryFlag\": \"do non\",\n      \"sportEventTeamId\": \"minim culpa est\",\n      \"sportEventId\": \"culpa aliqua mollit exercitatio\",\n      \"drawRank\": -88667916,\n      \"robinGroup\": {\n        \"voluptate6a1\": 58228363,\n        \"consequat4\": false\n      },\n      \"robinGroupRank\": 76950700,\n      \"teamRankingPoint\": 67834631,\n      \"uwwPoint\": -87730918,\n      \"isFinalistBronze\": true,\n      \"isFinalistGold\": true,\n      \"isFinalist\": true,\n      \"knockOutStatus\": {\n        \"Duis_d\": 43507978.55920035,\n        \"minim_3\": \"consequat id\"\n      },\n      \"hasLostknockOut\": true,\n      \"completed\": 97293815,\n      \"wins\": 56910266,\n      \"losses\": -10546426,\n      \"technicalPointsFor\": -72693089,\n      \"technicalPointsAgainst\": -63056126,\n      \"technicalPointsDiff\": -43118241,\n      \"rankingPointsFor\": -77413704,\n      \"rankingPointsAgainst\": -34151726,\n      \"rankingPointsDiff\": -50040149,\n      \"winsEasy\": 63326384,\n      \"winsSuperiority\": -93794502,\n      \"rank\": -56694182,\n      \"rankRobinGroup\": -72930823,\n      \"fightByOpponent\": {\n        \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n      },\n      \"isCompeting\": false,\n      \"hasOpenFight\": true,\n      \"isDisqualified\": true,\n      \"isNotRanked\": true,\n      \"isInjured\": true,\n      \"isForfeit\": true,\n      \"isRobinGroupNotRanked\": true,\n      \"accreditationStatus\": -11712315,\n      \"id\": \"cupidatat voluptate dolore et\",\n      \"sportEventWeightCategory\": \"ex laborum\",\n      \"weight\": 131,\n      \"drawNumber\": 113,\n      \"seedNumber\": 3,\n      \"fighterWeight\": \"aliquip Excepteur occaecat fugiat sed\",\n      \"points\": 193,\n      \"fighterStatus\": 19964569\n    },\n    {\n      \"athleteId\": \"dolor dolore cupidatat\",\n      \"sportEventWeightCategoryId\": \"eiusmod\",\n      \"weightCategoryFullName\": \"sed dolore\",\n      \"weightCategoryShortName\": \"eu dolor esse\",\n      \"weightCategoryCountFights\": -16532250,\n      \"hasWeightCategoryBlockchainIds\": false,\n      \"weightCategoryCountReadyFighters\": -73683826,\n      \"countFights\": -86622511,\n      \"personId\": \"dolore aliquip minim ut\",\n      \"fullName\": \"est\",\n      \"preferedName\": \"consectetur mollit anim irure\",\n      \"displayName\": \"pariatur in anim amet ut\",\n      \"givenName\": \"\",\n      \"familyName\": \"eiusmod cillum Excepteur in\",\n      \"personPhoto\": \"elit adipisicing in non irure\",\n      \"athenaPrintId\": \"elit reprehenderit cillum nisi minim\",\n      \"teamAlternateName\": \"culpa\",\n      \"teamName\": \"aliqua\",\n      \"teamCountryFlag\": \"ipsum in commodo\",\n      \"sportEventTeamId\": \"pariatur\",\n      \"sportEventId\": \"proident Duis fugiat\",\n      \"drawRank\": 49512457,\n      \"robinGroup\": {\n        \"do_8\": 67363177.49309322,\n        \"cillum_a\": \"consectetur aute\",\n        \"suntf02\": \"minim nisi aliquip\",\n        \"est_dce\": \"cupidatat laborum labore aliqua\"\n      },\n      \"robinGroupRank\": 82437053,\n      \"teamRankingPoint\": -95475802,\n      \"uwwPoint\": 29950855,\n      \"isFinalistBronze\": false,\n      \"isFinalistGold\": false,\n      \"isFinalist\": true,\n      \"knockOutStatus\": {\n        \"deserunt_5d1\": true,\n        \"do7e\": \"eu fugiat consectetur in\"\n      },\n      \"hasLostknockOut\": false,\n      \"completed\": 14411080,\n      \"wins\": 72475515,\n      \"losses\": 73611246,\n      \"technicalPointsFor\": -45066125,\n      \"technicalPointsAgainst\": -10922544,\n      \"technicalPointsDiff\": 81615257,\n      \"rankingPointsFor\": -86796864,\n      \"rankingPointsAgainst\": 90477359,\n      \"rankingPointsDiff\": -99010920,\n      \"winsEasy\": -39089520,\n      \"winsSuperiority\": -15529146,\n      \"rank\": 29259506,\n      \"rankRobinGroup\": -58142170,\n      \"fightByOpponent\": {\n        \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n      },\n      \"isCompeting\": true,\n      \"hasOpenFight\": false,\n      \"isDisqualified\": true,\n      \"isNotRanked\": true,\n      \"isInjured\": true,\n      \"isForfeit\": false,\n      \"isRobinGroupNotRanked\": true,\n      \"accreditationStatus\": -45103409,\n      \"id\": \"adipisicing deserunt irure ut\",\n      \"sportEventWeightCategory\": \"adipisicing cillum sunt ea mollit\",\n      \"weight\": 187,\n      \"drawNumber\": 231,\n      \"seedNumber\": 23,\n      \"fighterWeight\": \"cillum mollit dolor\",\n      \"points\": 66,\n      \"fighterStatus\": 2410320\n    }\n  ],\n  \"team2Fighters\": [\n    {\n      \"athleteId\": \"adipisicing labore minim\",\n      \"sportEventWeightCategoryId\": \"qui sunt Lorem ad\",\n      \"weightCategoryFullName\": \"cupidatat officia Excepteur\",\n      \"weightCategoryShortName\": \"nulla sit\",\n      \"weightCategoryCountFights\": -8868977,\n      \"hasWeightCategoryBlockchainIds\": false,\n      \"weightCategoryCountReadyFighters\": 61984690,\n      \"countFights\": -88522990,\n      \"personId\": \"amet enim pariatur\",\n      \"fullName\": \"a\",\n      \"preferedName\": \"sit laborum tempor\",\n      \"displayName\": \"esse quis\",\n      \"givenName\": \"Excepteur officia dolor\",\n      \"familyName\": \"exercitation officia in labore\",\n      \"personPhoto\": \"non elit\",\n      \"athenaPrintId\": \"esse\",\n      \"teamAlternateName\": \"officia\",\n      \"teamName\": \"aliquip deserunt nulla\",\n      \"teamCountryFlag\": \"id reprehenderit et tempor\",\n      \"sportEventTeamId\": \"dolore\",\n      \"sportEventId\": \"minim veniam\",\n      \"drawRank\": -33901030,\n      \"robinGroup\": {\n        \"mollit95a\": false,\n        \"Excepteurf4_\": -20170587.791455746,\n        \"aliquip714\": \"sint minim reprehenderit\",\n        \"aute139\": 4273014\n      },\n      \"robinGroupRank\": 23919903,\n      \"teamRankingPoint\": -28775613,\n      \"uwwPoint\": -1934287,\n      \"isFinalistBronze\": false,\n      \"isFinalistGold\": false,\n      \"isFinalist\": true,\n      \"knockOutStatus\": {\n        \"in_3bf\": false,\n        \"euce8\": -49594263\n      },\n      \"hasLostknockOut\": false,\n      \"completed\": -27240275,\n      \"wins\": 26575073,\n      \"losses\": -67833227,\n      \"technicalPointsFor\": 5000945,\n      \"technicalPointsAgainst\": 76005077,\n      \"technicalPointsDiff\": 85020673,\n      \"rankingPointsFor\": 92920752,\n      \"rankingPointsAgainst\": 11973416,\n      \"rankingPointsDiff\": 30186831,\n      \"winsEasy\": -87218705,\n      \"winsSuperiority\": 81860397,\n      \"rank\": -69052897,\n      \"rankRobinGroup\": -85811797,\n      \"fightByOpponent\": {\n        \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n      },\n      \"isCompeting\": false,\n      \"hasOpenFight\": false,\n      \"isDisqualified\": false,\n      \"isNotRanked\": true,\n      \"isInjured\": true,\n      \"isForfeit\": true,\n      \"isRobinGroupNotRanked\": true,\n      \"accreditationStatus\": 38436096,\n      \"id\": \"do ut\",\n      \"sportEventWeightCategory\": \"veniam aliquip\",\n      \"weight\": 158,\n      \"drawNumber\": 21,\n      \"seedNumber\": 2,\n      \"fighterWeight\": \"dolore\",\n      \"points\": 455,\n      \"fighterStatus\": 55215617\n    },\n    {\n      \"athleteId\": \"in laborum\",\n      \"sportEventWeightCategoryId\": \"ipsum\",\n      \"weightCategoryFullName\": \"in esse exercitation aute\",\n      \"weightCategoryShortName\": \"commodo et do tempor\",\n      \"weightCategoryCountFights\": 4805171,\n      \"hasWeightCategoryBlockchainIds\": true,\n      \"weightCategoryCountReadyFighters\": 53667803,\n      \"countFights\": 88803724,\n      \"personId\": \"veniam sit\",\n      \"fullName\": \"dolore\",\n      \"preferedName\": \"do sint officia lab\",\n      \"displayName\": \"reprehenderit do nostrud Lorem\",\n      \"givenName\": \"velit nisi ut\",\n      \"familyName\": \"dolore pariatur mollit\",\n      \"personPhoto\": \"labore aliqua do Excepteur\",\n      \"athenaPrintId\": \"fugiat\",\n      \"teamAlternateName\": \"reprehenderit aliqua Duis\",\n      \"teamName\": \"mollit sit\",\n      \"teamCountryFlag\": \"in ex sit\",\n      \"sportEventTeamId\": \"magna adipisicing\",\n      \"sportEventId\": \"cupidatat laboris pariatur in\",\n      \"drawRank\": -34883743,\n      \"robinGroup\": {\n        \"irure_c23\": \"officia laboris consequat sunt id\"\n      },\n      \"robinGroupRank\": -80310368,\n      \"teamRankingPoint\": 36661839,\n      \"uwwPoint\": -82468335,\n      \"isFinalistBronze\": true,\n      \"isFinalistGold\": false,\n      \"isFinalist\": true,\n      \"knockOutStatus\": {\n        \"eu_e_b\": -21730156\n      },\n      \"hasLostknockOut\": true,\n      \"completed\": 67046525,\n      \"wins\": -42120728,\n      \"losses\": -77249867,\n      \"technicalPointsFor\": -83357748,\n      \"technicalPointsAgainst\": 76601528,\n      \"technicalPointsDiff\": 50243804,\n      \"rankingPointsFor\": -92387644,\n      \"rankingPointsAgainst\": 14899151,\n      \"rankingPointsDiff\": -29060156,\n      \"winsEasy\": 15577098,\n      \"winsSuperiority\": 49302887,\n      \"rank\": -94640149,\n      \"rankRobinGroup\": -23721417,\n      \"fightByOpponent\": {\n        \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n      },\n      \"isCompeting\": true,\n      \"hasOpenFight\": false,\n      \"isDisqualified\": false,\n      \"isNotRanked\": false,\n      \"isInjured\": false,\n      \"isForfeit\": false,\n      \"isRobinGroupNotRanked\": true,\n      \"accreditationStatus\": -67728547,\n      \"id\": \"fugiat sint nisi ut minim\",\n      \"sportEventWeightCategory\": \"dolor sed sit\",\n      \"weight\": 6,\n      \"drawNumber\": 49,\n      \"seedNumber\": 12,\n      \"fighterWeight\": \"ut\",\n      \"points\": 294,\n      \"fighterStatus\": -57756034\n    }\n  ],\n  \"rankingPointNiceName\": \"eu Excepteur cillum\",\n  \"resultText\": \"consectetur id ea est cillum\",\n  \"resultTextSmall\": \"aliquip nostrud veniam do\",\n  \"roundRenamedSmall\": \"elit est Ut nisi\",\n  \"parentFightNumber1\": 20093383,\n  \"parentFightNumber2\": 93967280,\n  \"fightRefereesWithRole\": [\n    {\n      \"refereeId\": \"ut sit dolor\",\n      \"fightId\": \"esse\",\n      \"refereeRole\": \"Ut ali\",\n      \"refereeFullName\": \"elit magna Ut sit\",\n      \"refereeDisplayName\": \"l\",\n      \"refereeNumber\": -5013535,\n      \"refereeTeamAlternateName\": \"amet\",\n      \"refereeCountryFlag\": \"proident aliquip ullamco et\",\n      \"refereeFull\": \"velit cillum\",\n      \"id\": \"sit cillum aliqua\"\n    },\n    {\n      \"refereeId\": \"voluptate\",\n      \"fightId\": \"eiusmod fugiat occaecat dolore\",\n      \"refereeRole\": \"occaecat sit\",\n      \"refereeFullName\": \"velit aliqua incididunt magna\",\n      \"refereeDisplayName\": \"Ut dolor pariatur et\",\n      \"refereeNumber\": 58644030,\n      \"refereeTeamAlternateName\": \"dolor\",\n      \"refereeCountryFlag\": \"pariatur sint officia fugiat culpa\",\n      \"refereeFull\": \"ex proident\",\n      \"id\": \"aliquip sint sed sunt\"\n    }\n  ],\n  \"needsRefresh\": false,\n  \"isCountdown\": true,\n  \"branding\": \"cillum mollit\",\n  \"id\": \"fugiat nisi\",\n  \"parentFight1Id\": \"ad reprehenderit id\",\n  \"parentFight2Id\": \"veniam ali\",\n  \"fighter1\": \"in Ut aliqua\",\n  \"fighter1RankingPoint\": 6779,\n  \"fighter2\": \"cupidatat sunt sint\",\n  \"fighter2RankingPoint\": 5228,\n  \"refereeGroup\": \"u\",\n  \"sportEventTeam1Id\": \"laboris adipisicing quis fugiat\",\n  \"sportEventTeam2Id\": \"dolore adipisicing id magna\",\n  \"fightMatId\": \"consequat Lorem\",\n  \"round\": \"aliquip amet sit\",\n  \"qualifying\": true,\n  \"teamFightId\": \"nulla in consectetur\",\n  \"status\": -79139202,\n  \"rankingCheck\": false,\n  \"technicalCheck\": false,\n  \"weight\": -4887123,\n  \"fightNumber\": 9373,\n  \"roundWeight\": 3836,\n  \"repechageWeight\": 1959,\n  \"repechageSection\": 2171,\n  \"displayOrder\": 9652,\n  \"canceled\": \"1986-09-09T03:37:54.599Z\",\n  \"fightReferees\": [\n    {\n      \"refereeId\": \"adipisicing minim ad\",\n      \"fightId\": \"minim consequat nulla\",\n      \"refereeRole\": \"do adipisicing repre\",\n      \"refereeFullName\": \"aute in Duis eiusmod\",\n      \"refereeDisplayName\": \"dolore ut in\",\n      \"refereeNumber\": 70370269,\n      \"refereeTeamAlternateName\": \"exercitation irure nisi\",\n      \"refereeCountryFlag\": \"consectetur exercitation\",\n      \"refereeFull\": \"eu ut est quis\",\n      \"id\": \"Ut ut laborum nulla\"\n    },\n    {\n      \"refereeId\": \"anim amet enim in reprehenderit\",\n      \"fightId\": \"ut\",\n      \"refereeRole\": \"\",\n      \"refereeFullName\": \"ea elit quis\",\n      \"refereeDisplayName\": \"in n\",\n      \"refereeNumber\": 91858875,\n      \"refereeTeamAlternateName\": \"anim elit\",\n      \"refereeCountryFlag\": \"mollit ipsum anim sint tempor\",\n      \"refereeFull\": \"exercitation Duis Lorem ut\",\n      \"id\": \"nu\"\n    }\n  ],\n  \"odfCode\": \"con\",\n  \"refereeComment\": \"commodo adipisicing dolor id sint\",\n  \"uploaderFight\": {\n    \"dolore_c50\": 69127781,\n    \"ullamco_c2c\": true\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/:odfCompetitionCode/get/:odfWrestler1/:odfWrestler2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"odf",
														":odfCompetitionCode",
														"get",
														":odfWrestler1",
														":odfWrestler2"
													],
													"variable": [
														{
															"key": "odfCompetitionCode",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "odfWrestler1",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "odfWrestler2",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/:odfCompetitionCode/get/:odfWrestler1/:odfWrestler2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"odf",
														":odfCompetitionCode",
														"get",
														":odfWrestler1",
														":odfWrestler2"
													],
													"variable": [
														{
															"key": "odfCompetitionCode",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "odfWrestler1",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "odfWrestler2",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "{sportEventId}",
							"item": [
								{
									"name": "reorder",
									"item": [
										{
											"name": "Reorder fights on a given fightMat",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/individual/fight-mat/:fightMatId?position=enim&fightId=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"reorder",
														"individual",
														"fight-mat",
														":fightMatId"
													],
													"query": [
														{
															"key": "position",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "fightMatId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns fights",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/individual/fight-mat/:fightMatId?position=enim&fightId=enim",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"reorder",
																"individual",
																"fight-mat",
																":fightMatId"
															],
															"query": [
																{
																	"key": "position",
																	"value": "enim"
																},
																{
																	"key": "fightId",
																	"value": "enim"
																}
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "fightMatId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": {}\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/individual/fight-mat/:fightMatId?position=enim&fightId=enim",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"reorder",
																"individual",
																"fight-mat",
																":fightMatId"
															],
															"query": [
																{
																	"key": "position",
																	"value": "enim"
																},
																{
																	"key": "fightId",
																	"value": "enim"
																}
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "fightMatId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/individual/fight-mat/:fightMatId?position=enim&fightId=enim",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"reorder",
																"individual",
																"fight-mat",
																":fightMatId"
															],
															"query": [
																{
																	"key": "position",
																	"value": "enim"
																},
																{
																	"key": "fightId",
																	"value": "enim"
																}
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "fightMatId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Reorder Team fights on a given fightMat",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/fight-mat/:fightMatId?teamFightIds=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"reorder",
														"fight-mat",
														":fightMatId"
													],
													"query": [
														{
															"key": "teamFightIds",
															"value": "enim",
															"description": "(Required) "
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "fightMatId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns fights",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/fight-mat/:fightMatId?teamFightIds=enim",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"reorder",
																"fight-mat",
																":fightMatId"
															],
															"query": [
																{
																	"key": "teamFightIds",
																	"value": "enim"
																}
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "fightMatId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": {}\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/fight-mat/:fightMatId?teamFightIds=enim",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"reorder",
																"fight-mat",
																":fightMatId"
															],
															"query": [
																{
																	"key": "teamFightIds",
																	"value": "enim"
																}
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "fightMatId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/fight-mat/:fightMatId?teamFightIds=enim",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"reorder",
																"fight-mat",
																":fightMatId"
															],
															"query": [
																{
																	"key": "teamFightIds",
																	"value": "enim"
																}
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "fightMatId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Reorder fights on a given mat",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/mat/:matId/:newFightMatId?teamFightIds=enim&teamFightId=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"reorder",
														"mat",
														":matId",
														":newFightMatId"
													],
													"query": [
														{
															"key": "teamFightIds",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "teamFightId",
															"value": "enim",
															"description": "(Required) "
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "matId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "newFightMatId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns fights",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/mat/:matId/:newFightMatId?teamFightIds=enim&teamFightId=enim",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"reorder",
																"mat",
																":matId",
																":newFightMatId"
															],
															"query": [
																{
																	"key": "teamFightIds",
																	"value": "enim"
																},
																{
																	"key": "teamFightId",
																	"value": "enim"
																}
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "matId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "newFightMatId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": {}\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/mat/:matId/:newFightMatId?teamFightIds=enim&teamFightId=enim",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"reorder",
																"mat",
																":matId",
																":newFightMatId"
															],
															"query": [
																{
																	"key": "teamFightIds",
																	"value": "enim"
																},
																{
																	"key": "teamFightId",
																	"value": "enim"
																}
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "matId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "newFightMatId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/mat/:matId/:newFightMatId?teamFightIds=enim&teamFightId=enim",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"reorder",
																"mat",
																":matId",
																":newFightMatId"
															],
															"query": [
																{
																	"key": "teamFightIds",
																	"value": "enim"
																},
																{
																	"key": "teamFightId",
																	"value": "enim"
																}
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "matId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "newFightMatId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "print",
									"item": [
										{
											"name": "Print qualifying results",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/qualifying-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"print",
														"qualifying-results"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/qualifying-results",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"print",
																"qualifying-results"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/qualifying-results",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"print",
																"qualifying-results"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Fight not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/qualifying-results",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"print",
																"qualifying-results"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Print finals results",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/finals-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"print",
														"finals-results"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/finals-results",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"print",
																"finals-results"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/finals-results",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"print",
																"finals-results"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Fight not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/finals-results",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"print",
																"finals-results"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Print complete results",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/complete-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"print",
														"complete-results"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/complete-results",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"print",
																"complete-results"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/complete-results",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"print",
																"complete-results"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Fight not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/complete-results",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																":sportEventId",
																"print",
																"complete-results"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get fights",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fights",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fights\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a fight",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dummy\": \"tempor non qui minim\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dummy\": \"tempor non qui minim\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dummy\": \"tempor non qui minim\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dummy\": \"tempor non qui minim\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dummy\": \"tempor non qui minim\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get fights",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/:status?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												":status"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "status",
													"value": "5616897",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fights",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/:status?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														":status"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "status",
															"value": "5616897",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fights\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/:status?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														":status"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "status",
															"value": "5616897",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/:status?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														":status"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "status",
															"value": "5616897",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get fights order by Bracket",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/bracket/:sportEventWeightCategoryId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"bracket",
												":sportEventWeightCategoryId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "sportEventWeightCategoryId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fights",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/bracket/:sportEventWeightCategoryId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"bracket",
														":sportEventWeightCategoryId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fights\": {},\n  \"qualifPairs\": \"sint Excepteur veniam adipisicing of\",\n  \"repechages\": {},\n  \"nbRepechageRoundsTop\": -42679421,\n  \"nbRepechageRoundsBottom\": 15469130\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/bracket/:sportEventWeightCategoryId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"bracket",
														":sportEventWeightCategoryId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get repechage fights",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/repechage/:sportEventWeightCategoryId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"repechage",
												":sportEventWeightCategoryId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "sportEventWeightCategoryId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fights",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/repechage/:sportEventWeightCategoryId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"repechage",
														":sportEventWeightCategoryId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fights\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/repechage/:sportEventWeightCategoryId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"repechage",
														":sportEventWeightCategoryId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/repechage/:sportEventWeightCategoryId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"repechage",
														":sportEventWeightCategoryId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Clear scoresheet printed flag on fights",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"enim reprehenderit\",\n  \"laboris quis aliqua\"\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/global-confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"global-confirm"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Count of updated fights",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"a\",\n  \"elit nulla\"\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/global-confirm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"global-confirm"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"count\": 79762230\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"a\",\n  \"elit nulla\"\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/global-confirm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"global-confirm"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"a\",\n  \"elit nulla\"\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/global-confirm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"global-confirm"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Generate fights",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sportEventSessionId\": [\n    \"sed labore\",\n    \"dolore aliquip cupidatat Ut\"\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/generate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"generate"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Count of generated fights",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sportEventSessionId\": [\n    \"conseq\",\n    \"Ut dolore cillum exercitation\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/generate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"generate"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"countFights\": 98476516\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sportEventSessionId\": [\n    \"conseq\",\n    \"Ut dolore cillum exercitation\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/generate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"generate"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sportEventSessionId\": [\n    \"conseq\",\n    \"Ut dolore cillum exercitation\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/generate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"generate"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get fights that don't have a mat yet",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/empty-mat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"empty-mat"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fights",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/empty-mat",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"empty-mat"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fights\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/empty-mat",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"empty-mat"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/empty-mat",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"empty-mat"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get fights completed",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/completed",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"completed"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fights",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/completed",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"completed"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fights\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/completed",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"completed"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/completed",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"completed"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get fights scheduled",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/scheduled",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"scheduled"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fights",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/scheduled",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"scheduled"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fights\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/scheduled",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"scheduled"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/scheduled",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"scheduled"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update fightNumbers",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/fight-numbers-update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"fight-numbers-update"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns number of fights updated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/fight-numbers-update",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"fight-numbers-update"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"countFights\": 98476516\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/fight-numbers-update",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"fight-numbers-update"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/fight-numbers-update",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"fight-numbers-update"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get fights",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/quick",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"quick"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a fight",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/quick",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"quick"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fight\": {\n    \"id\": \"Excepteur in aute ut\",\n    \"teamFightId\": \"occaecat et reprehenderit ut\",\n    \"status\": 5019493,\n    \"weight\": 9536133,\n    \"fightNumber\": 662,\n    \"odfCode\": \"nisi reprehenderit minim commodo\"\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/quick",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"quick"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fight not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/quick",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"quick"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get fights by opened sessions",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/opened-session",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"opened-session"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/opened-session",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"opened-session"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"tabSessions\": [\n    \"mollit Duis adipisicing Excepteur\",\n    \"elit officia adipisicing ullamco dolore\"\n  ]\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/opened-session",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"opened-session"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fight not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/opened-session",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"opened-session"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get results web-formatted",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/complete-results/text?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"complete-results",
												"text"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fights",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/complete-results/text?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"complete-results",
														"text"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fights\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/complete-results/text?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"complete-results",
														"text"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fight not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/complete-results/text?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"complete-results",
														"text"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get the latest results of an event",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/latest-results?limit=8575981",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"latest-results"
											],
											"query": [
												{
													"key": "limit",
													"value": "8575981",
													"description": "(Required) Number of fights to return (default = 3)"
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a fight",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/latest-results?limit=8575981",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"latest-results"
													],
													"query": [
														{
															"key": "limit",
															"value": "8575981"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fighter1Id\": \"occaecat Excepteur tempor ad\",\n  \"fighter2Id\": \"nulla cupidatat\",\n  \"fighter2AthenaId\": 52471502,\n  \"team1Name\": \"dolore et ad sit\",\n  \"team1AlternateName\": \"in id\",\n  \"team1FullName\": \"sint id sed\",\n  \"team1PoolName\": \"exercitation sed\",\n  \"team2Name\": \"Lorem ut est consequat nisi\",\n  \"team2AlternateName\": \"anim\",\n  \"team2FullName\": \"qui dolor mollit\",\n  \"team2PoolName\": \"ut aliquip irure\",\n  \"roundFriendlyName\": \"deserunt\",\n  \"displayOrderInRound\": 52184789,\n  \"athlete1Color\": \"veniam amet exercitation laborum eu\",\n  \"athlete2Color\": \"reprehenderit pariatur\",\n  \"athlete1TextColor\": \"sint in\",\n  \"athlete2TextColor\": \"irure aute\",\n  \"matName\": \"reprehenderit\",\n  \"technicalPoints\": {\n    \"sunt8a9\": false,\n    \"adipisicing6\": \"nostrud\",\n    \"aliquip42\": \"enim exercitation mollit\"\n  },\n  \"technicalPointsDetail\": {\n    \"aliquip5\": -52986041.9161015,\n    \"nulla_3e\": true,\n    \"in42\": -80645306\n  },\n  \"technicalPointsTagStatus\": \"do\",\n  \"cautionsList\": {\n    \"sunt_a\": true,\n    \"sit_2\": \"veniam adipisicing\"\n  },\n  \"winnerFighter\": \"dolor esse ut\",\n  \"winnerTeam\": \"exercitation ut Duis culpa Lorem\",\n  \"winnerTeamAlternateName\": \"anim id\",\n  \"weightCategoryName\": \"esse eiusmod aliquip ex adipisicing\",\n  \"weightCategoryAlternateName\": \"cupidatat\",\n  \"weightCategoryShortName\": \"officia consequat\",\n  \"weightCategoryMaxWeight\": 93674002,\n  \"weightCategoryColor\": \"dolor incididunt anim\",\n  \"weightCategoryCompleted\": false,\n  \"audienceName\": \"enim culpa voluptate\",\n  \"audienceShortName\": \"pariatur nulla aliqua\",\n  \"sportName\": \"Excepteur nostrud ea sint\",\n  \"fighter1FullName\": \"aliqua\",\n  \"fighter1DisplayName\": \"nostrud n\",\n  \"fighter1FamilyName\": \"quis cons\",\n  \"fighter1GivenName\": \"eiusmod ad\",\n  \"fighter1PreferedName\": \"aliqua eiusmod incididunt moll\",\n  \"fighter1PersonId\": \"dolore consectetur\",\n  \"fighter1AthenaId\": 50104873,\n  \"fighter1Weight\": 30375228.483022586,\n  \"fighter2FullName\": \"aute est enim ullamco ad\",\n  \"fighter2DisplayName\": \"in sint cupida\",\n  \"fighter2FamilyName\": \"aliquip ex dolor magna\",\n  \"fighter2GivenName\": \"do reprehenderit ipsum consequat sunt\",\n  \"fighter2PreferedName\": \"est\",\n  \"fighter2PersonId\": \"mollit et laborum\",\n  \"fighter2Weight\": 88641054.74453089,\n  \"victoryType\": \"nulla\",\n  \"endTime\": -63819603,\n  \"expectedStartDate\": \"2014-07-22T18:00:12.196Z\",\n  \"rankingPointNiceName\": \"cupidatat eiusmod\",\n  \"resultText\": \"veniam quis minim\",\n  \"resultTextSmall\": \"magna pr\",\n  \"parentFightNumber1\": -56581639,\n  \"parentFightNumber2\": -65940926,\n  \"branding\": \"qui\",\n  \"id\": \"dolore\",\n  \"fighter1RankingPoint\": 1550,\n  \"fighter2RankingPoint\": 2659,\n  \"refereeGroup\": \"i\",\n  \"sportEventTeam1Id\": \"ipsum eu sunt\",\n  \"sportEventTeam2Id\": \"dolore pariatur\",\n  \"round\": \"consequat aute cillum\",\n  \"qualifying\": true,\n  \"teamFightId\": \"Lorem\",\n  \"status\": -94964485,\n  \"weight\": 88285520,\n  \"fightNumber\": 6424,\n  \"canceled\": \"2019-12-26T01:51:38.287Z\",\n  \"odfCode\": \"ut\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/latest-results?limit=8575981",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"latest-results"
													],
													"query": [
														{
															"key": "limit",
															"value": "8575981"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fight not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/latest-results?limit=8575981",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"latest-results"
													],
													"query": [
														{
															"key": "limit",
															"value": "8575981"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get not already completed fights by mat",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/open/:sportEventMatId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										"open",
										":sportEventMatId"
									],
									"variable": [
										{
											"key": "sportEventMatId",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns fights",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/open/:sportEventMatId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"open",
												":sportEventMatId"
											],
											"variable": [
												{
													"key": "sportEventMatId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"fights\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/open/:sportEventMatId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"open",
												":sportEventMatId"
											],
											"variable": [
												{
													"key": "sportEventMatId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/open/:sportEventMatId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"open",
												":sportEventMatId"
											],
											"variable": [
												{
													"key": "sportEventMatId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get not already completed fights order by mat",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/all-open/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										"all-open",
										":sportEventId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns fights",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/all-open/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"all-open",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"fights\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/all-open/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"all-open",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/all-open/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"all-open",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "fighter",
					"item": [
						{
							"name": "{athleteId}",
							"item": [
								{
									"name": "Get fighters",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":athleteId"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												}
											],
											"variable": [
												{
													"key": "athleteId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fighters",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														":athleteId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "athleteId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fighters\": {\n    \"athleteId\": \"ullamco est dolor aute laborum\",\n    \"sportEventWeightCategoryId\": \"proident velit\",\n    \"weightCategoryFullName\": \"eiusmod dolore\",\n    \"weightCategoryShortName\": \"proident Ut eiusmod consectetur\",\n    \"weightCategoryCountFights\": -90420044,\n    \"hasWeightCategoryBlockchainIds\": true,\n    \"personId\": \"ut veniam ipsum\",\n    \"fullName\": \"id quis consectetur\",\n    \"displayName\": \"id deserunt\",\n    \"givenName\": \"cupidatat eu nulla adipisicing\",\n    \"familyName\": \"ex non\",\n    \"personPhoto\": \"magna ut\",\n    \"athenaPrintId\": \"in cillum\",\n    \"teamAlternateName\": \"sunt magna\",\n    \"teamName\": \"do laborum qui sint\",\n    \"teamCountryFlag\": \"mollit eu\",\n    \"sportEventTeamId\": \"proident in\",\n    \"drawRank\": -96927368,\n    \"robinGroup\": {\n      \"pariatur4__\": \"Lorem commodo \",\n      \"proident5c3\": -26670671.288457632,\n      \"cillum_8\": 22441447.90286824\n    },\n    \"robinGroupRank\": 21459777,\n    \"isFinalistBronze\": false,\n    \"isFinalistGold\": true,\n    \"isFinalist\": true,\n    \"knockOutStatus\": {\n      \"auteb\": -61519852.58231183\n    },\n    \"hasLostknockOut\": true,\n    \"rank\": -95764086,\n    \"isCompeting\": false,\n    \"hasOpenFight\": false,\n    \"isDisqualified\": true,\n    \"isNotRanked\": false,\n    \"accreditationStatus\": 72692318,\n    \"id\": \"ullamco esse eu ipsum sint\",\n    \"drawNumber\": 133,\n    \"seedNumber\": 17,\n    \"fighterWeight\": \"esse Duis eu in\",\n    \"fighterStatus\": -96179702\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														":athleteId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "athleteId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fighter not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														":athleteId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "athleteId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a fighter",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sportEventWeightCategory\": \"aute voluptate\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":athleteId"
											],
											"variable": [
												{
													"key": "athleteId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														":athleteId"
													],
													"variable": [
														{
															"key": "athleteId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														":athleteId"
													],
													"variable": [
														{
															"key": "athleteId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														":athleteId"
													],
													"variable": [
														{
															"key": "athleteId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														":athleteId"
													],
													"variable": [
														{
															"key": "athleteId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get a fighter by AthleteId and SportEventWeightCategoryId",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId/weight/:sportEventWeightCategoryId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":athleteId",
												"weight",
												":sportEventWeightCategoryId"
											],
											"variable": [
												{
													"key": "athleteId",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "sportEventWeightCategoryId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a fighter",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId/weight/:sportEventWeightCategoryId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														":athleteId",
														"weight",
														":sportEventWeightCategoryId"
													],
													"variable": [
														{
															"key": "athleteId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"athleteId\": \"dolore est aliqua\",\n  \"sportEventWeightCategoryId\": \"incididunt Excepteur consectetur sunt\",\n  \"weightCategoryFullName\": \"aliquip ad\",\n  \"weightCategoryShortName\": \"in voluptate\",\n  \"weightCategoryCountFights\": 63566441,\n  \"hasWeightCategoryBlockchainIds\": false,\n  \"weightCategoryCountReadyFighters\": 76233383,\n  \"countFights\": -47027901,\n  \"personId\": \"nostrud\",\n  \"fullName\": \"reprehenderit et veniam occaecat officia\",\n  \"preferedName\": \"enim commodo\",\n  \"displayName\": \"sint\",\n  \"givenName\": \"culpa sit Lorem\",\n  \"familyName\": \"dolore\",\n  \"personPhoto\": \"consequat aliquip\",\n  \"athenaPrintId\": \"Ut do\",\n  \"teamAlternateName\": \"id sint\",\n  \"teamName\": \"esse officia\",\n  \"teamCountryFlag\": \"anim Ut ad\",\n  \"sportEventTeamId\": \"aute mollit nost\",\n  \"sportEventId\": \"tempor ipsum voluptate laboris aute\",\n  \"drawRank\": -19664990,\n  \"robinGroup\": {\n    \"id00f\": 42962341.22642097,\n    \"aliquip_1e7\": \"esse est dolore ea\"\n  },\n  \"robinGroupRank\": -65365352,\n  \"teamRankingPoint\": 8635847,\n  \"uwwPoint\": 52366647,\n  \"isFinalistBronze\": true,\n  \"isFinalistGold\": false,\n  \"isFinalist\": true,\n  \"knockOutStatus\": {\n    \"consequat_d1\": \"dolore reprehenderit\"\n  },\n  \"hasLostknockOut\": false,\n  \"completed\": -97052915,\n  \"wins\": -36650163,\n  \"losses\": 49814796,\n  \"technicalPointsFor\": 60368921,\n  \"technicalPointsAgainst\": -77631883,\n  \"technicalPointsDiff\": 50089905,\n  \"rankingPointsFor\": 31022223,\n  \"rankingPointsAgainst\": 83978655,\n  \"rankingPointsDiff\": -25359894,\n  \"winsEasy\": 80734285,\n  \"winsSuperiority\": -51201201,\n  \"rank\": -92391139,\n  \"rankRobinGroup\": 19750731,\n  \"fightByOpponent\": {\n    \"sportEventId\": \"Ut ex\",\n    \"sportEventWeightCategoryId\": \"est in culpa cupidatat\",\n    \"fighter1Id\": \"consequat\",\n    \"fighter2Id\": \"cill\",\n    \"fighter2AthenaId\": 97915318,\n    \"team1Name\": \"in occaecat reprehenderit commodo ad\",\n    \"team1AlternateName\": \"deserunt\",\n    \"team1FullName\": \"amet\",\n    \"team1CountryFlag\": \"cillum pariatur ex\",\n    \"team1CountryFlagScoreboard\": \"id commodo quis in\",\n    \"team1CountryFlagMobile\": \"sint nostrud reprehenderit enim\",\n    \"team1PoolName\": \"commodo aute al\",\n    \"team1FightByOpponent\": {\n      \"tempor_6\": 91385251.21639907,\n      \"consectetur_e\": 81140947,\n      \"sint7a\": \"consectetu\"\n    },\n    \"team2Name\": \"anim in esse\",\n    \"team2AlternateName\": \"officia occaecat Lorem sed\",\n    \"team2FullName\": \"dolor aute commodo\",\n    \"team2CountryFlag\": \"id Excepteu\",\n    \"team2CountryFlagScoreboard\": \"ut irure\",\n    \"team2CountryFlagMobile\": \"dolore minim tempor occaecat irure\",\n    \"team2PoolName\": \"labore elit\",\n    \"team2FightByOpponent\": {\n      \"aliqua_9_\": true,\n      \"esse8\": \"culpa minim\"\n    },\n    \"roundFriendlyName\": \"exercitation Lorem pariatur laborum\",\n    \"displayOrderInRound\": -43952091,\n    \"round1Id\": \"labore reprehenderit est commodo amet\",\n    \"round2Id\": \"cupidatat elit quis reprehender\",\n    \"countReferees\": -70993189,\n    \"sportId\": \"sit adipisicing in\",\n    \"athlete1Color\": \"eiusmod aliqua\",\n    \"athlete2Color\": \"Ut \",\n    \"athlete1TextColor\": \"ea occaecat\",\n    \"athlete2TextColor\": \"in cillum ex culpa\",\n    \"matName\": \"in veniam quis\",\n    \"sessionId\": \"quis aliquip\",\n    \"sessionName\": \"est esse laboris\",\n    \"sessionStartDate\": \"2022-02-19T08:06:07.962Z\",\n    \"technicalPoints\": {\n      \"officia3e1\": true,\n      \"dolore177\": false,\n      \"nostrud02\": 50795319.20536572,\n      \"aute8\": \"in cupidatat mollit esse\"\n    },\n    \"technicalPointsDetail\": {\n      \"amet_d24\": 41380579,\n      \"ut_30c\": \"incididunt in occaecat ut aute\"\n    },\n    \"technicalPointsTagStatus\": \"nulla velit cupidatat ullamco labore\",\n    \"technicalPointIds\": {\n      \"laborisd18\": \"aute dolor\",\n      \"voluptatef0\": 20522278\n    },\n    \"cautionsList\": {\n      \"nulla0\": \"quis id anim culpa proident\"\n    },\n    \"isCompleted\": false,\n    \"isReady\": false,\n    \"isRobinGroupFight\": false,\n    \"winnerFighter\": \"cupidatat\",\n    \"winnerTeam\": \"fugiat aliquip do\",\n    \"winnerTeamAlternateName\": \"enim dolor\",\n    \"sportEventName\": \"ex ut anim\",\n    \"sportEventStartDate\": \"1965-07-19T19:45:21.811Z\",\n    \"sportEventLogo\": \"pariatur ipsum u\",\n    \"rankingPoint\": {\n      \"fightId\": \"aute\",\n      \"victoryType\": \"magna proident cillum\",\n      \"fighterId\": \"elit magna\",\n      \"fighterFullName\": \"si\",\n      \"victoryTypeId\": \"Ut in\",\n      \"victoryTypeName\": \"occaecat sed\",\n      \"victoryTypeNiceName\": \"dolore\",\n      \"sportId\": \"Ut incididunt\",\n      \"sportEventId\": \"officia deserunt qui\",\n      \"id\": \"voluptate Duis eiusmod\",\n      \"fighter\": \"nostrud dolo\",\n      \"second\": 54121\n    },\n    \"completedDate\": \"1961-12-04T04:00:23.260Z\",\n    \"roundsNumber\": 91760134,\n    \"roundDuration\": -17070802,\n    \"sportAlternateName\": \"proident sed irure do\",\n    \"weightCategoryName\": \"in\",\n    \"weightCategoryAlternateName\": \"sit ullamco\",\n    \"weightCategoryShortName\": \"veniam sunt sed\",\n    \"weightCategoryMaxWeight\": -58760304,\n    \"weightCategoryFullName\": \"aliquip culpa quis anim\",\n    \"isWeightCategoryVisible\": true,\n    \"weightCategoryAverageDuration\": -25240252,\n    \"weightCategoryColor\": \"aliqua eu in\",\n    \"weightCategoryReady\": false,\n    \"weightCategoryStarted\": true,\n    \"weightCategoryCompleted\": false,\n    \"victoryTypes\": {\n      \"dolor2\": 79849439.56947294,\n      \"velit_d3\": -63152447.820819944\n    },\n    \"victoryTypesArray\": {\n      \"incididunt_c46\": 93767603.13286066\n    },\n    \"audienceId\": \"aute\",\n    \"audienceName\": \"Ut in\",\n    \"audienceShortName\": \"nostrud aliqua\",\n    \"sportName\": \"enim irure amet\",\n    \"injuryTime\": 78537759,\n    \"warnings\": true,\n    \"cautions\": 11434481,\n    \"legFouls\": 57759105,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"proident mollit\",\n    \"fighter1DisplayName\": \"officia do reprehenderi\",\n    \"fighter1FamilyName\": \"consectetur enim irure Ut aliqua\",\n    \"fighter1GivenName\": \"enim labore c\",\n    \"fighter1PreferedName\": \"eu amet\",\n    \"fighter1DrawRank\": \"Ut incididunt aliquip\",\n    \"fighter1RobinRank\": \"eu dolore commodo et\",\n    \"fighter1SeedNumber\": -52464554,\n    \"fighter1AthleteId\": \"et proident\",\n    \"fighter1PersonId\": \"in labore aute\",\n    \"fighter1AthenaId\": -48468532,\n    \"fighter1IsSeeded\": true,\n    \"fighter1Status\": -59887502,\n    \"fighter1IsInjured\": false,\n    \"fighter1Weight\": 92052784.34180245,\n    \"fighter2FullName\": \"et labore est nisi\",\n    \"fighter2DisplayName\": \"nisi in\",\n    \"fighter2FamilyName\": \"aliqua proident veniam\",\n    \"fighter2GivenName\": \"tempor Excepteur nostrud enim mollit\",\n    \"fighter2PreferedName\": \"proiden\",\n    \"fighter2DrawRank\": 55244075,\n    \"fighter2RobinRank\": -87544647,\n    \"fighter2SeedNumber\": 55205715,\n    \"fighter2AthleteId\": \"sunt minim laborum adipisicing\",\n    \"fighter2PersonId\": \"do in \",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": 18488413,\n    \"fighter2IsInjured\": false,\n    \"fighter2Weight\": -69883340.04068002,\n    \"result\": \"labore\",\n    \"victoryType\": \"occaecat magna\",\n    \"endTime\": 45201879,\n    \"endDate\": \"1998-04-25T01:33:22.539Z\",\n    \"expectedDateStart\": \"1967-07-03T21:36:17.725Z\",\n    \"expectedStartDate\": \"1950-06-24T21:36:53.411Z\",\n    \"team1Fighters\": [\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n      },\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n      }\n    ],\n    \"team2Fighters\": [\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n      },\n      {\n        \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n      }\n    ],\n    \"rankingPointNiceName\": \"sunt officia amet irure Ut\",\n    \"resultText\": \"nostrud exercitation\",\n    \"resultTextSmall\": \"ea consequat sit in exercitation\",\n    \"roundRenamedSmall\": \"amet occaecat enim nostrud\",\n    \"parentFightNumber1\": -32066895,\n    \"parentFightNumber2\": -30137674,\n    \"fightRefereesWithRole\": [\n      {\n        \"refereeId\": \"reprehenderit ea dolor id\",\n        \"fightId\": \"est proident sit\",\n        \"refereeRole\": \"dolore Duis aliqua Ut exercitation\",\n        \"refereeFullName\": \"ullamco\",\n        \"refereeDisplayName\": \"in dolor in\",\n        \"refereeNumber\": -23764599,\n        \"refereeTeamAlternateName\": \"Excepteur in\",\n        \"refereeCountryFlag\": \"labore consequat sint\",\n        \"refereeFull\": \"dolore anim officia\",\n        \"id\": \"id aliquip Lorem incididunt\"\n      },\n      {\n        \"refereeId\": \"adipisicing occaecat reprehenderit\",\n        \"fightId\": \"irure\",\n        \"refereeRole\": \"consequat cupidatat elit\",\n        \"refereeFullName\": \"sunt dolore qui veniam\",\n        \"refereeDisplayName\": \"adipisicing reprehenderit\",\n        \"refereeNumber\": -65714430,\n        \"refereeTeamAlternateName\": \"velit qui sed\",\n        \"refereeCountryFlag\": \"fugiat\",\n        \"refereeFull\": \"occaecat\",\n        \"id\": \"pariatur quis eu eiusmod enim\"\n      }\n    ],\n    \"needsRefresh\": true,\n    \"isCountdown\": false,\n    \"branding\": \"elit deserunt eiusmod\",\n    \"id\": \"esse nisi cupidatat\",\n    \"parentFight1Id\": \"esse sit\",\n    \"parentFight2Id\": \"consequat ea\",\n    \"fighter1\": \"nostrud nulla reprehenderit dolor\",\n    \"fighter1RankingPoint\": 9047,\n    \"fighter2\": \"nulla reprehenderit ut\",\n    \"fighter2RankingPoint\": 8760,\n    \"refereeGroup\": \"v\",\n    \"sportEventTeam1Id\": \"dolor pariatur consectetur\",\n    \"sportEventTeam2Id\": \"nulla amet\",\n    \"fightMatId\": \"offi\",\n    \"round\": \"nostrud adipisicing voluptate\",\n    \"qualifying\": false,\n    \"teamFightId\": \"ea aute nostrud sit\",\n    \"status\": 53097222,\n    \"rankingCheck\": false,\n    \"technicalCheck\": true,\n    \"weight\": -71391691,\n    \"fightNumber\": 758,\n    \"roundWeight\": 7549,\n    \"repechageWeight\": 4358,\n    \"repechageSection\": 3146,\n    \"displayOrder\": 1648,\n    \"canceled\": \"1983-04-12T10:40:35.876Z\",\n    \"fightReferees\": [\n      {\n        \"refereeId\": \"sunt laboris magna\",\n        \"fightId\": \"ex eu enim ad commodo\",\n        \"refereeRole\": \"amet Ut sit\",\n        \"refereeFullName\": \"ut proident magna Lorem\",\n        \"refereeDisplayName\": \"do\",\n        \"refereeNumber\": 64775341,\n        \"refereeTeamAlternateName\": \"id in\",\n        \"refereeCountryFlag\": \"cupidatat nostrud in laborum aute\",\n        \"refereeFull\": \"voluptate\",\n        \"id\": \"sed laboris deserunt nostrud\"\n      },\n      {\n        \"refereeId\": \"dolore ad\",\n        \"fightId\": \"ex incididunt velit fugiat\",\n        \"refereeRole\": \"proident est incididunt ipsum\",\n        \"refereeFullName\": \"irure aute aliqua\",\n        \"refereeDisplayName\": \"r\",\n        \"refereeNumber\": -9622830,\n        \"refereeTeamAlternateName\": \"culpa ut commodo sint\",\n        \"refereeCountryFlag\": \"Lorem dolore nostrud consectetur fugiat\",\n        \"refereeFull\": \"ut reprehenderit eu magna ea\",\n        \"id\": \"aliqua ex ut nulla\"\n      }\n    ],\n    \"odfCode\": \"exercitation ex id\",\n    \"refereeComment\": \"sunt\",\n    \"uploaderFight\": {\n      \"incididunt_75\": 41612495.03493899,\n      \"iruree9\": true\n    }\n  },\n  \"isCompeting\": false,\n  \"hasOpenFight\": false,\n  \"isDisqualified\": true,\n  \"isNotRanked\": true,\n  \"isInjured\": true,\n  \"isForfeit\": true,\n  \"isRobinGroupNotRanked\": true,\n  \"accreditationStatus\": 20888449,\n  \"id\": \"non qui in\",\n  \"sportEventWeightCategory\": \"anim ullamco nostrud\",\n  \"weight\": 130,\n  \"drawNumber\": 232,\n  \"seedNumber\": 23,\n  \"fighterWeight\": \"tempor cupidatat\",\n  \"points\": 423,\n  \"fighterStatus\": 66557329\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId/weight/:sportEventWeightCategoryId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														":athleteId",
														"weight",
														":sportEventWeightCategoryId"
													],
													"variable": [
														{
															"key": "athleteId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId/weight/:sportEventWeightCategoryId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														":athleteId",
														"weight",
														":sportEventWeightCategoryId"
													],
													"variable": [
														{
															"key": "athleteId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "draw",
											"item": [
												{
													"name": "Update a fighter draw (POST METHOD)",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"drawNumber\": 45449616,\n  \"seedNumber\": 63594439,\n  \"fighterWeight\": 56984757\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id",
																"draw"
															],
															"query": [
																{
																	"key": "bracket",
																	"value": "true",
																	"description": "Return with a redirect to LiveBracket"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Returned when successful",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"drawNumber\": 45449616,\n  \"seedNumber\": 63594439,\n  \"fighterWeight\": 56984757\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fighter",
																		"get",
																		":id",
																		"draw"
																	],
																	"query": [
																		{
																			"key": "bracket",
																			"value": "true"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when invalid parameters are submitted",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"drawNumber\": 45449616,\n  \"seedNumber\": 63594439,\n  \"fighterWeight\": 56984757\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fighter",
																		"get",
																		":id",
																		"draw"
																	],
																	"query": [
																		{
																			"key": "bracket",
																			"value": "true"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"drawNumber\": 45449616,\n  \"seedNumber\": 63594439,\n  \"fighterWeight\": 56984757\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fighter",
																		"get",
																		":id",
																		"draw"
																	],
																	"query": [
																		{
																			"key": "bracket",
																			"value": "true"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"drawNumber\": 45449616,\n  \"seedNumber\": 63594439,\n  \"fighterWeight\": 56984757\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fighter",
																		"get",
																		":id",
																		"draw"
																	],
																	"query": [
																		{
																			"key": "bracket",
																			"value": "true"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Update a fighter draw",
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"drawNumber\": 88,\n  \"seedNumber\": 14,\n  \"fighterWeight\": \"irure amet\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id",
																"draw"
															],
															"query": [
																{
																	"key": "bracket",
																	"value": "true",
																	"description": "Return with a redirect to LiveBracket"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Returned when successful",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"drawNumber\": 88,\n  \"seedNumber\": 14,\n  \"fighterWeight\": \"irure amet\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fighter",
																		"get",
																		":id",
																		"draw"
																	],
																	"query": [
																		{
																			"key": "bracket",
																			"value": "true"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when invalid parameters are submitted",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"drawNumber\": 88,\n  \"seedNumber\": 14,\n  \"fighterWeight\": \"irure amet\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fighter",
																		"get",
																		":id",
																		"draw"
																	],
																	"query": [
																		{
																			"key": "bracket",
																			"value": "true"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"drawNumber\": 88,\n  \"seedNumber\": 14,\n  \"fighterWeight\": \"irure amet\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fighter",
																		"get",
																		":id",
																		"draw"
																	],
																	"query": [
																		{
																			"key": "bracket",
																			"value": "true"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"drawNumber\": 88,\n  \"seedNumber\": 14,\n  \"fighterWeight\": \"irure amet\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"fighter",
																		"get",
																		":id",
																		"draw"
																	],
																	"query": [
																		{
																			"key": "bracket",
																			"value": "true"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "/api/{{_format}}/fighter/get/:id",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns a fighter",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"fighter\": {\n    \"athleteId\": \"laborum nulla culpa proident\",\n    \"sportEventWeightCategoryId\": \"incididunt reprehenderit labore\",\n    \"weightCategoryFullName\": \"occaecat nisi sit cillum\",\n    \"weightCategoryShortName\": \"al\",\n    \"weightCategoryCountFights\": 61631817,\n    \"hasWeightCategoryBlockchainIds\": true,\n    \"weightCategoryCountReadyFighters\": -42327578,\n    \"countFights\": 6712609,\n    \"personId\": \"laboris elit\",\n    \"fullName\": \"dolore ut minim Lorem\",\n    \"preferedName\": \"velit adipisicing in et dolore\",\n    \"displayName\": \"proident adipisicing cillum eu fugiat\",\n    \"givenName\": \"adipisicing occaecat\",\n    \"familyName\": \"do ea\",\n    \"personPhoto\": \"nulla dolore ut nisi occaecat\",\n    \"athenaPrintId\": \"aliquip esse sunt est\",\n    \"teamAlternateName\": \"dolor do eu enim reprehenderit\",\n    \"teamName\": \"adipisicing Lorem Duis\",\n    \"teamCountryFlag\": \"veniam adipisicing aliqua ea\",\n    \"sportEventTeamId\": \"Excepteur reprehenderit dolore officia\",\n    \"sportEventId\": \"est\",\n    \"drawRank\": -25654433,\n    \"robinGroup\": {\n      \"sunt_55c\": -71441585.61804721,\n      \"pariatur_1f_\": -33054937.113511197,\n      \"eiusmodfe8\": \"aliqua sunt\"\n    },\n    \"robinGroupRank\": -69006970,\n    \"teamRankingPoint\": 18492680,\n    \"uwwPoint\": 57311613,\n    \"isFinalistBronze\": true,\n    \"isFinalistGold\": true,\n    \"isFinalist\": false,\n    \"knockOutStatus\": {\n      \"commodo_36\": \"dolore in et veniam\"\n    },\n    \"hasLostknockOut\": false,\n    \"completed\": 59852302,\n    \"wins\": -14068849,\n    \"losses\": 43524869,\n    \"technicalPointsFor\": -48499575,\n    \"technicalPointsAgainst\": 16827781,\n    \"technicalPointsDiff\": -82066976,\n    \"rankingPointsFor\": 23351667,\n    \"rankingPointsAgainst\": 63284732,\n    \"rankingPointsDiff\": 13572813,\n    \"winsEasy\": -40860571,\n    \"winsSuperiority\": 36495521,\n    \"rank\": -39180635,\n    \"rankRobinGroup\": 70359980,\n    \"fightByOpponent\": {\n      \"sportEventId\": \"ullamco amet cupidatat\",\n      \"sportEventWeightCategoryId\": \"v\",\n      \"fighter1Id\": \"qui eu\",\n      \"fighter2Id\": \"deserunt voluptate cillum ipsum mollit\",\n      \"fighter2AthenaId\": -77595447,\n      \"team1Name\": \"dolore anim ullamco nisi\",\n      \"team1AlternateName\": \"culpa sed\",\n      \"team1FullName\": \"officia et nostrud\",\n      \"team1CountryFlag\": \"et anim est \",\n      \"team1CountryFlagScoreboard\": \"labore eiusmod\",\n      \"team1CountryFlagMobile\": \"sunt culpa\",\n      \"team1PoolName\": \"ipsum qui nulla et\",\n      \"team1FightByOpponent\": {\n        \"laboris__\": false,\n        \"fugiat9\": \"ea in nostrud proident\"\n      },\n      \"team2Name\": \"quis minim cillum labore\",\n      \"team2AlternateName\": \"do\",\n      \"team2FullName\": \"laboris dolor do culpa laborum\",\n      \"team2CountryFlag\": \"in velit dolor dolor\",\n      \"team2CountryFlagScoreboard\": \"Duis in\",\n      \"team2CountryFlagMobile\": \"veniam Ut in\",\n      \"team2PoolName\": \"in ani\",\n      \"team2FightByOpponent\": {\n        \"eu_89e\": false,\n        \"ex0\": 12984559.046811089,\n        \"ut7\": \"ullamco amet dolore tempor aliquip\"\n      },\n      \"roundFriendlyName\": \"exercitation id\",\n      \"displayOrderInRound\": -46706392,\n      \"round1Id\": \"Lorem\",\n      \"round2Id\": \"qui ut\",\n      \"countReferees\": -43210618,\n      \"sportId\": \"amet laboris\",\n      \"athlete1Color\": \"eiusmod in est dolore ut\",\n      \"athlete2Color\": \"deserunt\",\n      \"athlete1TextColor\": \"tempor mollit ut ullamco\",\n      \"athlete2TextColor\": \"quis aute labore est\",\n      \"matName\": \"non sunt minim\",\n      \"sessionId\": \"reprehenderit in\",\n      \"sessionName\": \"ipsum ut officia\",\n      \"sessionStartDate\": \"2012-11-16T01:49:26.125Z\",\n      \"technicalPoints\": {\n        \"laborum_a6\": 73944353,\n        \"ullamco43\": true\n      },\n      \"technicalPointsDetail\": {\n        \"et_1\": \"tempor nulla quis aliqua nisi\",\n        \"consectetur19b\": 96723911.23178247,\n        \"enim__\": -23080769,\n        \"id__3\": \"dolor sint commodo occaecat cupidatat\"\n      },\n      \"technicalPointsTagStatus\": \"laboris ad esse proident\",\n      \"technicalPointIds\": {\n        \"est_e\": true\n      },\n      \"cautionsList\": {\n        \"quis5e0\": false\n      },\n      \"isCompleted\": false,\n      \"isReady\": false,\n      \"isRobinGroupFight\": true,\n      \"winnerFighter\": \"ex aute\",\n      \"winnerTeam\": \"laborum sed fugiat pariatur\",\n      \"winnerTeamAlternateName\": \"sunt\",\n      \"sportEventName\": \"id incididunt nisi mollit laborum\",\n      \"sportEventStartDate\": \"1991-10-11T16:02:57.902Z\",\n      \"sportEventLogo\": \"non et consectetur\",\n      \"rankingPoint\": {\n        \"fightId\": \"velit dolore culpa\",\n        \"victoryType\": \"non officia\",\n        \"fighterId\": \"minim est nisi consequat proident\",\n        \"fighterFullName\": \"adipisicing Duis Lorem et\",\n        \"victoryTypeId\": \"amet\",\n        \"victoryTypeName\": \"consectetur sunt est aliquip nisi\",\n        \"victoryTypeNiceName\": \"culpa in nostrud cupidatat\",\n        \"sportId\": \"quis nisi aliqua qui\",\n        \"sportEventId\": \"ipsum sit irure ad\",\n        \"id\": \"dolor in\",\n        \"fighter\": \"laboris ut sit esse deseru\",\n        \"second\": 1079\n      },\n      \"completedDate\": \"1982-08-17T05:56:32.749Z\",\n      \"roundsNumber\": -85902648,\n      \"roundDuration\": 90537340,\n      \"sportAlternateName\": \"elit est sint\",\n      \"weightCategoryName\": \"labore dolore\",\n      \"weightCategoryAlternateName\": \"ullamc\",\n      \"weightCategoryShortName\": \"ut\",\n      \"weightCategoryMaxWeight\": 62915871,\n      \"weightCategoryFullName\": \"deserunt\",\n      \"isWeightCategoryVisible\": false,\n      \"weightCategoryAverageDuration\": -48640007,\n      \"weightCategoryColor\": \"ut anim\",\n      \"weightCategoryReady\": false,\n      \"weightCategoryStarted\": false,\n      \"weightCategoryCompleted\": false,\n      \"victoryTypes\": {\n        \"non_69_\": -43778792.39331457\n      },\n      \"victoryTypesArray\": {\n        \"exercitationda8\": true\n      },\n      \"audienceId\": \"nisi in proident\",\n      \"audienceName\": \"officia consectetur sed nulla\",\n      \"audienceShortName\": \"Duis ut cillum\",\n      \"sportName\": \"dolore consequat fugiat laboris\",\n      \"injuryTime\": -72314126,\n      \"warnings\": true,\n      \"cautions\": 38518428,\n      \"legFouls\": -9377080,\n      \"activityTime\": true,\n      \"fighter1FullName\": \"magna do\",\n      \"fighter1DisplayName\": \"deserunt ullamco d\",\n      \"fighter1FamilyName\": \"dolore non\",\n      \"fighter1GivenName\": \"esse aute\",\n      \"fighter1PreferedName\": \"adipisicing exer\",\n      \"fighter1DrawRank\": \"reprehenderit exercitation cillum officia\",\n      \"fighter1RobinRank\": \"Excepteur qui nisi\",\n      \"fighter1SeedNumber\": -34517008,\n      \"fighter1AthleteId\": \"enim adipisicing eu aliqua do\",\n      \"fighter1PersonId\": \"deserunt dolore\",\n      \"fighter1AthenaId\": -97025099,\n      \"fighter1IsSeeded\": false,\n      \"fighter1Status\": -72850056,\n      \"fighter1IsInjured\": false,\n      \"fighter1Weight\": -98577238.85581793,\n      \"fighter2FullName\": \"aute mollit anim Duis\",\n      \"fighter2DisplayName\": \"cillum nu\",\n      \"fighter2FamilyName\": \"exercitation laboris\",\n      \"fighter2GivenName\": \"reprehenderit occaecat sit ullamco\",\n      \"fighter2PreferedName\": \"elit consequat sed\",\n      \"fighter2DrawRank\": 52112092,\n      \"fighter2RobinRank\": 5178627,\n      \"fighter2SeedNumber\": 97901138,\n      \"fighter2AthleteId\": \"Excepteur reprehenderit ea\",\n      \"fighter2PersonId\": \"cupidatat\",\n      \"fighter2IsSeeded\": false,\n      \"fighter2Status\": 80135401,\n      \"fighter2IsInjured\": false,\n      \"fighter2Weight\": 82356023.96291709,\n      \"result\": \"deserunt nisi\",\n      \"victoryType\": \"reprehenderit minim\",\n      \"endTime\": 18111705,\n      \"endDate\": \"1965-12-19T00:46:52.806Z\",\n      \"expectedDateStart\": \"1953-12-07T21:14:08.260Z\",\n      \"expectedStartDate\": \"2011-11-12T03:24:36.454Z\",\n      \"team1Fighters\": [\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n        },\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n        }\n      ],\n      \"team2Fighters\": [\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n        },\n        {\n          \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n        }\n      ],\n      \"rankingPointNiceName\": \"voluptate\",\n      \"resultText\": \"sit anim ut\",\n      \"resultTextSmall\": \"eu mollit nostrud\",\n      \"roundRenamedSmall\": \"ipsum enim sit\",\n      \"parentFightNumber1\": 76653324,\n      \"parentFightNumber2\": -30659612,\n      \"fightRefereesWithRole\": [\n        {\n          \"refereeId\": \"in\",\n          \"fightId\": \"voluptate exercitation par\",\n          \"refereeRole\": \"irure ut deserunt eiusmod\",\n          \"refereeFullName\": \"voluptate\",\n          \"refereeDisplayName\": \"aliquip sit v\",\n          \"refereeNumber\": 72212721,\n          \"refereeTeamAlternateName\": \"sint ea anim\",\n          \"refereeCountryFlag\": \"nisi ut\",\n          \"refereeFull\": \"dolore occaecat ex nulla aute\",\n          \"id\": \"dolore nulla minim\"\n        },\n        {\n          \"refereeId\": \"elit in\",\n          \"fightId\": \"au\",\n          \"refereeRole\": \"velit Duis pariatur\",\n          \"refereeFullName\": \"et in consectetur tempor fugiat\",\n          \"refereeDisplayName\": \"in in\",\n          \"refereeNumber\": -69371389,\n          \"refereeTeamAlternateName\": \"qui sunt sit\",\n          \"refereeCountryFlag\": \"in non est fugiat occaecat\",\n          \"refereeFull\": \"cupidatat minim in c\",\n          \"id\": \"nostrud voluptate Duis\"\n        }\n      ],\n      \"needsRefresh\": false,\n      \"isCountdown\": false,\n      \"branding\": \"nulla reprehenderit esse\",\n      \"id\": \"ad culpa \",\n      \"parentFight1Id\": \"dolor Lorem\",\n      \"parentFight2Id\": \"fugiat laborum do\",\n      \"fighter1\": \"veniam ad occaecat do\",\n      \"fighter1RankingPoint\": 2401,\n      \"fighter2\": \"mollit voluptate fugiat\",\n      \"fighter2RankingPoint\": 8675,\n      \"refereeGroup\": \"i\",\n      \"sportEventTeam1Id\": \"irure ipsum labore\",\n      \"sportEventTeam2Id\": \"occaecat ut eu adipisicing\",\n      \"fightMatId\": \"nisi\",\n      \"round\": \"in do proident\",\n      \"qualifying\": false,\n      \"teamFightId\": \"amet non sint proident\",\n      \"status\": -79957707,\n      \"rankingCheck\": false,\n      \"technicalCheck\": false,\n      \"weight\": 39414146,\n      \"fightNumber\": 7965,\n      \"roundWeight\": 9805,\n      \"repechageWeight\": 7355,\n      \"repechageSection\": 5892,\n      \"displayOrder\": 3541,\n      \"canceled\": \"1984-03-31T04:50:33.228Z\",\n      \"fightReferees\": [\n        {\n          \"refereeId\": \"exercitation proident magna\",\n          \"fightId\": \"dolor tempor consequat sunt officia\",\n          \"refereeRole\": \"sit est consectetur mollit minim\",\n          \"refereeFullName\": \"veniam Duis aute nostrud in\",\n          \"refereeDisplayName\": \"sed labore\",\n          \"refereeNumber\": -89397105,\n          \"refereeTeamAlternateName\": \"sed tempor laborum exercitation\",\n          \"refereeCountryFlag\": \"do aute sit\",\n          \"refereeFull\": \"officia occaecat\",\n          \"id\": \"ad occa\"\n        },\n        {\n          \"refereeId\": \"pa\",\n          \"fightId\": \"nulla elit cillum\",\n          \"refereeRole\": \"irure occaecat laborum\",\n          \"refereeFullName\": \"Excepteur laborum commodo cillum\",\n          \"refereeDisplayName\": \"in cillum adipisicing\",\n          \"refereeNumber\": 54481310,\n          \"refereeTeamAlternateName\": \"sunt ullamco eiusmod ad\",\n          \"refereeCountryFlag\": \"laborum\",\n          \"refereeFull\": \"mollit\",\n          \"id\": \"sed in\"\n        }\n      ],\n      \"odfCode\": \"q\",\n      \"refereeComment\": \"dolore Ut incididunt minim\",\n      \"uploaderFight\": {\n        \"cillum_43\": 94981306.23202968\n      }\n    },\n    \"isCompeting\": false,\n    \"hasOpenFight\": true,\n    \"isDisqualified\": true,\n    \"isNotRanked\": true,\n    \"isInjured\": false,\n    \"isForfeit\": true,\n    \"isRobinGroupNotRanked\": true,\n    \"accreditationStatus\": 68157431,\n    \"id\": \"dolore ut irure pariatur\",\n    \"sportEventWeightCategory\": \"elit dolore\",\n    \"weight\": 359,\n    \"drawNumber\": 197,\n    \"seedNumber\": 18,\n    \"fighterWeight\": \"ea voluptate Ut\",\n    \"points\": 301,\n    \"fighterStatus\": 92697875\n  }\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Fighter not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update a fighter",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sportEventWeightCategory\": \"aute voluptate\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when invalid parameters are submitted",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete a fighter",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Clear a fighter draw",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:fighter/draw/clear?bracket=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												"get",
												":fighter",
												"draw",
												"clear"
											],
											"query": [
												{
													"key": "bracket",
													"value": "true",
													"description": "Return with a redirect to LiveBracket"
												}
											],
											"variable": [
												{
													"key": "fighter",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:fighter/draw/clear?bracket=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":fighter",
														"draw",
														"clear"
													],
													"query": [
														{
															"key": "bracket",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "fighter",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"id magna ea\",\n  \"success\": \"labore velit\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:fighter/draw/clear?bracket=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":fighter",
														"draw",
														"clear"
													],
													"query": [
														{
															"key": "bracket",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "fighter",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:fighter/draw/clear?bracket=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":fighter",
														"draw",
														"clear"
													],
													"query": [
														{
															"key": "bracket",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "fighter",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get fighters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/?filters=enim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "enim",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns fighters",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"fighters\": {\n    \"athleteId\": \"ullamco est dolor aute laborum\",\n    \"sportEventWeightCategoryId\": \"proident velit\",\n    \"weightCategoryFullName\": \"eiusmod dolore\",\n    \"weightCategoryShortName\": \"proident Ut eiusmod consectetur\",\n    \"weightCategoryCountFights\": -90420044,\n    \"hasWeightCategoryBlockchainIds\": true,\n    \"personId\": \"ut veniam ipsum\",\n    \"fullName\": \"id quis consectetur\",\n    \"displayName\": \"id deserunt\",\n    \"givenName\": \"cupidatat eu nulla adipisicing\",\n    \"familyName\": \"ex non\",\n    \"personPhoto\": \"magna ut\",\n    \"athenaPrintId\": \"in cillum\",\n    \"teamAlternateName\": \"sunt magna\",\n    \"teamName\": \"do laborum qui sint\",\n    \"teamCountryFlag\": \"mollit eu\",\n    \"sportEventTeamId\": \"proident in\",\n    \"drawRank\": -96927368,\n    \"robinGroup\": {\n      \"pariatur4__\": \"Lorem commodo \",\n      \"proident5c3\": -26670671.288457632,\n      \"cillum_8\": 22441447.90286824\n    },\n    \"robinGroupRank\": 21459777,\n    \"isFinalistBronze\": false,\n    \"isFinalistGold\": true,\n    \"isFinalist\": true,\n    \"knockOutStatus\": {\n      \"auteb\": -61519852.58231183\n    },\n    \"hasLostknockOut\": true,\n    \"rank\": -95764086,\n    \"isCompeting\": false,\n    \"hasOpenFight\": false,\n    \"isDisqualified\": true,\n    \"isNotRanked\": false,\n    \"accreditationStatus\": 72692318,\n    \"id\": \"ullamco esse eu ipsum sint\",\n    \"drawNumber\": 133,\n    \"seedNumber\": 17,\n    \"fighterWeight\": \"esse Duis eu in\",\n    \"fighterStatus\": -96179702\n  }\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Fighter not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List all fighters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/list?filters=enim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										"list"
									],
									"query": [
										{
											"key": "filters",
											"value": "enim",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns fighters",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/list?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												"list"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"fighters\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/list?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												"list"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a fighter's qualification status",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/:id/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										":id",
										"status"
									],
									"variable": [
										{
											"key": "id",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:id/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":id",
												"status"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:id/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":id",
												"status"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:id/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":id",
												"status"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:id/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":id",
												"status"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create a new fighter via quick form",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"personId\": \"ad ut\",\n  \"sportEventTeamId\": \"Excepteur\",\n  \"sportEventWeightCategory\": \"nisi cupidatat et sunt\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/:sportEventId/quick",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										":sportEventId",
										"quick"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personId\": \"ad ut\",\n  \"sportEventTeamId\": \"Excepteur\",\n  \"sportEventWeightCategory\": \"nisi cupidatat et sunt\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:sportEventId/quick",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":sportEventId",
												"quick"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personId\": \"ad ut\",\n  \"sportEventTeamId\": \"Excepteur\",\n  \"sportEventWeightCategory\": \"nisi cupidatat et sunt\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:sportEventId/quick",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":sportEventId",
												"quick"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personId\": \"ad ut\",\n  \"sportEventTeamId\": \"Excepteur\",\n  \"sportEventWeightCategory\": \"nisi cupidatat et sunt\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:sportEventId/quick",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":sportEventId",
												"quick"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personId\": \"ad ut\",\n  \"sportEventTeamId\": \"Excepteur\",\n  \"sportEventWeightCategory\": \"nisi cupidatat et sunt\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:sportEventId/quick",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":sportEventId",
												"quick"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "fight-mat",
					"item": [
						{
							"name": "{sportEventSessionId}",
							"item": [
								{
									"name": "Get fight mats",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSessionId"
											],
											"variable": [
												{
													"key": "sportEventSessionId",
													"value": "48ddd328-94ea-59d9-f0b5-f7f9a9efdbad",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fightMats",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														":sportEventSessionId"
													],
													"variable": [
														{
															"key": "sportEventSessionId",
															"value": "48ddd328-94ea-59d9-f0b5-f7f9a9efdbad",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fightMats\": {},\n  \"sportEventId\": \"anim Lorem\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														":sportEventSessionId"
													],
													"variable": [
														{
															"key": "sportEventSessionId",
															"value": "48ddd328-94ea-59d9-f0b5-f7f9a9efdbad",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														":sportEventSessionId"
													],
													"variable": [
														{
															"key": "sportEventSessionId",
															"value": "48ddd328-94ea-59d9-f0b5-f7f9a9efdbad",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a fight mat",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sportEventMatId\": \"enim ut pariatur veniam aliqua\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSessionId"
											],
											"variable": [
												{
													"key": "sportEventSessionId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														":sportEventSessionId"
													],
													"variable": [
														{
															"key": "sportEventSessionId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														":sportEventSessionId"
													],
													"variable": [
														{
															"key": "sportEventSessionId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														":sportEventSessionId"
													],
													"variable": [
														{
															"key": "sportEventSessionId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														":sportEventSessionId"
													],
													"variable": [
														{
															"key": "sportEventSessionId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get fight mats (faster - no fights)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId/list?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSessionId",
												"list"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												}
											],
											"variable": [
												{
													"key": "sportEventSessionId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fightMats",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId/list?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														":sportEventSessionId",
														"list"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventSessionId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fightMats\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId/list?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														":sportEventSessionId",
														"list"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventSessionId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId/list?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														":sportEventSessionId",
														"list"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventSessionId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "Get a fight mat",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a fightMat",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"matName\": \"nulla\",\n  \"sessionName\": \"deserunt ut\",\n  \"sessionStartDate\": \"1972-08-26T07:36:14.718Z\",\n  \"sessionEndDate\": \"2018-09-30T21:55:54.931Z\",\n  \"countSessionFightMats\": -20520868,\n  \"sportEventId\": \"in eu aliquip\",\n  \"matStreaming\": \"in tempor Duis irure\",\n  \"id\": \"enim dolor Ut culpa\",\n  \"sportEventSessionId\": \"in nulla et\",\n  \"sportEventMatId\": \"est occaecat irure\",\n  \"fights\": [\n    {\n      \"sportEventId\": \"nisi in laborum\",\n      \"sportEventWeightCategoryId\": \"et\",\n      \"fighter1Id\": \"adipisicing nisi\",\n      \"fighter2Id\": \"sint\",\n      \"fighter2AthenaId\": -71409100,\n      \"team1Name\": \"aliquip exercitation ex\",\n      \"team1AlternateName\": \"quis\",\n      \"team1FullName\": \"dolore\",\n      \"team1CountryFlag\": \"ex nulla laboris\",\n      \"team1CountryFlagScoreboard\": \"sint laborum occaecat ut\",\n      \"team1CountryFlagMobile\": \"Ut sed eiusmod Duis\",\n      \"team1PoolName\": \"sit veniam dolor voluptate\",\n      \"team1FightByOpponent\": {\n        \"velit_09_\": -59981386\n      },\n      \"team2Name\": \"ea id n\",\n      \"team2AlternateName\": \"incididunt deserunt labore\",\n      \"team2FullName\": \"elit proident\",\n      \"team2CountryFlag\": \"et ut do proident\",\n      \"team2CountryFlagScoreboard\": \"in ipsum sint ex\",\n      \"team2CountryFlagMobile\": \"officia\",\n      \"team2PoolName\": \"sint est sit elit Lorem\",\n      \"team2FightByOpponent\": {\n        \"Lorem28\": 2510227.8482351303,\n        \"nostrud73d\": 51754639\n      },\n      \"roundFriendlyName\": \"dolor laboris elit\",\n      \"displayOrderInRound\": -39336624,\n      \"round1Id\": \"amet\",\n      \"round2Id\": \"cillum laborum\",\n      \"countReferees\": -86902235,\n      \"sportId\": \"Duis Ut\",\n      \"athlete1Color\": \"fugiat adipisicing\",\n      \"athlete2Color\": \"consectetur sed ut\",\n      \"athlete1TextColor\": \"veniam anim incididunt exercitation\",\n      \"athlete2TextColor\": \"ex eu culpa\",\n      \"matName\": \"commodo adipisicing qui deserunt\",\n      \"sessionId\": \"eiusmod irure\",\n      \"sessionName\": \"quis\",\n      \"sessionStartDate\": \"2017-04-05T03:28:49.775Z\",\n      \"technicalPoints\": {\n        \"adipisicing_27\": \"Excepteur officia ex\",\n        \"occaecat__\": \"fugiat occaecat nulla\"\n      },\n      \"technicalPointsDetail\": {\n        \"laboris9f\": \"et id dolore do\"\n      },\n      \"technicalPointsTagStatus\": \"non consequat\",\n      \"technicalPointIds\": {\n        \"irure_\": false,\n        \"quis70\": true,\n        \"eu2\": false,\n        \"occaecat_ddf\": \"in deserunt\",\n        \"cupidatat_a\": -363419.3334709108\n      },\n      \"cautionsList\": {\n        \"adipisicing96\": false,\n        \"minimfa4\": true\n      },\n      \"isCompleted\": false,\n      \"isReady\": false,\n      \"isRobinGroupFight\": true,\n      \"winnerFighter\": \"dolore ut magna\",\n      \"winnerTeam\": \"enim dolor veniam sit\",\n      \"winnerTeamAlternateName\": \"non nos\",\n      \"sportEventName\": \"qui veniam reprehenderit\",\n      \"sportEventStartDate\": \"1975-11-19T22:49:35.903Z\",\n      \"sportEventLogo\": \"cupidatat occaecat\",\n      \"rankingPoint\": {\n        \"fightId\": \"qui eu ea\",\n        \"victoryType\": \"in minim\",\n        \"fighterId\": \"Duis commodo laboris officia\",\n        \"fighterFullName\": \"nostrud anim aute \",\n        \"victoryTypeId\": \"pariatur qui ipsum sint\",\n        \"victoryTypeName\": \"ad Ut proident\",\n        \"victoryTypeNiceName\": \"cupidatat\",\n        \"sportId\": \"anim in tempor mollit\",\n        \"sportEventId\": \"aliqua laborum consectetur aliquip\",\n        \"id\": \"in ipsum sint\",\n        \"fighter\": \"ea ad\",\n        \"second\": 28764\n      },\n      \"completedDate\": \"1983-09-28T07:58:32.532Z\",\n      \"roundsNumber\": -78120750,\n      \"roundDuration\": -61140996,\n      \"sportAlternateName\": \"est non dolor\",\n      \"weightCategoryName\": \"ut voluptate in ea\",\n      \"weightCategoryAlternateName\": \"irure in laboris\",\n      \"weightCategoryShortName\": \"nulla commodo Duis enim\",\n      \"weightCategoryMaxWeight\": -27829088,\n      \"weightCategoryFullName\": \"do et nulla ex\",\n      \"isWeightCategoryVisible\": true,\n      \"weightCategoryAverageDuration\": 78772484,\n      \"weightCategoryColor\": \"velit irure culpa\",\n      \"weightCategoryReady\": false,\n      \"weightCategoryStarted\": false,\n      \"weightCategoryCompleted\": true,\n      \"victoryTypes\": {\n        \"eta95\": false\n      },\n      \"victoryTypesArray\": {\n        \"sunt86\": 39127934,\n        \"eiusmod5af\": -67939331.26210159,\n        \"esse97\": 31408624.728378505\n      },\n      \"audienceId\": \"ex proident veniam\",\n      \"audienceName\": \"\",\n      \"audienceShortName\": \"ut\",\n      \"sportName\": \"do\",\n      \"injuryTime\": -79444540,\n      \"warnings\": true,\n      \"cautions\": 69581837,\n      \"legFouls\": 82921090,\n      \"activityTime\": true,\n      \"fighter1FullName\": \"et fugiat commodo eiusmod\",\n      \"fighter1DisplayName\": \"dolor\",\n      \"fighter1FamilyName\": \"nostrud deserunt do in commodo\",\n      \"fighter1GivenName\": \"cillum in sed\",\n      \"fighter1PreferedName\": \"est veniam in Duis\",\n      \"fighter1DrawRank\": \"aliquip irure sed anim\",\n      \"fighter1RobinRank\": \"pariatur proident\",\n      \"fighter1SeedNumber\": -47943171,\n      \"fighter1AthleteId\": \"laborum in\",\n      \"fighter1PersonId\": \"dolor aliqua nul\",\n      \"fighter1AthenaId\": -480838,\n      \"fighter1IsSeeded\": false,\n      \"fighter1Status\": -95871360,\n      \"fighter1IsInjured\": true,\n      \"fighter1Weight\": 60297304.98203981,\n      \"fighter2FullName\": \"irure non aute\",\n      \"fighter2DisplayName\": \"incididunt labore\",\n      \"fighter2FamilyName\": \"ex\",\n      \"fighter2GivenName\": \"eu esse\",\n      \"fighter2PreferedName\": \"ipsum in dolor\",\n      \"fighter2DrawRank\": -27346965,\n      \"fighter2RobinRank\": -25660895,\n      \"fighter2SeedNumber\": 74442875,\n      \"fighter2AthleteId\": \"elit sed fugiat\",\n      \"fighter2PersonId\": \"deserunt minim laborum\",\n      \"fighter2IsSeeded\": false,\n      \"fighter2Status\": 7612640,\n      \"fighter2IsInjured\": false,\n      \"fighter2Weight\": 81912614.76094827,\n      \"result\": \"quis enim veniam\",\n      \"victoryType\": \"ipsum\",\n      \"endTime\": -68408383,\n      \"endDate\": \"1986-10-24T03:34:16.489Z\",\n      \"expectedDateStart\": \"1959-06-10T11:50:33.369Z\",\n      \"expectedStartDate\": \"2002-10-21T16:21:14.147Z\",\n      \"team1Fighters\": [\n        {\n          \"athleteId\": \"Excepteur reprehenderit nostrud Ut elit\",\n          \"sportEventWeightCategoryId\": \"Duis aliqua ea\",\n          \"weightCategoryFullName\": \"sunt ut labore veniam ips\",\n          \"weightCategoryShortName\": \"consequat nostrud ex\",\n          \"weightCategoryCountFights\": 21772277,\n          \"hasWeightCategoryBlockchainIds\": false,\n          \"weightCategoryCountReadyFighters\": -86659454,\n          \"countFights\": -43684784,\n          \"personId\": \"dolor fugiat cupidatat ullamco occaecat\",\n          \"fullName\": \"Ut veniam\",\n          \"preferedName\": \"in mollit sed Excepteur Ut\",\n          \"displayName\": \"cupidatat occaecat sunt\",\n          \"givenName\": \"culpa aliquip dolore\",\n          \"familyName\": \"voluptate pariatur\",\n          \"personPhoto\": \"ullamco \",\n          \"athenaPrintId\": \"esse ullamco aliqua sint\",\n          \"teamAlternateName\": \"officia sed Duis\",\n          \"teamName\": \"et sunt aliqua Duis\",\n          \"teamCountryFlag\": \"est cillum\",\n          \"sportEventTeamId\": \"proident Duis\",\n          \"sportEventId\": \"et laborum labore\",\n          \"drawRank\": 90557197,\n          \"robinGroup\": {\n            \"esse_a_\": 57695344\n          },\n          \"robinGroupRank\": -98938218,\n          \"teamRankingPoint\": -83473031,\n          \"uwwPoint\": 37475632,\n          \"isFinalistBronze\": false,\n          \"isFinalistGold\": true,\n          \"isFinalist\": false,\n          \"knockOutStatus\": {\n            \"eua04\": \"aliquip laboris veniam\"\n          },\n          \"hasLostknockOut\": true,\n          \"completed\": 24737777,\n          \"wins\": -97643024,\n          \"losses\": 4983634,\n          \"technicalPointsFor\": 76777473,\n          \"technicalPointsAgainst\": -51877887,\n          \"technicalPointsDiff\": -21006732,\n          \"rankingPointsFor\": -91858358,\n          \"rankingPointsAgainst\": 58109886,\n          \"rankingPointsDiff\": 98528947,\n          \"winsEasy\": -50947402,\n          \"winsSuperiority\": 28755351,\n          \"rank\": -89776627,\n          \"rankRobinGroup\": 26780490,\n          \"fightByOpponent\": {\n            \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n          },\n          \"isCompeting\": true,\n          \"hasOpenFight\": false,\n          \"isDisqualified\": true,\n          \"isNotRanked\": true,\n          \"isInjured\": true,\n          \"isForfeit\": false,\n          \"isRobinGroupNotRanked\": false,\n          \"accreditationStatus\": 65923027,\n          \"id\": \"magna commodo labo\",\n          \"sportEventWeightCategory\": \"occaecat eiusmod in proident\",\n          \"weight\": 209,\n          \"drawNumber\": 81,\n          \"seedNumber\": 4,\n          \"fighterWeight\": \"aute veniam proident laborum\",\n          \"points\": 338,\n          \"fighterStatus\": 30206581\n        },\n        {\n          \"athleteId\": \"enim commodo\",\n          \"sportEventWeightCategoryId\": \"sunt\",\n          \"weightCategoryFullName\": \"labore nulla aliquip exercitation\",\n          \"weightCategoryShortName\": \"id sed nisi\",\n          \"weightCategoryCountFights\": 59471773,\n          \"hasWeightCategoryBlockchainIds\": false,\n          \"weightCategoryCountReadyFighters\": -42996793,\n          \"countFights\": -42494233,\n          \"personId\": \"exercitation commodo et anim\",\n          \"fullName\": \"pariatur ullamco enim off\",\n          \"preferedName\": \"mollit l\",\n          \"displayName\": \"culpa consequat labore incididunt\",\n          \"givenName\": \"reprehenderit aute\",\n          \"familyName\": \"amet fugiat pariatur\",\n          \"personPhoto\": \"labore aute anim occaecat\",\n          \"athenaPrintId\": \"ut incididunt quis in qui\",\n          \"teamAlternateName\": \"amet esse\",\n          \"teamName\": \"esse dolor ut mollit\",\n          \"teamCountryFlag\": \"amet culpa\",\n          \"sportEventTeamId\": \"nisi\",\n          \"sportEventId\": \"commodo laborum fugiat\",\n          \"drawRank\": 47957694,\n          \"robinGroup\": {\n            \"qui_b5\": 80226583.4839446,\n            \"ex_82\": -25856144\n          },\n          \"robinGroupRank\": -75176186,\n          \"teamRankingPoint\": 55932272,\n          \"uwwPoint\": -92774523,\n          \"isFinalistBronze\": true,\n          \"isFinalistGold\": false,\n          \"isFinalist\": false,\n          \"knockOutStatus\": {\n            \"enim_0\": \"irure eiusmod ut\"\n          },\n          \"hasLostknockOut\": false,\n          \"completed\": 66748279,\n          \"wins\": -13831134,\n          \"losses\": -5461748,\n          \"technicalPointsFor\": 84661966,\n          \"technicalPointsAgainst\": 25360471,\n          \"technicalPointsDiff\": -22919001,\n          \"rankingPointsFor\": 16414684,\n          \"rankingPointsAgainst\": -2762527,\n          \"rankingPointsDiff\": -62844158,\n          \"winsEasy\": -65484309,\n          \"winsSuperiority\": -4952492,\n          \"rank\": -76248168,\n          \"rankRobinGroup\": 12946784,\n          \"fightByOpponent\": {\n            \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n          },\n          \"isCompeting\": false,\n          \"hasOpenFight\": true,\n          \"isDisqualified\": false,\n          \"isNotRanked\": true,\n          \"isInjured\": true,\n          \"isForfeit\": true,\n          \"isRobinGroupNotRanked\": false,\n          \"accreditationStatus\": -46248228,\n          \"id\": \"eu dolore quis commodo enim\",\n          \"sportEventWeightCategory\": \"eu\",\n          \"weight\": 132,\n          \"drawNumber\": 8,\n          \"seedNumber\": 13,\n          \"fighterWeight\": \"ipsum aliquip\",\n          \"points\": 399,\n          \"fighterStatus\": 5494248\n        }\n      ],\n      \"team2Fighters\": [\n        {\n          \"athleteId\": \"ut cupidatat labore nisi fugiat\",\n          \"sportEventWeightCategoryId\": \"qui dolor\",\n          \"weightCategoryFullName\": \"commodo nisi\",\n          \"weightCategoryShortName\": \"in quis ut eiusmod\",\n          \"weightCategoryCountFights\": -55936321,\n          \"hasWeightCategoryBlockchainIds\": false,\n          \"weightCategoryCountReadyFighters\": -67682894,\n          \"countFights\": -38307444,\n          \"personId\": \"adipisicing reprehenderit qui\",\n          \"fullName\": \"aliqua\",\n          \"preferedName\": \"pariatur cillum cupidatat\",\n          \"displayName\": \"sit voluptate\",\n          \"givenName\": \"ex in\",\n          \"familyName\": \"laboris\",\n          \"personPhoto\": \"ut commodo Lorem laborum aute\",\n          \"athenaPrintId\": \"elit ad in consectetur incididunt\",\n          \"teamAlternateName\": \"velit exercitation culpa\",\n          \"teamName\": \"nostrud eiusmod elit sit\",\n          \"teamCountryFlag\": \"commodo proident ullamco magna\",\n          \"sportEventTeamId\": \"ullamco sunt incididunt dolore\",\n          \"sportEventId\": \"Ut dolor\",\n          \"drawRank\": 48593214,\n          \"robinGroup\": {\n            \"quis_6_\": false\n          },\n          \"robinGroupRank\": -23851902,\n          \"teamRankingPoint\": -38064845,\n          \"uwwPoint\": -49418574,\n          \"isFinalistBronze\": false,\n          \"isFinalistGold\": true,\n          \"isFinalist\": true,\n          \"knockOutStatus\": {\n            \"dolore5b\": \"culpa ipsum\",\n            \"enim_d0c\": -64239766\n          },\n          \"hasLostknockOut\": true,\n          \"completed\": 54417941,\n          \"wins\": 85046170,\n          \"losses\": -89151006,\n          \"technicalPointsFor\": 9068617,\n          \"technicalPointsAgainst\": 97633414,\n          \"technicalPointsDiff\": -66903869,\n          \"rankingPointsFor\": -66341959,\n          \"rankingPointsAgainst\": 61496272,\n          \"rankingPointsDiff\": -57266581,\n          \"winsEasy\": -17538840,\n          \"winsSuperiority\": -33947277,\n          \"rank\": 16714412,\n          \"rankRobinGroup\": 97371985,\n          \"fightByOpponent\": {\n            \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n          },\n          \"isCompeting\": false,\n          \"hasOpenFight\": true,\n          \"isDisqualified\": false,\n          \"isNotRanked\": false,\n          \"isInjured\": false,\n          \"isForfeit\": false,\n          \"isRobinGroupNotRanked\": true,\n          \"accreditationStatus\": 82811258,\n          \"id\": \"nostrud elit veniam tempor\",\n          \"sportEventWeightCategory\": \"mollit adipisicing velit\",\n          \"weight\": 326,\n          \"drawNumber\": 12,\n          \"seedNumber\": 21,\n          \"fighterWeight\": \"ullamco tempor pariatur in\",\n          \"points\": 217,\n          \"fighterStatus\": -77905991\n        },\n        {\n          \"athleteId\": \"cu\",\n          \"sportEventWeightCategoryId\": \"labore ea magna in\",\n          \"weightCategoryFullName\": \"aute commodo magna\",\n          \"weightCategoryShortName\": \"dolore in sint mollit\",\n          \"weightCategoryCountFights\": 4426232,\n          \"hasWeightCategoryBlockchainIds\": true,\n          \"weightCategoryCountReadyFighters\": 45151284,\n          \"countFights\": 7658050,\n          \"personId\": \"et in incididunt aute\",\n          \"fullName\": \"incididunt velit non\",\n          \"preferedName\": \"dolore elit in adipisicing\",\n          \"displayName\": \"in ipsum eu aliqua\",\n          \"givenName\": \"deserunt ullamco mollit\",\n          \"familyName\": \"sit\",\n          \"personPhoto\": \"id ea irure cupidatat\",\n          \"athenaPrintId\": \"no\",\n          \"teamAlternateName\": \"aliqua\",\n          \"teamName\": \"occaecat\",\n          \"teamCountryFlag\": \"elit\",\n          \"sportEventTeamId\": \"aliquip amet proident enim\",\n          \"sportEventId\": \"deserunt dolore pariatur\",\n          \"drawRank\": 4860962,\n          \"robinGroup\": {\n            \"cupidatat9\": -99722980,\n            \"eiusmode12\": false\n          },\n          \"robinGroupRank\": -94609662,\n          \"teamRankingPoint\": 95867550,\n          \"uwwPoint\": -96089616,\n          \"isFinalistBronze\": true,\n          \"isFinalistGold\": false,\n          \"isFinalist\": false,\n          \"knockOutStatus\": {\n            \"elit_8\": -97971952.44063976\n          },\n          \"hasLostknockOut\": false,\n          \"completed\": 56497940,\n          \"wins\": -95236791,\n          \"losses\": 92735546,\n          \"technicalPointsFor\": -57020364,\n          \"technicalPointsAgainst\": -49169642,\n          \"technicalPointsDiff\": -85653320,\n          \"rankingPointsFor\": 68388129,\n          \"rankingPointsAgainst\": -26532672,\n          \"rankingPointsDiff\": -20949088,\n          \"winsEasy\": -72015527,\n          \"winsSuperiority\": -67772789,\n          \"rank\": 33731733,\n          \"rankRobinGroup\": 30710023,\n          \"fightByOpponent\": {\n            \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n          },\n          \"isCompeting\": true,\n          \"hasOpenFight\": true,\n          \"isDisqualified\": true,\n          \"isNotRanked\": false,\n          \"isInjured\": true,\n          \"isForfeit\": true,\n          \"isRobinGroupNotRanked\": true,\n          \"accreditationStatus\": 25093739,\n          \"id\": \"culpa\",\n          \"sportEventWeightCategory\": \"mollit cillum id\",\n          \"weight\": 293,\n          \"drawNumber\": 216,\n          \"seedNumber\": 13,\n          \"fighterWeight\": \"ex commodo\",\n          \"points\": 27,\n          \"fighterStatus\": -12076197\n        }\n      ],\n      \"rankingPointNiceName\": \"D\",\n      \"resultText\": \"nostrud pariatur\",\n      \"resultTextSmall\": \"ipsum\",\n      \"roundRenamedSmall\": \"consectetur Excepteur sit exercitation nostrud\",\n      \"parentFightNumber1\": 72931579,\n      \"parentFightNumber2\": -72987360,\n      \"fightRefereesWithRole\": [\n        {\n          \"refereeId\": \"ex ut\",\n          \"fightId\": \"velit dolore et eu\",\n          \"refereeRole\": \"adipisicing et incididunt laboris\",\n          \"refereeFullName\": \"veni\",\n          \"refereeDisplayName\": \"exercitation consectetur dolore\",\n          \"refereeNumber\": 70841105,\n          \"refereeTeamAlternateName\": \"esse et aliquip\",\n          \"refereeCountryFlag\": \"voluptate ea esse\",\n          \"refereeFull\": \"velit Except\",\n          \"id\": \"sit qui fugiat\"\n        },\n        {\n          \"refereeId\": \"veniam amet ad\",\n          \"fightId\": \"a\",\n          \"refereeRole\": \"ipsum nostrud\",\n          \"refereeFullName\": \"qui\",\n          \"refereeDisplayName\": \"qui\",\n          \"refereeNumber\": 96623569,\n          \"refereeTeamAlternateName\": \"ea magna\",\n          \"refereeCountryFlag\": \"reprehenderit enim sed\",\n          \"refereeFull\": \"dolore eiusmod ut elit\",\n          \"id\": \"deserunt sunt Excepteur Lorem\"\n        }\n      ],\n      \"needsRefresh\": false,\n      \"isCountdown\": true,\n      \"branding\": \"aliqua amet\",\n      \"id\": \"laboris\",\n      \"parentFight1Id\": \"eu minim aute fu\",\n      \"parentFight2Id\": \"aute esse Excepteur\",\n      \"fighter1\": \"culpa n\",\n      \"fighter1RankingPoint\": 537,\n      \"fighter2\": \"ut anim consectetur\",\n      \"fighter2RankingPoint\": 473,\n      \"refereeGroup\": \"d\",\n      \"sportEventTeam1Id\": \"mollit incididunt officia et\",\n      \"sportEventTeam2Id\": \"ex\",\n      \"fightMatId\": \"proident minim\",\n      \"round\": \"irure ut dolor minim\",\n      \"qualifying\": true,\n      \"teamFightId\": \"nisi magna qui\",\n      \"status\": 70530360,\n      \"rankingCheck\": true,\n      \"technicalCheck\": true,\n      \"weight\": -19729674,\n      \"fightNumber\": 9668,\n      \"roundWeight\": 2233,\n      \"repechageWeight\": 9998,\n      \"repechageSection\": 8168,\n      \"displayOrder\": 4229,\n      \"canceled\": \"1997-06-29T15:43:02.342Z\",\n      \"fightReferees\": [\n        {\n          \"refereeId\": \"minim amet ipsum\",\n          \"fightId\": \"ex laboris occaecat\",\n          \"refereeRole\": \"reprehenderit ipsum consequat magna\",\n          \"refereeFullName\": \"sint dolore Duis Excepteur\",\n          \"refereeDisplayName\": \"nostrud in\",\n          \"refereeNumber\": -82984620,\n          \"refereeTeamAlternateName\": \"dolore ad nisi\",\n          \"refereeCountryFlag\": \"dolor cupidatat sint consectetur sed\",\n          \"refereeFull\": \"id non\",\n          \"id\": \"commodo eiusmod aliqua incididunt do\"\n        },\n        {\n          \"refereeId\": \"veniam in eu\",\n          \"fightId\": \"officia quis mollit incididunt\",\n          \"refereeRole\": \"deserunt ea\",\n          \"refereeFullName\": \"irure qui\",\n          \"refereeDisplayName\": \"non\",\n          \"refereeNumber\": 87245729,\n          \"refereeTeamAlternateName\": \"consequat laboris aliquip occaecat\",\n          \"refereeCountryFlag\": \"enim aute\",\n          \"refereeFull\": \"nulla laborum tempor in\",\n          \"id\": \"dolor\"\n        }\n      ],\n      \"odfCode\": \"irure velit ut dolor\",\n      \"refereeComment\": \"occaecat cillum\",\n      \"uploaderFight\": {\n        \"consectetur_a1\": \"exercitation dolor\",\n        \"cupidatat47f\": \"ea\"\n      }\n    },\n    {\n      \"sportEventId\": \"exerci\",\n      \"sportEventWeightCategoryId\": \"ea tempor\",\n      \"fighter1Id\": \"in id\",\n      \"fighter2Id\": \"Excepteur Lorem ut\",\n      \"fighter2AthenaId\": -30517058,\n      \"team1Name\": \"pariatur qui culpa tempor\",\n      \"team1AlternateName\": \"qu\",\n      \"team1FullName\": \"minim Duis qui Lorem sed\",\n      \"team1CountryFlag\": \"anim reprehenderit in\",\n      \"team1CountryFlagScoreboard\": \"proident aute adipisicing\",\n      \"team1CountryFlagMobile\": \"aliquip\",\n      \"team1PoolName\": \"aliqua ut\",\n      \"team1FightByOpponent\": {\n        \"voluptate7\": -26521887,\n        \"deserunt75\": 13227442.61644581\n      },\n      \"team2Name\": \"tempor reprehenderit\",\n      \"team2AlternateName\": \"ullamco amet sint\",\n      \"team2FullName\": \"et voluptate culpa ea\",\n      \"team2CountryFlag\": \"non qui sit\",\n      \"team2CountryFlagScoreboard\": \"magna\",\n      \"team2CountryFlagMobile\": \"qui exercitation voluptate\",\n      \"team2PoolName\": \"fugiat Duis\",\n      \"team2FightByOpponent\": {\n        \"in1\": -53499477.37969254\n      },\n      \"roundFriendlyName\": \"Lorem aliqua pariatur consequat\",\n      \"displayOrderInRound\": -28788595,\n      \"round1Id\": \"dolore esse nostrud\",\n      \"round2Id\": \"occaecat proident mollit\",\n      \"countReferees\": -19648778,\n      \"sportId\": \"qui est ea\",\n      \"athlete1Color\": \"in a\",\n      \"athlete2Color\": \"nulla adipisicing aliquip elit\",\n      \"athlete1TextColor\": \"nisi ea\",\n      \"athlete2TextColor\": \"aliquip do\",\n      \"matName\": \"proident adipisicing\",\n      \"sessionId\": \"Ut\",\n      \"sessionName\": \"ut voluptate sunt\",\n      \"sessionStartDate\": \"2017-10-26T01:41:20.030Z\",\n      \"technicalPoints\": {\n        \"enim_f\": \"esse Excepteur in\",\n        \"in0\": \"velit in nisi\"\n      },\n      \"technicalPointsDetail\": {\n        \"culpa5\": \"do\"\n      },\n      \"technicalPointsTagStatus\": \"in\",\n      \"technicalPointIds\": {\n        \"minim__c3\": -49758229.95534043,\n        \"culpa6\": 12936667\n      },\n      \"cautionsList\": {\n        \"reprehenderit7\": false\n      },\n      \"isCompleted\": false,\n      \"isReady\": false,\n      \"isRobinGroupFight\": false,\n      \"winnerFighter\": \"incididunt cillum Lorem aliqua\",\n      \"winnerTeam\": \"irure anim\",\n      \"winnerTeamAlternateName\": \"ea adi\",\n      \"sportEventName\": \"dolor v\",\n      \"sportEventStartDate\": \"1954-10-02T17:14:05.463Z\",\n      \"sportEventLogo\": \"deserunt minim dolore\",\n      \"rankingPoint\": {\n        \"fightId\": \"est ut laborum Lorem ex\",\n        \"victoryType\": \"qui sunt\",\n        \"fighterId\": \"nisi dolor in id\",\n        \"fighterFullName\": \"consequat labore\",\n        \"victoryTypeId\": \"dolor\",\n        \"victoryTypeName\": \"id dolor in adipisicing\",\n        \"victoryTypeNiceName\": \"eiusmod do amet\",\n        \"sportId\": \"enim culpa\",\n        \"sportEventId\": \"ipsum Excep\",\n        \"id\": \"pariatur\",\n        \"fighter\": \"elit magna labore comm\",\n        \"second\": 36122\n      },\n      \"completedDate\": \"1955-12-08T06:48:00.357Z\",\n      \"roundsNumber\": 75990302,\n      \"roundDuration\": 17471036,\n      \"sportAlternateName\": \"occaecat enim veniam\",\n      \"weightCategoryName\": \"eu ut\",\n      \"weightCategoryAlternateName\": \"Excepteur Lorem cillum\",\n      \"weightCategoryShortName\": \"eiusmod laborum in dolor\",\n      \"weightCategoryMaxWeight\": -54903944,\n      \"weightCategoryFullName\": \"aute\",\n      \"isWeightCategoryVisible\": true,\n      \"weightCategoryAverageDuration\": -17635816,\n      \"weightCategoryColor\": \"aute amet cupidatat\",\n      \"weightCategoryReady\": false,\n      \"weightCategoryStarted\": true,\n      \"weightCategoryCompleted\": true,\n      \"victoryTypes\": {\n        \"mollit_0\": true,\n        \"culpad0_\": -94216496\n      },\n      \"victoryTypesArray\": {\n        \"Lorem_6f3\": \"fugiat nulla\"\n      },\n      \"audienceId\": \"consequat dolore commodo\",\n      \"audienceName\": \"culpa proident incididunt nisi\",\n      \"audienceShortName\": \"dolor aliqua\",\n      \"sportName\": \"enim culpa aliquip sunt do\",\n      \"injuryTime\": -70402304,\n      \"warnings\": false,\n      \"cautions\": 83343665,\n      \"legFouls\": 17839636,\n      \"activityTime\": true,\n      \"fighter1FullName\": \"adipisicing laboris\",\n      \"fighter1DisplayName\": \"cillum laborum\",\n      \"fighter1FamilyName\": \"velit labore\",\n      \"fighter1GivenName\": \"est in\",\n      \"fighter1PreferedName\": \"dolo\",\n      \"fighter1DrawRank\": \"magna do\",\n      \"fighter1RobinRank\": \"proident esse\",\n      \"fighter1SeedNumber\": 77393603,\n      \"fighter1AthleteId\": \"aliquip et ut\",\n      \"fighter1PersonId\": \"proident non ullamco Duis\",\n      \"fighter1AthenaId\": 12264006,\n      \"fighter1IsSeeded\": false,\n      \"fighter1Status\": 95568931,\n      \"fighter1IsInjured\": true,\n      \"fighter1Weight\": -50674135.79510149,\n      \"fighter2FullName\": \"ea anim velit ut\",\n      \"fighter2DisplayName\": \"non exercitation aliqua\",\n      \"fighter2FamilyName\": \"veniam in eu sit\",\n      \"fighter2GivenName\": \"non tem\",\n      \"fighter2PreferedName\": \"occaecat laborum reprehenderit\",\n      \"fighter2DrawRank\": -27105929,\n      \"fighter2RobinRank\": 1525712,\n      \"fighter2SeedNumber\": 89100638,\n      \"fighter2AthleteId\": \"do Excepteur nisi\",\n      \"fighter2PersonId\": \"velit ipsum\",\n      \"fighter2IsSeeded\": true,\n      \"fighter2Status\": -30280436,\n      \"fighter2IsInjured\": true,\n      \"fighter2Weight\": 4861815.240637451,\n      \"result\": \"dolor in deserunt proident aliquip\",\n      \"victoryType\": \"fugiat adipisicing magna irure in\",\n      \"endTime\": 76193200,\n      \"endDate\": \"1970-07-14T03:38:38.411Z\",\n      \"expectedDateStart\": \"1980-02-22T10:47:13.736Z\",\n      \"expectedStartDate\": \"1995-09-08T06:28:02.678Z\",\n      \"team1Fighters\": [\n        {\n          \"athleteId\": \"tempor et officia\",\n          \"sportEventWeightCategoryId\": \"reprehenderit aliquip Excepteur qui\",\n          \"weightCategoryFullName\": \"ut in\",\n          \"weightCategoryShortName\": \"occaecat exercitation anim sint dolor\",\n          \"weightCategoryCountFights\": 2021733,\n          \"hasWeightCategoryBlockchainIds\": true,\n          \"weightCategoryCountReadyFighters\": 30444253,\n          \"countFights\": -21467173,\n          \"personId\": \"aliquip adipisicing sit deserunt\",\n          \"fullName\": \"ullamco eu dolore aute\",\n          \"preferedName\": \"commodo\",\n          \"displayName\": \"eiusmod irure id\",\n          \"givenName\": \"voluptate dolor\",\n          \"familyName\": \"incididunt velit minim dolor\",\n          \"personPhoto\": \"laboris reprehenderit\",\n          \"athenaPrintId\": \"reprehenderit consequat quis\",\n          \"teamAlternateName\": \"id do laborum\",\n          \"teamName\": \"velit Duis dolore elit\",\n          \"teamCountryFlag\": \"sunt Lorem occaecat labore\",\n          \"sportEventTeamId\": \"magna adipisicing sed consectetur\",\n          \"sportEventId\": \"qui ut culpa\",\n          \"drawRank\": -39915274,\n          \"robinGroup\": {\n            \"euc8a\": -95299925.54977329\n          },\n          \"robinGroupRank\": -42807770,\n          \"teamRankingPoint\": 74905041,\n          \"uwwPoint\": 73484741,\n          \"isFinalistBronze\": true,\n          \"isFinalistGold\": false,\n          \"isFinalist\": true,\n          \"knockOutStatus\": {\n            \"voluptate_a2\": 58613065.37564254,\n            \"etb\": 35716252\n          },\n          \"hasLostknockOut\": true,\n          \"completed\": -55845391,\n          \"wins\": 65484720,\n          \"losses\": 41435605,\n          \"technicalPointsFor\": 16705413,\n          \"technicalPointsAgainst\": 21332111,\n          \"technicalPointsDiff\": -70972862,\n          \"rankingPointsFor\": 79366339,\n          \"rankingPointsAgainst\": 39695572,\n          \"rankingPointsDiff\": 38901595,\n          \"winsEasy\": -18152672,\n          \"winsSuperiority\": -90846641,\n          \"rank\": 98749800,\n          \"rankRobinGroup\": -15143865,\n          \"fightByOpponent\": {\n            \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n          },\n          \"isCompeting\": false,\n          \"hasOpenFight\": false,\n          \"isDisqualified\": true,\n          \"isNotRanked\": true,\n          \"isInjured\": false,\n          \"isForfeit\": true,\n          \"isRobinGroupNotRanked\": true,\n          \"accreditationStatus\": -73798454,\n          \"id\": \"reprehenderit dolor\",\n          \"sportEventWeightCategory\": \"dolor ullamco\",\n          \"weight\": 456,\n          \"drawNumber\": 294,\n          \"seedNumber\": 10,\n          \"fighterWeight\": \"nisi veniam\",\n          \"points\": 326,\n          \"fighterStatus\": 19380008\n        },\n        {\n          \"athleteId\": \"esse enim minim Excepteur ut\",\n          \"sportEventWeightCategoryId\": \"labore id Lorem\",\n          \"weightCategoryFullName\": \"velit\",\n          \"weightCategoryShortName\": \"nostrud veniam occaecat non\",\n          \"weightCategoryCountFights\": 45975233,\n          \"hasWeightCategoryBlockchainIds\": false,\n          \"weightCategoryCountReadyFighters\": 97641484,\n          \"countFights\": -68748980,\n          \"personId\": \"amet cillum ad Excepteur enim\",\n          \"fullName\": \"et quis Excepteur\",\n          \"preferedName\": \"adipisicing aute\",\n          \"displayName\": \"ut in in eiusmod\",\n          \"givenName\": \"aliqua nisi cupidatat\",\n          \"familyName\": \"cupidatat eu e\",\n          \"personPhoto\": \"cillum culpa\",\n          \"athenaPrintId\": \"quis sed Lorem cillum\",\n          \"teamAlternateName\": \"in sint mollit aliquip\",\n          \"teamName\": \"magna est\",\n          \"teamCountryFlag\": \"ea eiusmod\",\n          \"sportEventTeamId\": \"ut mollit nisi\",\n          \"sportEventId\": \"proident Lorem ex\",\n          \"drawRank\": -2736628,\n          \"robinGroup\": {\n            \"culpa0f\": false,\n            \"minim37\": false\n          },\n          \"robinGroupRank\": -55247201,\n          \"teamRankingPoint\": 28339848,\n          \"uwwPoint\": -41685712,\n          \"isFinalistBronze\": false,\n          \"isFinalistGold\": false,\n          \"isFinalist\": false,\n          \"knockOutStatus\": {\n            \"ea1c1\": \"in magna culpa\",\n            \"minim_b\": 99070470.36640528,\n            \"sunt_a\": true,\n            \"reprehenderit_7\": \"laboris\"\n          },\n          \"hasLostknockOut\": true,\n          \"completed\": 59206422,\n          \"wins\": 34133623,\n          \"losses\": 50343470,\n          \"technicalPointsFor\": 97665813,\n          \"technicalPointsAgainst\": -51958796,\n          \"technicalPointsDiff\": -48650941,\n          \"rankingPointsFor\": -67054453,\n          \"rankingPointsAgainst\": -91134277,\n          \"rankingPointsDiff\": -63512128,\n          \"winsEasy\": 63547252,\n          \"winsSuperiority\": 45514366,\n          \"rank\": -80412271,\n          \"rankRobinGroup\": -26626973,\n          \"fightByOpponent\": {\n            \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n          },\n          \"isCompeting\": false,\n          \"hasOpenFight\": true,\n          \"isDisqualified\": false,\n          \"isNotRanked\": false,\n          \"isInjured\": true,\n          \"isForfeit\": false,\n          \"isRobinGroupNotRanked\": false,\n          \"accreditationStatus\": 26979690,\n          \"id\": \"cupidatat irure sunt\",\n          \"sportEventWeightCategory\": \"sit reprehenderit quis\",\n          \"weight\": 20,\n          \"drawNumber\": 82,\n          \"seedNumber\": 3,\n          \"fighterWeight\": \"ut Excepteur aliquip ame\",\n          \"points\": 453,\n          \"fighterStatus\": -21208803\n        }\n      ],\n      \"team2Fighters\": [\n        {\n          \"athleteId\": \"eu occaecat ut est\",\n          \"sportEventWeightCategoryId\": \"aute adipisicing nisi in\",\n          \"weightCategoryFullName\": \"in consectetur laborum minim officia\",\n          \"weightCategoryShortName\": \"sint in proident\",\n          \"weightCategoryCountFights\": -93520395,\n          \"hasWeightCategoryBlockchainIds\": true,\n          \"weightCategoryCountReadyFighters\": 59174331,\n          \"countFights\": 52986,\n          \"personId\": \"esse laboris occaecat est\",\n          \"fullName\": \"commodo mollit\",\n          \"preferedName\": \"do in sit ipsum\",\n          \"displayName\": \"non reprehenderit dolo\",\n          \"givenName\": \"commodo consequat Duis do\",\n          \"familyName\": \"sint do\",\n          \"personPhoto\": \"Ut dolor\",\n          \"athenaPrintId\": \"est cillum\",\n          \"teamAlternateName\": \"Ut ex\",\n          \"teamName\": \"cupidatat sint Lorem\",\n          \"teamCountryFlag\": \"voluptate minim occaecat\",\n          \"sportEventTeamId\": \"irure in Ut culpa\",\n          \"sportEventId\": \"nulla laborum do ullamco\",\n          \"drawRank\": 69308422,\n          \"robinGroup\": {\n            \"ut_7\": -10444371.801774815\n          },\n          \"robinGroupRank\": 64505981,\n          \"teamRankingPoint\": 57792760,\n          \"uwwPoint\": 14296697,\n          \"isFinalistBronze\": true,\n          \"isFinalistGold\": true,\n          \"isFinalist\": true,\n          \"knockOutStatus\": {\n            \"elit772\": \"aliqua cillu\",\n            \"cupidatat__b\": -23955401.799928218\n          },\n          \"hasLostknockOut\": false,\n          \"completed\": -28823394,\n          \"wins\": -81008822,\n          \"losses\": -37540997,\n          \"technicalPointsFor\": -227871,\n          \"technicalPointsAgainst\": -78331775,\n          \"technicalPointsDiff\": -87968963,\n          \"rankingPointsFor\": -16195760,\n          \"rankingPointsAgainst\": 85843737,\n          \"rankingPointsDiff\": 67963684,\n          \"winsEasy\": 85664334,\n          \"winsSuperiority\": 43658054,\n          \"rank\": -60271551,\n          \"rankRobinGroup\": -87511370,\n          \"fightByOpponent\": {\n            \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n          },\n          \"isCompeting\": false,\n          \"hasOpenFight\": false,\n          \"isDisqualified\": true,\n          \"isNotRanked\": true,\n          \"isInjured\": false,\n          \"isForfeit\": false,\n          \"isRobinGroupNotRanked\": false,\n          \"accreditationStatus\": 3580627,\n          \"id\": \"pariatur labore irure\",\n          \"sportEventWeightCategory\": \"Ut dolor Duis\",\n          \"weight\": 342,\n          \"drawNumber\": 56,\n          \"seedNumber\": 15,\n          \"fighterWeight\": \"in consequat esse dolore proident\",\n          \"points\": 82,\n          \"fighterStatus\": 61756847\n        },\n        {\n          \"athleteId\": \"sint quis velit\",\n          \"sportEventWeightCategoryId\": \"deserunt qui\",\n          \"weightCategoryFullName\": \"ex commodo\",\n          \"weightCategoryShortName\": \"ad velit\",\n          \"weightCategoryCountFights\": 4770908,\n          \"hasWeightCategoryBlockchainIds\": true,\n          \"weightCategoryCountReadyFighters\": 68438773,\n          \"countFights\": 92519710,\n          \"personId\": \"ut ipsum exercitation labore consequat\",\n          \"fullName\": \"ullamco\",\n          \"preferedName\": \"pariatur culpa deserun\",\n          \"displayName\": \"non sit\",\n          \"givenName\": \"amet\",\n          \"familyName\": \"anim dolore enim sunt\",\n          \"personPhoto\": \"pariatur eiusmod\",\n          \"athenaPrintId\": \"anim ut mollit nulla\",\n          \"teamAlternateName\": \"ut\",\n          \"teamName\": \"dolore commodo adipisicing\",\n          \"teamCountryFlag\": \"ea minim magna exercitation aute\",\n          \"sportEventTeamId\": \"officia deserunt in\",\n          \"sportEventId\": \"ad nisi aliqua\",\n          \"drawRank\": 83214371,\n          \"robinGroup\": {\n            \"in_a79\": 36915069,\n            \"deserunt_a\": true,\n            \"aute_30\": true\n          },\n          \"robinGroupRank\": -47044253,\n          \"teamRankingPoint\": 38079793,\n          \"uwwPoint\": -70090731,\n          \"isFinalistBronze\": false,\n          \"isFinalistGold\": false,\n          \"isFinalist\": true,\n          \"knockOutStatus\": {\n            \"sed_8\": 31006216\n          },\n          \"hasLostknockOut\": true,\n          \"completed\": -7405921,\n          \"wins\": 63491786,\n          \"losses\": -58978822,\n          \"technicalPointsFor\": -77792687,\n          \"technicalPointsAgainst\": 54024828,\n          \"technicalPointsDiff\": -92974824,\n          \"rankingPointsFor\": 12851006,\n          \"rankingPointsAgainst\": -94327541,\n          \"rankingPointsDiff\": 48881971,\n          \"winsEasy\": 7605952,\n          \"winsSuperiority\": -14384158,\n          \"rank\": 89057969,\n          \"rankRobinGroup\": -296710,\n          \"fightByOpponent\": {\n            \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n          },\n          \"isCompeting\": true,\n          \"hasOpenFight\": false,\n          \"isDisqualified\": true,\n          \"isNotRanked\": true,\n          \"isInjured\": false,\n          \"isForfeit\": false,\n          \"isRobinGroupNotRanked\": false,\n          \"accreditationStatus\": -30598888,\n          \"id\": \"Lorem ad\",\n          \"sportEventWeightCategory\": \"elit\",\n          \"weight\": 290,\n          \"drawNumber\": 89,\n          \"seedNumber\": 15,\n          \"fighterWeight\": \"ullamco nulla\",\n          \"points\": 205,\n          \"fighterStatus\": 72856508\n        }\n      ],\n      \"rankingPointNiceName\": \"laborum anim\",\n      \"resultText\": \"est ullamco Ut\",\n      \"resultTextSmall\": \"fugiat\",\n      \"roundRenamedSmall\": \"culpa dolor\",\n      \"parentFightNumber1\": 18641863,\n      \"parentFightNumber2\": -47128912,\n      \"fightRefereesWithRole\": [\n        {\n          \"refereeId\": \"cupidatat non in\",\n          \"fightId\": \"laborum minim\",\n          \"refereeRole\": \"non eiusmod\",\n          \"refereeFullName\": \"enim\",\n          \"refereeDisplayName\": \"quis voluptate\",\n          \"refereeNumber\": -75571634,\n          \"refereeTeamAlternateName\": \"magna ea commodo e\",\n          \"refereeCountryFlag\": \"cillum minim eiusmod\",\n          \"refereeFull\": \"nostrud amet culpa laborum\",\n          \"id\": \"mollit cillum cupidatat dolore exercitation\"\n        },\n        {\n          \"refereeId\": \"ex ad Ut officia veniam\",\n          \"fightId\": \"dolore fugiat\",\n          \"refereeRole\": \"cup\",\n          \"refereeFullName\": \"in cupidatat nostrud anim dolor\",\n          \"refereeDisplayName\": \"id\",\n          \"refereeNumber\": -49116872,\n          \"refereeTeamAlternateName\": \"aliqua\",\n          \"refereeCountryFlag\": \"in veniam ullamco\",\n          \"refereeFull\": \"nostrud ex\",\n          \"id\": \"et ut occaecat\"\n        }\n      ],\n      \"needsRefresh\": true,\n      \"isCountdown\": true,\n      \"branding\": \"amet Ut\",\n      \"id\": \"exercitation aute eu\",\n      \"parentFight1Id\": \"quis velit ad\",\n      \"parentFight2Id\": \"et amet sint sit\",\n      \"fighter1\": \"laboris sit occaecat minim\",\n      \"fighter1RankingPoint\": 487,\n      \"fighter2\": \"sunt\",\n      \"fighter2RankingPoint\": 5280,\n      \"refereeGroup\": \"i\",\n      \"sportEventTeam1Id\": \"velit pariatur mollit\",\n      \"sportEventTeam2Id\": \"dolore reprehenderit\",\n      \"fightMatId\": \"Excepteur proident labore aute\",\n      \"round\": \"ex incididunt\",\n      \"qualifying\": false,\n      \"teamFightId\": \"laboris fugiat ex \",\n      \"status\": -82956285,\n      \"rankingCheck\": false,\n      \"technicalCheck\": true,\n      \"weight\": -44763821,\n      \"fightNumber\": 3248,\n      \"roundWeight\": 7608,\n      \"repechageWeight\": 6378,\n      \"repechageSection\": 3078,\n      \"displayOrder\": 2758,\n      \"canceled\": \"1969-06-27T21:13:24.722Z\",\n      \"fightReferees\": [\n        {\n          \"refereeId\": \"Ut Excepteur\",\n          \"fightId\": \"Duis consectetur\",\n          \"refereeRole\": \"aute quis\",\n          \"refereeFullName\": \"do mollit incididunt aliquip ipsum\",\n          \"refereeDisplayName\": \"ipsu\",\n          \"refereeNumber\": -49541829,\n          \"refereeTeamAlternateName\": \"quis dolore\",\n          \"refereeCountryFlag\": \"esse Lorem et deserunt\",\n          \"refereeFull\": \"aute irure\",\n          \"id\": \"laborum sit proident minim ut\"\n        },\n        {\n          \"refereeId\": \"culpa labore esse laborum\",\n          \"fightId\": \"in minim esse deserunt officia\",\n          \"refereeRole\": \"deserunt dolor volupta\",\n          \"refereeFullName\": \"in\",\n          \"refereeDisplayName\": \"mollit Ut Lorem in\",\n          \"refereeNumber\": -27869082,\n          \"refereeTeamAlternateName\": \"fugiat\",\n          \"refereeCountryFlag\": \"aute\",\n          \"refereeFull\": \"minim amet\",\n          \"id\": \"ea do \"\n        }\n      ],\n      \"odfCode\": \"officia pariatur magna reprehenderit\",\n      \"refereeComment\": \"dolor sunt non fugiat\",\n      \"uploaderFight\": {\n        \"proident7\": \"dolore fugiat quis nisi\",\n        \"mollit003\": -66403019\n      }\n    }\n  ]\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a fight mat",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sportEventMatId\": \"enim ut pariatur veniam aliqua\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a fight mat",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Start list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id/start-list",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id",
												"start-list"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns StartList for a Mat",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id/start-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														"get",
														":id",
														"start-list"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"sportEvent\": \"in deserunt laborum non\",\n  \"fightMat\": {\n    \"matName\": \"in ullamco veniam aliquip\",\n    \"sessionName\": \"enim ut \",\n    \"sessionStartDate\": \"1972-12-21T16:07:53.451Z\",\n    \"sessionEndDate\": \"2019-09-20T07:23:30.563Z\",\n    \"countSessionFightMats\": 49820255,\n    \"sportEventId\": \"magna voluptate anim\",\n    \"matStreaming\": \"cillum consectetur eiusmod\",\n    \"id\": \"enim nisi mollit\",\n    \"sportEventSessionId\": \"minim et adipisicing commodo occaecat\",\n    \"sportEventMatId\": \"sit amet\",\n    \"fights\": [\n      {\n        \"sportEventId\": \"amet in\",\n        \"sportEventWeightCategoryId\": \"nulla\",\n        \"fighter1Id\": \"reprehenderit ex non Exce\",\n        \"fighter2Id\": \"sed consequat ut nostrud\",\n        \"fighter2AthenaId\": 29885547,\n        \"team1Name\": \"commodo enim\",\n        \"team1AlternateName\": \"cillum ipsum\",\n        \"team1FullName\": \"sunt\",\n        \"team1CountryFlag\": \"eu pariatur do incididunt\",\n        \"team1CountryFlagScoreboard\": \"Excepteur aute\",\n        \"team1CountryFlagMobile\": \"aute Lorem\",\n        \"team1PoolName\": \"Duis labore\",\n        \"team1FightByOpponent\": {\n          \"labore_0\": 31714145.62049572,\n          \"laborum3\": true\n        },\n        \"team2Name\": \"aliquip fugiat commodo\",\n        \"team2AlternateName\": \"est mollit sed\",\n        \"team2FullName\": \"mollit ex\",\n        \"team2CountryFlag\": \"officia commodo\",\n        \"team2CountryFlagScoreboard\": \"dolore\",\n        \"team2CountryFlagMobile\": \"deserunt esse\",\n        \"team2PoolName\": \"Duis nostrud\",\n        \"team2FightByOpponent\": {\n          \"enim437\": -27747726,\n          \"Lorem_4f\": \"non ut dolor ex\"\n        },\n        \"roundFriendlyName\": \"ea ut officia veniam\",\n        \"displayOrderInRound\": -21525162,\n        \"round1Id\": \"nisi ut\",\n        \"round2Id\": \"ex esse qui in est\",\n        \"countReferees\": -13596756,\n        \"sportId\": \"est ipsum\",\n        \"athlete1Color\": \"do\",\n        \"athlete2Color\": \"velit officia nulla in\",\n        \"athlete1TextColor\": \"irure commodo consequat aliqua\",\n        \"athlete2TextColor\": \"sint quis Excepteur sunt adipisicing\",\n        \"matName\": \"ullamco minim Excepteur laboris\",\n        \"sessionId\": \"dolore aute cupidatat\",\n        \"sessionName\": \"cupidatat proident\",\n        \"sessionStartDate\": \"1961-08-24T03:52:11.681Z\",\n        \"technicalPoints\": {\n          \"nulla6\": -95789306,\n          \"consecteturce6\": \"deserunt aliqua ex\",\n          \"ea_cfb\": true\n        },\n        \"technicalPointsDetail\": {\n          \"enim5\": 41596027\n        },\n        \"technicalPointsTagStatus\": \"nostrud id fugiat\",\n        \"technicalPointIds\": {\n          \"magna_e5\": -29349589.894533426\n        },\n        \"cautionsList\": {\n          \"fugiat_aa\": true,\n          \"sed2f9\": -88163422.87370938\n        },\n        \"isCompleted\": false,\n        \"isReady\": false,\n        \"isRobinGroupFight\": true,\n        \"winnerFighter\": \"Duis incididunt ea\",\n        \"winnerTeam\": \"eu est voluptate incididunt\",\n        \"winnerTeamAlternateName\": \"nisi aliquip\",\n        \"sportEventName\": \"nostrud\",\n        \"sportEventStartDate\": \"1996-03-26T05:48:39.549Z\",\n        \"sportEventLogo\": \"labo\",\n        \"rankingPoint\": {\n          \"fightId\": \"pariatu\",\n          \"victoryType\": \"veniam \",\n          \"fighterId\": \"elit esse consectetur\",\n          \"fighterFullName\": \"veniam anim aute exercitation\",\n          \"victoryTypeId\": \"minim consectetur\",\n          \"victoryTypeName\": \"adipisicing mollit ex laboris\",\n          \"victoryTypeNiceName\": \"in tempor est anim\",\n          \"sportId\": \"aliqua anim est\",\n          \"sportEventId\": \"do Ut laboris\",\n          \"id\": \"consequat et\",\n          \"fighter\": \"nisi sed\",\n          \"second\": 85081\n        },\n        \"completedDate\": \"1965-01-27T10:23:09.327Z\",\n        \"roundsNumber\": 28667131,\n        \"roundDuration\": 63707884,\n        \"sportAlternateName\": \"deserunt ad dolor labore sed\",\n        \"weightCategoryName\": \"nulla aute labore pariatur commodo\",\n        \"weightCategoryAlternateName\": \"ut deserunt in\",\n        \"weightCategoryShortName\": \"cillum dolore\",\n        \"weightCategoryMaxWeight\": -90974533,\n        \"weightCategoryFullName\": \"non velit\",\n        \"isWeightCategoryVisible\": true,\n        \"weightCategoryAverageDuration\": -14175053,\n        \"weightCategoryColor\": \"labo\",\n        \"weightCategoryReady\": true,\n        \"weightCategoryStarted\": true,\n        \"weightCategoryCompleted\": true,\n        \"victoryTypes\": {\n          \"dolor_e73\": true\n        },\n        \"victoryTypesArray\": {\n          \"qui_2\": \"do laborum mollit nulla dolore\"\n        },\n        \"audienceId\": \"do culpa magna\",\n        \"audienceName\": \"deserunt reprehenderit\",\n        \"audienceShortName\": \"sed in laborum\",\n        \"sportName\": \"est dolore amet\",\n        \"injuryTime\": 64744574,\n        \"warnings\": true,\n        \"cautions\": -21978206,\n        \"legFouls\": 93943656,\n        \"activityTime\": false,\n        \"fighter1FullName\": \"eiusmod occaecat nulla minim\",\n        \"fighter1DisplayName\": \"elit id\",\n        \"fighter1FamilyName\": \"dolore Excepteur ut irure tempor\",\n        \"fighter1GivenName\": \"tempor sed eu\",\n        \"fighter1PreferedName\": \"id adipisicing\",\n        \"fighter1DrawRank\": \"culpa occaecat proident Ut enim\",\n        \"fighter1RobinRank\": \"in \",\n        \"fighter1SeedNumber\": -6666748,\n        \"fighter1AthleteId\": \"Lorem id aliquip ea\",\n        \"fighter1PersonId\": \"laboris non\",\n        \"fighter1AthenaId\": 26522117,\n        \"fighter1IsSeeded\": true,\n        \"fighter1Status\": -4916810,\n        \"fighter1IsInjured\": false,\n        \"fighter1Weight\": 91595554.45600006,\n        \"fighter2FullName\": \"in m\",\n        \"fighter2DisplayName\": \"aute quis\",\n        \"fighter2FamilyName\": \"eiusmod magna exercitation\",\n        \"fighter2GivenName\": \"quis Ut\",\n        \"fighter2PreferedName\": \"cillum in aute occaecat\",\n        \"fighter2DrawRank\": -15169747,\n        \"fighter2RobinRank\": -97015996,\n        \"fighter2SeedNumber\": 77825953,\n        \"fighter2AthleteId\": \"et proident dolore exercitation ea\",\n        \"fighter2PersonId\": \"incididunt Excepteur\",\n        \"fighter2IsSeeded\": true,\n        \"fighter2Status\": -73615510,\n        \"fighter2IsInjured\": true,\n        \"fighter2Weight\": -15375306.586732402,\n        \"result\": \"sint esse eiusmod\",\n        \"victoryType\": \"ali\",\n        \"endTime\": -94949712,\n        \"endDate\": \"1996-09-15T17:05:54.888Z\",\n        \"expectedDateStart\": \"2003-05-08T20:41:17.061Z\",\n        \"expectedStartDate\": \"2009-08-05T04:02:38.452Z\",\n        \"team1Fighters\": [\n          {\n            \"athleteId\": \"veniam\",\n            \"sportEventWeightCategoryId\": \"adipisicing incididunt occaecat nostrud nisi\",\n            \"weightCategoryFullName\": \"ut aliqua\",\n            \"weightCategoryShortName\": \"mollit fugiat culpa id\",\n            \"weightCategoryCountFights\": -18391478,\n            \"hasWeightCategoryBlockchainIds\": false,\n            \"weightCategoryCountReadyFighters\": -17023322,\n            \"countFights\": 12782088,\n            \"personId\": \"veniam nos\",\n            \"fullName\": \"minim enim dolore\",\n            \"preferedName\": \"quis ut sit ex\",\n            \"displayName\": \"occaecat magna\",\n            \"givenName\": \"con\",\n            \"familyName\": \"incididunt occaecat laborum commodo sed\",\n            \"personPhoto\": \"tempor Excepteur et dolore\",\n            \"athenaPrintId\": \"eu in dolor a\",\n            \"teamAlternateName\": \"sint aliqua pariatur ipsum est\",\n            \"teamName\": \"deserunt in aliquip amet dolore\",\n            \"teamCountryFlag\": \"exercitation proident\",\n            \"sportEventTeamId\": \"ullamco fugiat nulla nostrud\",\n            \"sportEventId\": \"minim cillum\",\n            \"drawRank\": -97712439,\n            \"robinGroup\": {\n              \"amete5_\": 2223400.8630375117,\n              \"velit7\": \"enim nisi\",\n              \"exercitation_5\": 3548796,\n              \"proident3\": true\n            },\n            \"robinGroupRank\": 34737091,\n            \"teamRankingPoint\": 29920450,\n            \"uwwPoint\": -54338214,\n            \"isFinalistBronze\": false,\n            \"isFinalistGold\": false,\n            \"isFinalist\": false,\n            \"knockOutStatus\": {\n              \"minim16c\": true\n            },\n            \"hasLostknockOut\": false,\n            \"completed\": 68719320,\n            \"wins\": 35180405,\n            \"losses\": -52504993,\n            \"technicalPointsFor\": 32545857,\n            \"technicalPointsAgainst\": 43039201,\n            \"technicalPointsDiff\": -51107438,\n            \"rankingPointsFor\": -85103462,\n            \"rankingPointsAgainst\": 26849177,\n            \"rankingPointsDiff\": 56228780,\n            \"winsEasy\": -68432426,\n            \"winsSuperiority\": -39916723,\n            \"rank\": -78319780,\n            \"rankRobinGroup\": 52470203,\n            \"fightByOpponent\": {\n              \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n            },\n            \"isCompeting\": false,\n            \"hasOpenFight\": false,\n            \"isDisqualified\": false,\n            \"isNotRanked\": false,\n            \"isInjured\": false,\n            \"isForfeit\": false,\n            \"isRobinGroupNotRanked\": false,\n            \"accreditationStatus\": 52180402,\n            \"id\": \"reprehenderit\",\n            \"sportEventWeightCategory\": \"laborum mollit id adipisicing tempor\",\n            \"weight\": 134,\n            \"drawNumber\": 49,\n            \"seedNumber\": 2,\n            \"fighterWeight\": \"exercitation eu non quis\",\n            \"points\": 308,\n            \"fighterStatus\": -91056839\n          },\n          {\n            \"athleteId\": \"culpa et\",\n            \"sportEventWeightCategoryId\": \"quis dolore\",\n            \"weightCategoryFullName\": \"elit amet q\",\n            \"weightCategoryShortName\": \"reprehenderit\",\n            \"weightCategoryCountFights\": 57560054,\n            \"hasWeightCategoryBlockchainIds\": true,\n            \"weightCategoryCountReadyFighters\": 30797730,\n            \"countFights\": -49983935,\n            \"personId\": \"aliquip proident exercitation\",\n            \"fullName\": \"minim sit\",\n            \"preferedName\": \"veniam\",\n            \"displayName\": \"dolore\",\n            \"givenName\": \"in culpa incididunt\",\n            \"familyName\": \"esse amet eiusmod do ut\",\n            \"personPhoto\": \"consectetur sunt labore quis\",\n            \"athenaPrintId\": \"voluptate nisi laboris amet\",\n            \"teamAlternateName\": \"nisi ea\",\n            \"teamName\": \"veniam ad sint\",\n            \"teamCountryFlag\": \"exercitation incididunt occae\",\n            \"sportEventTeamId\": \"Duis Lorem\",\n            \"sportEventId\": \"cupidatat d\",\n            \"drawRank\": -86271372,\n            \"robinGroup\": {\n              \"id_9\": 39700921,\n              \"reprehenderit32\": false,\n              \"irure7f1\": -62697938.852786005\n            },\n            \"robinGroupRank\": -63527581,\n            \"teamRankingPoint\": 26257065,\n            \"uwwPoint\": -94224237,\n            \"isFinalistBronze\": true,\n            \"isFinalistGold\": false,\n            \"isFinalist\": true,\n            \"knockOutStatus\": {\n              \"sed_b\": true,\n              \"ipsuma\": 75991122\n            },\n            \"hasLostknockOut\": true,\n            \"completed\": -85322088,\n            \"wins\": 8593843,\n            \"losses\": -39720127,\n            \"technicalPointsFor\": -24659005,\n            \"technicalPointsAgainst\": -49053051,\n            \"technicalPointsDiff\": -70685501,\n            \"rankingPointsFor\": -50282663,\n            \"rankingPointsAgainst\": -30117130,\n            \"rankingPointsDiff\": -67884081,\n            \"winsEasy\": -29813601,\n            \"winsSuperiority\": -22792994,\n            \"rank\": -40703945,\n            \"rankRobinGroup\": 14389726,\n            \"fightByOpponent\": {\n              \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n            },\n            \"isCompeting\": false,\n            \"hasOpenFight\": false,\n            \"isDisqualified\": true,\n            \"isNotRanked\": true,\n            \"isInjured\": false,\n            \"isForfeit\": false,\n            \"isRobinGroupNotRanked\": true,\n            \"accreditationStatus\": 76012248,\n            \"id\": \"aliq\",\n            \"sportEventWeightCategory\": \"non id irure minim\",\n            \"weight\": 179,\n            \"drawNumber\": 47,\n            \"seedNumber\": 20,\n            \"fighterWeight\": \"proident labore mollit in\",\n            \"points\": 113,\n            \"fighterStatus\": 66960488\n          }\n        ],\n        \"team2Fighters\": [\n          {\n            \"athleteId\": \"eu magna nostrud\",\n            \"sportEventWeightCategoryId\": \"cupidatat cillum in non\",\n            \"weightCategoryFullName\": \"amet minim incididunt\",\n            \"weightCategoryShortName\": \"ex anim\",\n            \"weightCategoryCountFights\": -24781253,\n            \"hasWeightCategoryBlockchainIds\": true,\n            \"weightCategoryCountReadyFighters\": -55319639,\n            \"countFights\": -93379369,\n            \"personId\": \"officia aute amet\",\n            \"fullName\": \"tempor\",\n            \"preferedName\": \"eiusmod ipsum dolore\",\n            \"displayName\": \"et ad aliquip sit\",\n            \"givenName\": \"laboris sint exercitati\",\n            \"familyName\": \"eu dolor sunt ex\",\n            \"personPhoto\": \"ea ullamco dolor pariatur Ut\",\n            \"athenaPrintId\": \"mag\",\n            \"teamAlternateName\": \"esse est exercitation ex\",\n            \"teamName\": \"ut incididunt consectetur\",\n            \"teamCountryFlag\": \"consectetur qui dolore\",\n            \"sportEventTeamId\": \"ea pariatur\",\n            \"sportEventId\": \"pariatur adipisicing aute\",\n            \"drawRank\": 92790697,\n            \"robinGroup\": {\n              \"nisi_cd5\": 21583327.000108764,\n              \"sed_e\": 76669158.0294658,\n              \"culpac\": 7232374.956681073\n            },\n            \"robinGroupRank\": 54940051,\n            \"teamRankingPoint\": -95797299,\n            \"uwwPoint\": 52976587,\n            \"isFinalistBronze\": false,\n            \"isFinalistGold\": true,\n            \"isFinalist\": false,\n            \"knockOutStatus\": {\n              \"tempor1\": -69455609.41667725,\n              \"sit3f\": false,\n              \"Duis9_1\": \"eu nostrud Excepteur culpa\"\n            },\n            \"hasLostknockOut\": false,\n            \"completed\": -31849684,\n            \"wins\": -67611273,\n            \"losses\": 80806473,\n            \"technicalPointsFor\": 74582154,\n            \"technicalPointsAgainst\": -48267731,\n            \"technicalPointsDiff\": 61989283,\n            \"rankingPointsFor\": -590712,\n            \"rankingPointsAgainst\": -97143404,\n            \"rankingPointsDiff\": -38961983,\n            \"winsEasy\": -65313921,\n            \"winsSuperiority\": 96034317,\n            \"rank\": -43932765,\n            \"rankRobinGroup\": 41583940,\n            \"fightByOpponent\": {\n              \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n            },\n            \"isCompeting\": true,\n            \"hasOpenFight\": false,\n            \"isDisqualified\": true,\n            \"isNotRanked\": true,\n            \"isInjured\": false,\n            \"isForfeit\": true,\n            \"isRobinGroupNotRanked\": true,\n            \"accreditationStatus\": -48279754,\n            \"id\": \"Lorem enim incididunt laboris\",\n            \"sportEventWeightCategory\": \"Lor\",\n            \"weight\": 351,\n            \"drawNumber\": 186,\n            \"seedNumber\": 17,\n            \"fighterWeight\": \"id\",\n            \"points\": 378,\n            \"fighterStatus\": -78961501\n          },\n          {\n            \"athleteId\": \"pariatur sit\",\n            \"sportEventWeightCategoryId\": \"et quis labore\",\n            \"weightCategoryFullName\": \"amet esse\",\n            \"weightCategoryShortName\": \"elit aliquip\",\n            \"weightCategoryCountFights\": -36133560,\n            \"hasWeightCategoryBlockchainIds\": false,\n            \"weightCategoryCountReadyFighters\": 38048694,\n            \"countFights\": -19526797,\n            \"personId\": \"qui\",\n            \"fullName\": \"nostrud dolore\",\n            \"preferedName\": \"commodo Ut amet\",\n            \"displayName\": \"ex dolor voluptate in ipsum\",\n            \"givenName\": \"deserunt minim\",\n            \"familyName\": \"qui cupidat\",\n            \"personPhoto\": \"ex ut eu tempor\",\n            \"athenaPrintId\": \"elit occaecat deserunt\",\n            \"teamAlternateName\": \"ut nostrud veniam ut eiusmod\",\n            \"teamName\": \"labor\",\n            \"teamCountryFlag\": \"ullamco est labore ad\",\n            \"sportEventTeamId\": \"voluptate sint\",\n            \"sportEventId\": \"tempor consectetur Lorem\",\n            \"drawRank\": 71621836,\n            \"robinGroup\": {\n              \"ina80\": 45758284\n            },\n            \"robinGroupRank\": 60095926,\n            \"teamRankingPoint\": 96475377,\n            \"uwwPoint\": 90565808,\n            \"isFinalistBronze\": false,\n            \"isFinalistGold\": true,\n            \"isFinalist\": false,\n            \"knockOutStatus\": {\n              \"Ut_8\": -70046025.68979093,\n              \"aliquip_feb\": 52132746,\n              \"ad4f5\": -2700741.166326642,\n              \"incididuntd7\": \"eiusmod\"\n            },\n            \"hasLostknockOut\": false,\n            \"completed\": 10856086,\n            \"wins\": 57216297,\n            \"losses\": -82955340,\n            \"technicalPointsFor\": 73905161,\n            \"technicalPointsAgainst\": 86627539,\n            \"technicalPointsDiff\": 61865777,\n            \"rankingPointsFor\": 36418891,\n            \"rankingPointsAgainst\": 79479915,\n            \"rankingPointsDiff\": -68081354,\n            \"winsEasy\": 6169762,\n            \"winsSuperiority\": 29795192,\n            \"rank\": 41568059,\n            \"rankRobinGroup\": -19078859,\n            \"fightByOpponent\": {\n              \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n            },\n            \"isCompeting\": true,\n            \"hasOpenFight\": false,\n            \"isDisqualified\": false,\n            \"isNotRanked\": true,\n            \"isInjured\": true,\n            \"isForfeit\": false,\n            \"isRobinGroupNotRanked\": true,\n            \"accreditationStatus\": 7455169,\n            \"id\": \"est Lorem culpa nisi in\",\n            \"sportEventWeightCategory\": \"ut consequat\",\n            \"weight\": 58,\n            \"drawNumber\": 21,\n            \"seedNumber\": 12,\n            \"fighterWeight\": \"proident in esse do\",\n            \"points\": 426,\n            \"fighterStatus\": -52230364\n          }\n        ],\n        \"rankingPointNiceName\": \"pariatur Ut\",\n        \"resultText\": \"in\",\n        \"resultTextSmall\": \"sit irure sunt fugiat culpa\",\n        \"roundRenamedSmall\": \"officia culpa ut\",\n        \"parentFightNumber1\": 33183368,\n        \"parentFightNumber2\": -5905905,\n        \"fightRefereesWithRole\": [\n          {\n            \"refereeId\": \"dolor consectetur\",\n            \"fightId\": \"laboris nisi eiusmod\",\n            \"refereeRole\": \"anim consequat qui id exercitation\",\n            \"refereeFullName\": \"quis non enim sint elit\",\n            \"refereeDisplayName\": \"mollit magna\",\n            \"refereeNumber\": -82705871,\n            \"refereeTeamAlternateName\": \"dolor do irure eiusmod reprehenderit\",\n            \"refereeCountryFlag\": \"reprehenderit proident\",\n            \"refereeFull\": \"laborum consequat\",\n            \"id\": \"deserunt magna cillum id\"\n          },\n          {\n            \"refereeId\": \"Duis veniam adipisicing in\",\n            \"fightId\": \"dolor elit esse\",\n            \"refereeRole\": \"et voluptate in ut\",\n            \"refereeFullName\": \"veniam qui\",\n            \"refereeDisplayName\": \"exercitation eu Excepteur tempor\",\n            \"refereeNumber\": 61048293,\n            \"refereeTeamAlternateName\": \"veniam est\",\n            \"refereeCountryFlag\": \"qui laboris laborum\",\n            \"refereeFull\": \"ipsum officia aute\",\n            \"id\": \"id deserunt aliqua laboris ip\"\n          }\n        ],\n        \"needsRefresh\": false,\n        \"isCountdown\": true,\n        \"branding\": \"consectetur irure\",\n        \"id\": \"in\",\n        \"parentFight1Id\": \"Ut mollit in\",\n        \"parentFight2Id\": \"culpa fugiat\",\n        \"fighter1\": \"est ex ut culpa incididunt\",\n        \"fighter1RankingPoint\": 2316,\n        \"fighter2\": \"cul\",\n        \"fighter2RankingPoint\": 5120,\n        \"refereeGroup\": \"s\",\n        \"sportEventTeam1Id\": \"in\",\n        \"sportEventTeam2Id\": \"sit dolore anim enim\",\n        \"fightMatId\": \"magna et\",\n        \"round\": \"eu esse nostrud\",\n        \"qualifying\": false,\n        \"teamFightId\": \"sed ut veniam\",\n        \"status\": 30145782,\n        \"rankingCheck\": true,\n        \"technicalCheck\": false,\n        \"weight\": 37655817,\n        \"fightNumber\": 7700,\n        \"roundWeight\": 7856,\n        \"repechageWeight\": 1969,\n        \"repechageSection\": 3644,\n        \"displayOrder\": 8430,\n        \"canceled\": \"1992-07-14T18:06:17.345Z\",\n        \"fightReferees\": [\n          {\n            \"refereeId\": \"culpa et\",\n            \"fightId\": \"ex Duis\",\n            \"refereeRole\": \"amet c\",\n            \"refereeFullName\": \"minim\",\n            \"refereeDisplayName\": \"irure cillum\",\n            \"refereeNumber\": 66178618,\n            \"refereeTeamAlternateName\": \"sunt aliqua veniam non\",\n            \"refereeCountryFlag\": \"es\",\n            \"refereeFull\": \"sunt dolore id\",\n            \"id\": \"ipsum ad aliquip iru\"\n          },\n          {\n            \"refereeId\": \"ipsum\",\n            \"fightId\": \"labore\",\n            \"refereeRole\": \"sunt ex reprehen\",\n            \"refereeFullName\": \"est\",\n            \"refereeDisplayName\": \"minim cupidatat sit et dolore\",\n            \"refereeNumber\": 88826625,\n            \"refereeTeamAlternateName\": \"pariatur laborum exercitation\",\n            \"refereeCountryFlag\": \"commodo ullamco pariatur in\",\n            \"refereeFull\": \"veniam\",\n            \"id\": \"dolore Excep\"\n          }\n        ],\n        \"odfCode\": \"non commodo qui irure\",\n        \"refereeComment\": \"voluptate dolore sit\",\n        \"uploaderFight\": {\n          \"quis_25\": \"enim esse\",\n          \"in_2\": 11071103.501746565\n        }\n      },\n      {\n        \"sportEventId\": \"qui enim ex\",\n        \"sportEventWeightCategoryId\": \"sint est mollit consectetur minim\",\n        \"fighter1Id\": \"labore adipisicing amet\",\n        \"fighter2Id\": \"nulla elit\",\n        \"fighter2AthenaId\": -55661392,\n        \"team1Name\": \"proident est\",\n        \"team1AlternateName\": \"non nostrud eu dolore occaecat\",\n        \"team1FullName\": \"Excepteur in dolor reprehenderit\",\n        \"team1CountryFlag\": \"proident sunt veniam sit\",\n        \"team1CountryFlagScoreboard\": \"voluptate ullamco in dolore\",\n        \"team1CountryFlagMobile\": \"mollit ex\",\n        \"team1PoolName\": \"ex ipsum in\",\n        \"team1FightByOpponent\": {\n          \"consequat__\": 86186723,\n          \"et_b\": -21968764,\n          \"elit05\": \"exercitation ut labore\"\n        },\n        \"team2Name\": \"anim nisi id\",\n        \"team2AlternateName\": \"dolore exer\",\n        \"team2FullName\": \"irure velit magna\",\n        \"team2CountryFlag\": \"id\",\n        \"team2CountryFlagScoreboard\": \"sint do exercitation\",\n        \"team2CountryFlagMobile\": \"reprehenderit eu ex sit\",\n        \"team2PoolName\": \"tempor non ut\",\n        \"team2FightByOpponent\": {\n          \"et8cd\": \"id consequat nulla non\",\n          \"id_\": -42107259\n        },\n        \"roundFriendlyName\": \"dolor Duis commodo ea\",\n        \"displayOrderInRound\": -59226167,\n        \"round1Id\": \"labore nisi sunt exercitation\",\n        \"round2Id\": \"sed in\",\n        \"countReferees\": -6921475,\n        \"sportId\": \"enim Lorem\",\n        \"athlete1Color\": \"u\",\n        \"athlete2Color\": \"occaecat Exce\",\n        \"athlete1TextColor\": \"incididunt a\",\n        \"athlete2TextColor\": \"fugiat nisi consequat dolor\",\n        \"matName\": \"elit dolor deserunt fugiat\",\n        \"sessionId\": \"velit ad in est\",\n        \"sessionName\": \"ullamco non\",\n        \"sessionStartDate\": \"1959-04-06T16:11:54.986Z\",\n        \"technicalPoints\": {\n          \"mollit8\": \"id aute irure amet\"\n        },\n        \"technicalPointsDetail\": {\n          \"commodoa\": -76966907,\n          \"fugiat1\": -92340898.58179377\n        },\n        \"technicalPointsTagStatus\": \"et dolor aute cupidatat\",\n        \"technicalPointIds\": {\n          \"velitd\": 63323506.66873422\n        },\n        \"cautionsList\": {\n          \"nostrudfe\": false\n        },\n        \"isCompleted\": false,\n        \"isReady\": true,\n        \"isRobinGroupFight\": false,\n        \"winnerFighter\": \"enim ad aliquip laboris\",\n        \"winnerTeam\": \"reprehenderit magna cupidatat anim occaecat\",\n        \"winnerTeamAlternateName\": \"elit\",\n        \"sportEventName\": \"ea in\",\n        \"sportEventStartDate\": \"1983-01-21T22:00:28.888Z\",\n        \"sportEventLogo\": \"reprehenderit\",\n        \"rankingPoint\": {\n          \"fightId\": \"dolor esse eiusmod pariatur\",\n          \"victoryType\": \"culpa\",\n          \"fighterId\": \"exercitation aliquip\",\n          \"fighterFullName\": \"dolor non\",\n          \"victoryTypeId\": \"culpa dolor\",\n          \"victoryTypeName\": \"laborum sunt Excepteur est\",\n          \"victoryTypeNiceName\": \"aliquip Excepteur ex\",\n          \"sportId\": \"labore eiusmod\",\n          \"sportEventId\": \"mollit enim consectetur officia\",\n          \"id\": \"Ut\",\n          \"fighter\": \"tempor cupidatat\",\n          \"second\": 36812\n        },\n        \"completedDate\": \"1995-08-30T18:48:01.967Z\",\n        \"roundsNumber\": -76139045,\n        \"roundDuration\": -91120074,\n        \"sportAlternateName\": \"ad\",\n        \"weightCategoryName\": \"incididunt\",\n        \"weightCategoryAlternateName\": \"laboris ipsum anim\",\n        \"weightCategoryShortName\": \"qu\",\n        \"weightCategoryMaxWeight\": 70335543,\n        \"weightCategoryFullName\": \"reprehenderit\",\n        \"isWeightCategoryVisible\": true,\n        \"weightCategoryAverageDuration\": -6067245,\n        \"weightCategoryColor\": \"eiusmod\",\n        \"weightCategoryReady\": false,\n        \"weightCategoryStarted\": true,\n        \"weightCategoryCompleted\": false,\n        \"victoryTypes\": {\n          \"adipisicing_4\": true,\n          \"incididunt_0e\": 79857535\n        },\n        \"victoryTypesArray\": {\n          \"et479\": -5288055.476042956,\n          \"Excepteur_5\": 10430952.162851349\n        },\n        \"audienceId\": \"veniam fugiat sed\",\n        \"audienceName\": \"incididunt velit ad fugiat\",\n        \"audienceShortName\": \"aliquip\",\n        \"sportName\": \"sunt laboris esse\",\n        \"injuryTime\": -39545276,\n        \"warnings\": false,\n        \"cautions\": 11564798,\n        \"legFouls\": 80099218,\n        \"activityTime\": false,\n        \"fighter1FullName\": \"Lorem Duis\",\n        \"fighter1DisplayName\": \"proident est dolor ad et\",\n        \"fighter1FamilyName\": \"et reprehenderit\",\n        \"fighter1GivenName\": \"do \",\n        \"fighter1PreferedName\": \"eu conse\",\n        \"fighter1DrawRank\": \"minim cupidatat enim anim\",\n        \"fighter1RobinRank\": \"qui \",\n        \"fighter1SeedNumber\": -41457574,\n        \"fighter1AthleteId\": \"in eiusmod officia\",\n        \"fighter1PersonId\": \"velit\",\n        \"fighter1AthenaId\": -89823885,\n        \"fighter1IsSeeded\": false,\n        \"fighter1Status\": 5827600,\n        \"fighter1IsInjured\": false,\n        \"fighter1Weight\": -96689240.92972068,\n        \"fighter2FullName\": \"non mollit\",\n        \"fighter2DisplayName\": \"in nisi in\",\n        \"fighter2FamilyName\": \"exe\",\n        \"fighter2GivenName\": \"veniam irure elit\",\n        \"fighter2PreferedName\": \"non Duis commodo officia quis\",\n        \"fighter2DrawRank\": -62062832,\n        \"fighter2RobinRank\": -66569764,\n        \"fighter2SeedNumber\": -22111917,\n        \"fighter2AthleteId\": \"deserunt officia sunt\",\n        \"fighter2PersonId\": \"Lorem ullamco\",\n        \"fighter2IsSeeded\": false,\n        \"fighter2Status\": 38299227,\n        \"fighter2IsInjured\": true,\n        \"fighter2Weight\": 58338046.664177865,\n        \"result\": \"ad proident\",\n        \"victoryType\": \"nostrud id velit labore ut\",\n        \"endTime\": -61497533,\n        \"endDate\": \"1954-04-22T05:46:49.366Z\",\n        \"expectedDateStart\": \"2007-06-28T12:11:15.805Z\",\n        \"expectedStartDate\": \"1975-04-02T20:55:26.304Z\",\n        \"team1Fighters\": [\n          {\n            \"athleteId\": \"mollit ut\",\n            \"sportEventWeightCategoryId\": \"eiusmod sunt\",\n            \"weightCategoryFullName\": \"adipisicing esse dolor\",\n            \"weightCategoryShortName\": \"dolore cillum proident exercitation\",\n            \"weightCategoryCountFights\": 23004089,\n            \"hasWeightCategoryBlockchainIds\": true,\n            \"weightCategoryCountReadyFighters\": 38009922,\n            \"countFights\": 84530869,\n            \"personId\": \"consequat\",\n            \"fullName\": \"ullamco nostrud\",\n            \"preferedName\": \"sed Lorem ut esse\",\n            \"displayName\": \"nisi pariatur aute anim\",\n            \"givenName\": \"elit enim qui\",\n            \"familyName\": \"anim qui\",\n            \"personPhoto\": \"Ut adipisicing\",\n            \"athenaPrintId\": \"officia Ut id sed Duis\",\n            \"teamAlternateName\": \"dolore cupidatat nulla\",\n            \"teamName\": \"elit occaecat voluptate ad\",\n            \"teamCountryFlag\": \"dolor\",\n            \"sportEventTeamId\": \"dolore exercitation\",\n            \"sportEventId\": \"enim dolor\",\n            \"drawRank\": 53305768,\n            \"robinGroup\": {\n              \"Excepteur_f\": true,\n              \"Duis_2\": -5268096.355301693\n            },\n            \"robinGroupRank\": -42673503,\n            \"teamRankingPoint\": -46812262,\n            \"uwwPoint\": 80943185,\n            \"isFinalistBronze\": true,\n            \"isFinalistGold\": false,\n            \"isFinalist\": true,\n            \"knockOutStatus\": {\n              \"eu9e\": -19771288,\n              \"labore_d98\": \"ut tempor culpa anim cupidatat\",\n              \"ine75\": -21866944.11697498\n            },\n            \"hasLostknockOut\": false,\n            \"completed\": 76663266,\n            \"wins\": -72318429,\n            \"losses\": -90817709,\n            \"technicalPointsFor\": -1102440,\n            \"technicalPointsAgainst\": 87992603,\n            \"technicalPointsDiff\": -33779429,\n            \"rankingPointsFor\": 68781213,\n            \"rankingPointsAgainst\": -5300729,\n            \"rankingPointsDiff\": 22757690,\n            \"winsEasy\": -27303991,\n            \"winsSuperiority\": 99464969,\n            \"rank\": 99147026,\n            \"rankRobinGroup\": 99265654,\n            \"fightByOpponent\": {\n              \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n            },\n            \"isCompeting\": false,\n            \"hasOpenFight\": false,\n            \"isDisqualified\": true,\n            \"isNotRanked\": false,\n            \"isInjured\": false,\n            \"isForfeit\": false,\n            \"isRobinGroupNotRanked\": true,\n            \"accreditationStatus\": 89656530,\n            \"id\": \"enim qui\",\n            \"sportEventWeightCategory\": \"m\",\n            \"weight\": 495,\n            \"drawNumber\": 161,\n            \"seedNumber\": 5,\n            \"fighterWeight\": \"Duis officia labore\",\n            \"points\": 331,\n            \"fighterStatus\": -39542563\n          },\n          {\n            \"athleteId\": \"magna\",\n            \"sportEventWeightCategoryId\": \"ex nostrud elit\",\n            \"weightCategoryFullName\": \"reprehenderit consequat dolor velit\",\n            \"weightCategoryShortName\": \"elit minim\",\n            \"weightCategoryCountFights\": 77674954,\n            \"hasWeightCategoryBlockchainIds\": true,\n            \"weightCategoryCountReadyFighters\": 79173042,\n            \"countFights\": 54279030,\n            \"personId\": \"pariatur Excepteur\",\n            \"fullName\": \"nulla id commodo\",\n            \"preferedName\": \"Duis\",\n            \"displayName\": \"ut Ut sit veniam\",\n            \"givenName\": \"exercitation\",\n            \"familyName\": \"culpa nostrud\",\n            \"personPhoto\": \"anim dolor esse\",\n            \"athenaPrintId\": \"sunt co\",\n            \"teamAlternateName\": \"cupidatat\",\n            \"teamName\": \"qui officia cupidatat \",\n            \"teamCountryFlag\": \"Ut eu aliquip anim\",\n            \"sportEventTeamId\": \"eu in laborum minim\",\n            \"sportEventId\": \"occaecat in\",\n            \"drawRank\": -63729302,\n            \"robinGroup\": {\n              \"elit_ed2\": -86870598.59489019,\n              \"consectetur8\": 55188576.40520793\n            },\n            \"robinGroupRank\": -98117649,\n            \"teamRankingPoint\": -4498895,\n            \"uwwPoint\": 85264558,\n            \"isFinalistBronze\": false,\n            \"isFinalistGold\": true,\n            \"isFinalist\": false,\n            \"knockOutStatus\": {\n              \"occaecat5\": \"eiusmod et mollit nostrud\",\n              \"cupidatatf\": 38056952.716695756,\n              \"pariatur_1\": true\n            },\n            \"hasLostknockOut\": true,\n            \"completed\": -91172545,\n            \"wins\": -28344669,\n            \"losses\": -46343580,\n            \"technicalPointsFor\": 9140102,\n            \"technicalPointsAgainst\": 36688991,\n            \"technicalPointsDiff\": 66433466,\n            \"rankingPointsFor\": 40252697,\n            \"rankingPointsAgainst\": -14228728,\n            \"rankingPointsDiff\": -30568765,\n            \"winsEasy\": -56332355,\n            \"winsSuperiority\": 5617050,\n            \"rank\": -17677099,\n            \"rankRobinGroup\": 36345885,\n            \"fightByOpponent\": {\n              \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n            },\n            \"isCompeting\": false,\n            \"hasOpenFight\": false,\n            \"isDisqualified\": false,\n            \"isNotRanked\": false,\n            \"isInjured\": false,\n            \"isForfeit\": false,\n            \"isRobinGroupNotRanked\": true,\n            \"accreditationStatus\": 56306086,\n            \"id\": \"pariatur tempor Excepteur volu\",\n            \"sportEventWeightCategory\": \"Excepteur am\",\n            \"weight\": 361,\n            \"drawNumber\": 239,\n            \"seedNumber\": 6,\n            \"fighterWeight\": \"anim laboris\",\n            \"points\": 181,\n            \"fighterStatus\": 28906344\n          }\n        ],\n        \"team2Fighters\": [\n          {\n            \"athleteId\": \"reprehenderit commodo Lorem ut\",\n            \"sportEventWeightCategoryId\": \"Duis fugiat in ad qui\",\n            \"weightCategoryFullName\": \"deserunt eiusmod veniam eu\",\n            \"weightCategoryShortName\": \"commodo sunt\",\n            \"weightCategoryCountFights\": -78504354,\n            \"hasWeightCategoryBlockchainIds\": false,\n            \"weightCategoryCountReadyFighters\": 29042001,\n            \"countFights\": 67905409,\n            \"personId\": \"do ullamco\",\n            \"fullName\": \"commodo Lorem laborum ull\",\n            \"preferedName\": \"adipisicing\",\n            \"displayName\": \"anim nisi consectetur sint Duis\",\n            \"givenName\": \"aliquip Duis laboris\",\n            \"familyName\": \"proident reprehenderit adipisicing id\",\n            \"personPhoto\": \"dolore\",\n            \"athenaPrintId\": \"amet minim cupidatat deserunt in\",\n            \"teamAlternateName\": \"culpa cupidatat dolore\",\n            \"teamName\": \"amet anim reprehenderit commodo\",\n            \"teamCountryFlag\": \"nostrud tempor pariatur reprehenderit\",\n            \"sportEventTeamId\": \"nostrud sit qui\",\n            \"sportEventId\": \"amet ex\",\n            \"drawRank\": -23676709,\n            \"robinGroup\": {\n              \"voluptate8e\": \"mollit adipisicing incididunt sunt\",\n              \"amet_4f\": \"adipisicing sunt sit id laboris\"\n            },\n            \"robinGroupRank\": -27630450,\n            \"teamRankingPoint\": -78997805,\n            \"uwwPoint\": -19353080,\n            \"isFinalistBronze\": true,\n            \"isFinalistGold\": true,\n            \"isFinalist\": true,\n            \"knockOutStatus\": {\n              \"Lorem_d\": true,\n              \"ut_5a3\": 33748393\n            },\n            \"hasLostknockOut\": false,\n            \"completed\": -93106868,\n            \"wins\": 32322278,\n            \"losses\": -60639046,\n            \"technicalPointsFor\": -28722042,\n            \"technicalPointsAgainst\": -37373679,\n            \"technicalPointsDiff\": -75707565,\n            \"rankingPointsFor\": 61582855,\n            \"rankingPointsAgainst\": 24962722,\n            \"rankingPointsDiff\": -34167267,\n            \"winsEasy\": 85224809,\n            \"winsSuperiority\": -68085668,\n            \"rank\": 65029634,\n            \"rankRobinGroup\": -59562635,\n            \"fightByOpponent\": {\n              \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n            },\n            \"isCompeting\": false,\n            \"hasOpenFight\": true,\n            \"isDisqualified\": true,\n            \"isNotRanked\": false,\n            \"isInjured\": false,\n            \"isForfeit\": true,\n            \"isRobinGroupNotRanked\": true,\n            \"accreditationStatus\": -44899683,\n            \"id\": \"ullamco quis consectetur mollit\",\n            \"sportEventWeightCategory\": \"officia eu\",\n            \"weight\": 100,\n            \"drawNumber\": 133,\n            \"seedNumber\": 9,\n            \"fighterWeight\": \"aliqua consequat nostrud ad\",\n            \"points\": 222,\n            \"fighterStatus\": 86029620\n          },\n          {\n            \"athleteId\": \"quis ci\",\n            \"sportEventWeightCategoryId\": \"Duis sit\",\n            \"weightCategoryFullName\": \"incididunt occaecat\",\n            \"weightCategoryShortName\": \"occaecat sed ut \",\n            \"weightCategoryCountFights\": -41776183,\n            \"hasWeightCategoryBlockchainIds\": false,\n            \"weightCategoryCountReadyFighters\": 40986323,\n            \"countFights\": -69916143,\n            \"personId\": \"incididunt velit adipisicing ad\",\n            \"fullName\": \"eu irure esse\",\n            \"preferedName\": \"aliquip magna proident \",\n            \"displayName\": \"tempor aliqua ad\",\n            \"givenName\": \"in et aute id la\",\n            \"familyName\": \"tempor est enim\",\n            \"personPhoto\": \"ipsum aliqua\",\n            \"athenaPrintId\": \"dolore dolore eiusmod\",\n            \"teamAlternateName\": \"cup\",\n            \"teamName\": \"Ut qui\",\n            \"teamCountryFlag\": \"exercitat\",\n            \"sportEventTeamId\": \"ex dolore qui cillum\",\n            \"sportEventId\": \"ad non est\",\n            \"drawRank\": -18922035,\n            \"robinGroup\": {\n              \"ea_ed\": 48564132,\n              \"ullamco81\": 69229697.39455867\n            },\n            \"robinGroupRank\": -59444775,\n            \"teamRankingPoint\": 62344412,\n            \"uwwPoint\": 32456662,\n            \"isFinalistBronze\": false,\n            \"isFinalistGold\": false,\n            \"isFinalist\": true,\n            \"knockOutStatus\": {\n              \"dolor9b1\": 53386694,\n              \"irure_03\": -239983,\n              \"exb2\": 50538156.08178991\n            },\n            \"hasLostknockOut\": false,\n            \"completed\": -88120187,\n            \"wins\": 61005026,\n            \"losses\": 81747954,\n            \"technicalPointsFor\": -25639764,\n            \"technicalPointsAgainst\": 89226906,\n            \"technicalPointsDiff\": -88363099,\n            \"rankingPointsFor\": 33764559,\n            \"rankingPointsAgainst\": 48593402,\n            \"rankingPointsDiff\": -60773666,\n            \"winsEasy\": 91857180,\n            \"winsSuperiority\": 20891281,\n            \"rank\": 18473708,\n            \"rankRobinGroup\": 60790136,\n            \"fightByOpponent\": {\n              \"value\": \"<Circular reference to #/components/schemas/Fight detected>\"\n            },\n            \"isCompeting\": false,\n            \"hasOpenFight\": true,\n            \"isDisqualified\": false,\n            \"isNotRanked\": false,\n            \"isInjured\": false,\n            \"isForfeit\": true,\n            \"isRobinGroupNotRanked\": true,\n            \"accreditationStatus\": 19502910,\n            \"id\": \"ad mollit\",\n            \"sportEventWeightCategory\": \"labore nulla\",\n            \"weight\": 470,\n            \"drawNumber\": 142,\n            \"seedNumber\": 22,\n            \"fighterWeight\": \"amet do irure\",\n            \"points\": 227,\n            \"fighterStatus\": -12636722\n          }\n        ],\n        \"rankingPointNiceName\": \"esse ut ex\",\n        \"resultText\": \"deserunt cupidatat anim\",\n        \"resultTextSmall\": \"pariatur\",\n        \"roundRenamedSmall\": \"consectetur consequat do ullamco\",\n        \"parentFightNumber1\": 21591645,\n        \"parentFightNumber2\": -48971835,\n        \"fightRefereesWithRole\": [\n          {\n            \"refereeId\": \"quis\",\n            \"fightId\": \"esse quis do\",\n            \"refereeRole\": \"velit est veniam\",\n            \"refereeFullName\": \"ea\",\n            \"refereeDisplayName\": \"quis cillum deserunt nulla cupidatat\",\n            \"refereeNumber\": -90994213,\n            \"refereeTeamAlternateName\": \"ut ad cupidatat\",\n            \"refereeCountryFlag\": \"laborum occaecat cupidatat cillum dolore\",\n            \"refereeFull\": \"dolor enim\",\n            \"id\": \"adipisicing ex nisi elit\"\n          },\n          {\n            \"refereeId\": \"do\",\n            \"fightId\": \"ut officia ut laborum\",\n            \"refereeRole\": \"n\",\n            \"refereeFullName\": \"laboris occaecat dolore non consequat\",\n            \"refereeDisplayName\": \"sunt in quis\",\n            \"refereeNumber\": 80987301,\n            \"refereeTeamAlternateName\": \"aute reprehenderit anim et ex\",\n            \"refereeCountryFlag\": \"sed commodo incididunt\",\n            \"refereeFull\": \"fugiat tempor\",\n            \"id\": \"adipisicing\"\n          }\n        ],\n        \"needsRefresh\": true,\n        \"isCountdown\": false,\n        \"branding\": \"dolore sed\",\n        \"id\": \"officia consectetur magna laborum\",\n        \"parentFight1Id\": \"velit magna eu laborum\",\n        \"parentFight2Id\": \"reprehenderit commodo incididunt aliqua\",\n        \"fighter1\": \"id in velit commodo\",\n        \"fighter1RankingPoint\": 6439,\n        \"fighter2\": \"ullamco amet\",\n        \"fighter2RankingPoint\": 4094,\n        \"refereeGroup\": \"c\",\n        \"sportEventTeam1Id\": \"tempor \",\n        \"sportEventTeam2Id\": \"Lorem\",\n        \"fightMatId\": \"dolore ea eiusmod\",\n        \"round\": \"amet non officia mollit\",\n        \"qualifying\": true,\n        \"teamFightId\": \"dolor et\",\n        \"status\": 6023090,\n        \"rankingCheck\": false,\n        \"technicalCheck\": true,\n        \"weight\": 93365462,\n        \"fightNumber\": 4303,\n        \"roundWeight\": 6272,\n        \"repechageWeight\": 2365,\n        \"repechageSection\": 5528,\n        \"displayOrder\": 8435,\n        \"canceled\": \"2007-07-05T15:53:58.653Z\",\n        \"fightReferees\": [\n          {\n            \"refereeId\": \"ad quis commodo Lorem Duis\",\n            \"fightId\": \"sint\",\n            \"refereeRole\": \"ut nulla in\",\n            \"refereeFullName\": \"velit occaecat\",\n            \"refereeDisplayName\": \"Excepteur nulla elit\",\n            \"refereeNumber\": 53403648,\n            \"refereeTeamAlternateName\": \"Excepteur sed voluptate esse\",\n            \"refereeCountryFlag\": \"eu deserunt Excepteur elit\",\n            \"refereeFull\": \"esse nulla consequat do\",\n            \"id\": \"ullamco ut\"\n          },\n          {\n            \"refereeId\": \"in dolor veli\",\n            \"fightId\": \"veniam proident\",\n            \"refereeRole\": \"nisi ea aliqua\",\n            \"refereeFullName\": \"est occaecat labore ut\",\n            \"refereeDisplayName\": \"irure pariatur Ut ipsum non\",\n            \"refereeNumber\": 47896608,\n            \"refereeTeamAlternateName\": \"et ut\",\n            \"refereeCountryFlag\": \"Duis magna\",\n            \"refereeFull\": \"esse id\",\n            \"id\": \"fugiat laborum esse ut\"\n          }\n        ],\n        \"odfCode\": \"labore\",\n        \"refereeComment\": \"do dolor\",\n        \"uploaderFight\": {\n          \"deserunt_8\": \"dolor do in nisi\",\n          \"Duis_f\": -55778770.2703604,\n          \"ullamco_68\": \"do deserunt occaecat\"\n        }\n      }\n    ]\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id/start-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														"get",
														":id",
														"start-list"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id/start-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-mat",
														"get",
														":id",
														"start-list"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get fight mats by session and mat name",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSession/name/:matName",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										":sportEventSession",
										"name",
										":matName"
									],
									"variable": [
										{
											"key": "sportEventSession",
											"value": "enim",
											"description": "(Required) "
										},
										{
											"key": "matName",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns a fightMat",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSession/name/:matName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSession",
												"name",
												":matName"
											],
											"variable": [
												{
													"key": "sportEventSession",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "matName",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"matName\": \"velit in ut nisi\",\n  \"sessionName\": \"officia Ut\",\n  \"id\": \"pariatur consectetur\",\n  \"sportEventMatId\": \"ut ad sed consectetur\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSession/name/:matName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSession",
												"name",
												":matName"
											],
											"variable": [
												{
													"key": "sportEventSession",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "matName",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSession/name/:matName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSession",
												"name",
												":matName"
											],
											"variable": [
												{
													"key": "sportEventSession",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "matName",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get fight mats (faster - no fights)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/list?filters=enim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										"list"
									],
									"query": [
										{
											"key": "filters",
											"value": "enim",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns fightMats",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/list?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"list"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"fightMats\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/list?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"list"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/list?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"list"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "fight-referee",
					"item": [
						{
							"name": "{fightId}",
							"item": [
								{
									"name": "Get fight referees",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId"
											],
											"variable": [
												{
													"key": "fightId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fighters",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fightReferees\": {\n    \"refereeId\": \"anim\",\n    \"fightId\": \"minim deserunt aliquip\",\n    \"refereeRole\": \"eu in dolo\",\n    \"refereeFullName\": \"quis ea sint Excepteur\",\n    \"refereeDisplayName\": \"culpa\",\n    \"refereeNumber\": 202334,\n    \"refereeTeamAlternateName\": \"in culpa eiusmod\",\n    \"refereeCountryFlag\": \"deserunt dolor sint\",\n    \"refereeFull\": \"officia pa\",\n    \"id\": \"irure magna exercitation\"\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add referee to a fight",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"refereeId\": \"ullamco exer\",\n  \"refereeRole\": \"nostrud et ut amet\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId"
											],
											"variable": [
												{
													"key": "fightId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get fight referees",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/role/:refereeRole",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId",
												"role",
												":refereeRole"
											],
											"variable": [
												{
													"key": "fightId",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "refereeRole",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fighters",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/role/:refereeRole",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														":fightId",
														"role",
														":refereeRole"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "refereeRole",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fightReferees\": {\n    \"refereeId\": \"anim\",\n    \"fightId\": \"minim deserunt aliquip\",\n    \"refereeRole\": \"eu in dolo\",\n    \"refereeFullName\": \"quis ea sint Excepteur\",\n    \"refereeDisplayName\": \"culpa\",\n    \"refereeNumber\": 202334,\n    \"refereeTeamAlternateName\": \"in culpa eiusmod\",\n    \"refereeCountryFlag\": \"deserunt dolor sint\",\n    \"refereeFull\": \"officia pa\",\n    \"id\": \"irure magna exercitation\"\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/role/:refereeRole",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														":fightId",
														"role",
														":refereeRole"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "refereeRole",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a fight referee with the referee's number",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"refereeId\": \"ullamco exer\",\n  \"refereeRole\": \"nostrud et ut amet\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/number",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId",
												"number"
											],
											"variable": [
												{
													"key": "fightId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/number",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														":fightId",
														"number"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/number",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														":fightId",
														"number"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/number",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														":fightId",
														"number"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/number",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														":fightId",
														"number"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "Get a fight referee",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fighters",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fightReferee\": {\n    \"refereeId\": \"aute\",\n    \"fightId\": \"culpa ullamco non Excepteur consequat\",\n    \"refereeRole\": \"aliquip\",\n    \"refereeFullName\": \"nisi enim in\",\n    \"refereeDisplayName\": \"occaecat nisi magna\",\n    \"refereeNumber\": -39439491,\n    \"refereeTeamAlternateName\": \"anim pariatur veniam esse\",\n    \"refereeCountryFlag\": \"labore\",\n    \"refereeFull\": \"occaecat pariatur\",\n    \"id\": \"de\"\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a fight referee",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"refereeId\": \"ullamco exer\",\n  \"refereeRole\": \"nostrud et ut amet\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a fight referee",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight-referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "mat",
					"item": [
						{
							"name": "{sportEventId}",
							"item": [
								{
									"name": "Get mats",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns filtered result on Mats",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"mats\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a mat",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"deserunt ullamco\",\n  \"streaming\": \"sint laborum Duis eiusmod\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "Get a mat",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns SportEventMat",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"mat\": {\n    \"name\": \"et eiusmod irure quis aliqua\",\n    \"sportEventId\": \"Duis dolore\",\n    \"id\": \"dolore \",\n    \"streaming\": \"deserunt in\"\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a mat",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"deserunt ullamco\",\n  \"streaming\": \"sint laborum Duis eiusmod\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a mat",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"mat",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "person",
					"item": [
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "Get a person",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns person",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"person",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"person\": {\n    \"preferedName\": \"ullamco Lorem ut\",\n    \"fullName\": \"in\",\n    \"photo\": \"Duis elit Lorem\",\n    \"id\": \"Ut eu ex culpa\",\n    \"familyName\": \"veniam occaecat amet elit\",\n    \"givenName\": \"amet laborum pariatur ad Lorem\",\n    \"displayName\": \"anim aute nostrud do\",\n    \"athenaPrintId\": 89621209,\n    \"customId\": \"qui Excepteur\",\n    \"odfCode\": \"Duis cillum anim\"\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"person",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"person",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a person",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"preferedName\": \"ullamco adipisicing ea\",\n  \"familyName\": \"ipsum irure eu veniam\",\n  \"givenName\": \"Lorem\",\n  \"displayName\": \"id consequat ut\",\n  \"athenaPrintId\": -1113660,\n  \"customId\": \"consectetur dolore\",\n  \"odfCode\": \"minim consequat\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"person",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"person",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"person",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"person",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a person",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"person",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"person",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"person",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get athletes",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id/athletes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id",
												"athletes"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns all athletes of a person",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id/athletes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"person",
														"get",
														":id",
														"athletes"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"person\": [\n    {\n      \"personId\": \"ullamco magn\",\n      \"sportEventId\": \"exercitation anim adipisicing\",\n      \"personFullName\": \"dolo\",\n      \"athenaPrintId\": \"sint tempor\",\n      \"personFamilyName\": \"non ut dolor\",\n      \"personGivenName\": \"culpa magna\",\n      \"personPhoto\": \"aute incididunt esse\",\n      \"teamFullName\": \"in\",\n      \"teamName\": \"cupidatat esse culpa laboris pariatur\",\n      \"teamAlternateName\": \"Excepteur in\",\n      \"teamCountryFlag\": \"laboris nostrud ullamco consectetur\",\n      \"teamCountryFlagMobile\": \"tempor anim amet\",\n      \"isCompeting\": false,\n      \"weightCategories\": [\n        {\n          \"name\": \"sed\",\n          \"audience\": \"nisi nulla laborum quis consequat\",\n          \"sport\": \"ipsum aliquip esse\",\n          \"minWeight\": 442,\n          \"maxWeight\": 29,\n          \"roundsNumber\": 3,\n          \"roundDuration\": 552,\n          \"overtime\": -80682430,\n          \"tournamentType\": \"veniam ex incididunt exercitation ea\",\n          \"sportEventId\": \"incididunt qui adipisicing\",\n          \"sportAlternateName\": \"tempor id\",\n          \"sportName\": \"aliqua Excepteur do adipisicing aliquip\",\n          \"fullName\": \"aliquip commodo\",\n          \"alternateName\": \"do occaecat nisi\",\n          \"shortName\": \"exercitation fugiat labore ut\",\n          \"sportId\": \"ullamco minim\",\n          \"audienceId\": \"m\",\n          \"audienceName\": \"adipisicing officia ipsum laborum laboris\",\n          \"isVeteran\": false,\n          \"audienceShortName\": \"qu\",\n          \"isSinglebracketTournament\": false,\n          \"isDoublebracketTournament\": true,\n          \"isRoundRobinTournament\": true,\n          \"isBeltWrestlingCategory\": false,\n          \"isAlyshTournament\": true,\n          \"isKazakhCategory\": true,\n          \"isPankrationCategory\": false,\n          \"isBeachWrestlingTournament\": false,\n          \"fightersIsReady\": [\n            {\n              \"athleteId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategoryId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryFullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryShortName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasWeightCategoryBlockchainIds\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountReadyFighters\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"countFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"preferedName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"displayName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"givenName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"familyName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personPhoto\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"athenaPrintId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamAlternateName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamCountryFlag\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventTeamId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroupRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamRankingPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"uwwPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistBronze\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistGold\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalist\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"knockOutStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasLostknockOut\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"completed\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"wins\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"losses\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsEasy\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsSuperiority\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankRobinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fightByOpponent\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isCompeting\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasOpenFight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isDisqualified\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isInjured\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isForfeit\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isRobinGroupNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"accreditationStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategory\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"seedNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterWeight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"points\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            },\n            {\n              \"athleteId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategoryId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryFullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryShortName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasWeightCategoryBlockchainIds\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountReadyFighters\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"countFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"preferedName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"displayName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"givenName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"familyName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personPhoto\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"athenaPrintId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamAlternateName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamCountryFlag\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventTeamId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroupRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamRankingPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"uwwPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistBronze\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistGold\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalist\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"knockOutStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasLostknockOut\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"completed\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"wins\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"losses\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsEasy\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsSuperiority\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankRobinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fightByOpponent\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isCompeting\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasOpenFight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isDisqualified\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isInjured\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isForfeit\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isRobinGroupNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"accreditationStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategory\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"seedNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterWeight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"points\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          ],\n          \"countReadyTeams\": 23673060,\n          \"countReadyFighters\": -59763107,\n          \"countReadySeededFighters\": 63265314,\n          \"countSeededFighters\": -84832011,\n          \"countFighters\": 16399449,\n          \"maxSeeds\": 18806953,\n          \"isRepechageSet\": false,\n          \"countTeams\": 89699567,\n          \"countFights\": 39277014,\n          \"countFightsLive\": -627056,\n          \"perfectNumber\": {\n            \"nisi540\": \"minim ipsum ut ad eu\",\n            \"in0_4\": 32238404.709595427,\n            \"dolor_0\": false\n          },\n          \"isCompleted\": true,\n          \"isStarted\": false,\n          \"isRobin\": false,\n          \"isRobinGrouped\": true,\n          \"id\": \"sit\",\n          \"averageDuration\": -98543781,\n          \"color\": \"mag\",\n          \"odfCode\": \"mollit in tempor aliquip\",\n          \"uwwRanking\": true,\n          \"blockchainIds\": {\n            \"id_5be\": -97041007.70571373\n          },\n          \"sessionStartDay\": 76385457,\n          \"matAssignment\": -91255438,\n          \"visible\": false,\n          \"fightersUpdated\": \"1995-10-05T20:08:06.551Z\",\n          \"athenaFinalized\": true\n        },\n        {\n          \"name\": \"eiusmod aliquip occa\",\n          \"audience\": \"en\",\n          \"sport\": \"voluptate\",\n          \"minWeight\": 283,\n          \"maxWeight\": 215,\n          \"roundsNumber\": 5,\n          \"roundDuration\": 6,\n          \"overtime\": -20181348,\n          \"tournamentType\": \"in mollit\",\n          \"sportEventId\": \"consequat veniam eiusmod qui\",\n          \"sportAlternateName\": \"pariatur\",\n          \"sportName\": \"veniam ea consequat commodo\",\n          \"fullName\": \"proident enim consequat in\",\n          \"alternateName\": \"occaecat labore\",\n          \"shortName\": \"Duis mollit sint amet\",\n          \"sportId\": \"eiusmod enim magna\",\n          \"audienceId\": \"in ullamco irure\",\n          \"audienceName\": \"dolore dolor do\",\n          \"isVeteran\": true,\n          \"audienceShortName\": \"dolore est dolor et\",\n          \"isSinglebracketTournament\": false,\n          \"isDoublebracketTournament\": true,\n          \"isRoundRobinTournament\": false,\n          \"isBeltWrestlingCategory\": true,\n          \"isAlyshTournament\": false,\n          \"isKazakhCategory\": false,\n          \"isPankrationCategory\": true,\n          \"isBeachWrestlingTournament\": true,\n          \"fightersIsReady\": [\n            {\n              \"athleteId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategoryId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryFullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryShortName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasWeightCategoryBlockchainIds\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountReadyFighters\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"countFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"preferedName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"displayName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"givenName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"familyName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personPhoto\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"athenaPrintId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamAlternateName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamCountryFlag\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventTeamId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroupRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamRankingPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"uwwPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistBronze\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistGold\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalist\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"knockOutStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasLostknockOut\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"completed\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"wins\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"losses\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsEasy\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsSuperiority\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankRobinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fightByOpponent\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isCompeting\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasOpenFight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isDisqualified\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isInjured\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isForfeit\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isRobinGroupNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"accreditationStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategory\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"seedNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterWeight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"points\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            },\n            {\n              \"athleteId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategoryId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryFullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryShortName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasWeightCategoryBlockchainIds\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountReadyFighters\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"countFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"preferedName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"displayName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"givenName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"familyName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personPhoto\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"athenaPrintId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamAlternateName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamCountryFlag\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventTeamId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroupRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamRankingPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"uwwPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistBronze\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistGold\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalist\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"knockOutStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasLostknockOut\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"completed\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"wins\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"losses\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsEasy\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsSuperiority\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankRobinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fightByOpponent\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isCompeting\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasOpenFight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isDisqualified\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isInjured\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isForfeit\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isRobinGroupNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"accreditationStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategory\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"seedNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterWeight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"points\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          ],\n          \"countReadyTeams\": -49446972,\n          \"countReadyFighters\": 24984205,\n          \"countReadySeededFighters\": -88929955,\n          \"countSeededFighters\": 50554198,\n          \"countFighters\": 94663417,\n          \"maxSeeds\": -42211140,\n          \"isRepechageSet\": true,\n          \"countTeams\": 94375255,\n          \"countFights\": 87865830,\n          \"countFightsLive\": 67405484,\n          \"perfectNumber\": {\n            \"Lorem_236\": 96536376.5220832,\n            \"proident_4\": true\n          },\n          \"isCompleted\": false,\n          \"isStarted\": false,\n          \"isRobin\": false,\n          \"isRobinGrouped\": false,\n          \"id\": \"dolore ut labo\",\n          \"averageDuration\": 24814718,\n          \"color\": \"do\",\n          \"odfCode\": \"voluptate sunt aute\",\n          \"uwwRanking\": true,\n          \"blockchainIds\": {\n            \"ad_4\": \"eiusmod laborum\"\n          },\n          \"sessionStartDay\": 78653758,\n          \"matAssignment\": 14838705,\n          \"visible\": false,\n          \"fightersUpdated\": \"1994-12-31T01:12:57.018Z\",\n          \"athenaFinalized\": false\n        }\n      ],\n      \"id\": \"amet in Duis ad Excepteur\",\n      \"sportEventTeamId\": \"sed eiusmod amet nisi pariatur\",\n      \"disqualified\": false,\n      \"accreditationStatus\": -49187018\n    },\n    {\n      \"personId\": \"est quis consequat\",\n      \"sportEventId\": \"enim ut\",\n      \"personFullName\": \"dolor laborum\",\n      \"athenaPrintId\": \"nostrud\",\n      \"personFamilyName\": \"magna est adipisicing r\",\n      \"personGivenName\": \"esse deserunt aute magna minim\",\n      \"personPhoto\": \"et velit quis in\",\n      \"teamFullName\": \"minim\",\n      \"teamName\": \"Lorem\",\n      \"teamAlternateName\": \"aliquip reprehenderit et\",\n      \"teamCountryFlag\": \"exercitation sint fugiat labore\",\n      \"teamCountryFlagMobile\": \"do veniam quis\",\n      \"isCompeting\": true,\n      \"weightCategories\": [\n        {\n          \"name\": \"voluptate in dolore\",\n          \"audience\": \"id\",\n          \"sport\": \"quis Excepteur\",\n          \"minWeight\": 173,\n          \"maxWeight\": 372,\n          \"roundsNumber\": 5,\n          \"roundDuration\": 523,\n          \"overtime\": -13778501,\n          \"tournamentType\": \"aliquip ipsum\",\n          \"sportEventId\": \"mollit occ\",\n          \"sportAlternateName\": \"mollit in\",\n          \"sportName\": \"consequat proident ipsum\",\n          \"fullName\": \"minim nulla\",\n          \"alternateName\": \"enim Lorem\",\n          \"shortName\": \"quis nulla ad\",\n          \"sportId\": \"ad cillum\",\n          \"audienceId\": \"do officia\",\n          \"audienceName\": \"fugiat eiusmod sint proident\",\n          \"isVeteran\": false,\n          \"audienceShortName\": \"cupidatat\",\n          \"isSinglebracketTournament\": true,\n          \"isDoublebracketTournament\": true,\n          \"isRoundRobinTournament\": true,\n          \"isBeltWrestlingCategory\": false,\n          \"isAlyshTournament\": true,\n          \"isKazakhCategory\": true,\n          \"isPankrationCategory\": true,\n          \"isBeachWrestlingTournament\": false,\n          \"fightersIsReady\": [\n            {\n              \"athleteId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategoryId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryFullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryShortName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasWeightCategoryBlockchainIds\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountReadyFighters\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"countFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"preferedName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"displayName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"givenName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"familyName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personPhoto\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"athenaPrintId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamAlternateName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamCountryFlag\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventTeamId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroupRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamRankingPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"uwwPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistBronze\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistGold\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalist\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"knockOutStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasLostknockOut\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"completed\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"wins\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"losses\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsEasy\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsSuperiority\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankRobinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fightByOpponent\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isCompeting\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasOpenFight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isDisqualified\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isInjured\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isForfeit\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isRobinGroupNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"accreditationStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategory\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"seedNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterWeight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"points\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            },\n            {\n              \"athleteId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategoryId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryFullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryShortName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasWeightCategoryBlockchainIds\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountReadyFighters\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"countFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"preferedName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"displayName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"givenName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"familyName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personPhoto\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"athenaPrintId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamAlternateName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamCountryFlag\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventTeamId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroupRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamRankingPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"uwwPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistBronze\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistGold\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalist\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"knockOutStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasLostknockOut\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"completed\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"wins\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"losses\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsEasy\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsSuperiority\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankRobinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fightByOpponent\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isCompeting\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasOpenFight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isDisqualified\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isInjured\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isForfeit\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isRobinGroupNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"accreditationStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategory\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"seedNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterWeight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"points\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          ],\n          \"countReadyTeams\": -66311081,\n          \"countReadyFighters\": -91928027,\n          \"countReadySeededFighters\": 90283656,\n          \"countSeededFighters\": 15730149,\n          \"countFighters\": 310053,\n          \"maxSeeds\": 18390310,\n          \"isRepechageSet\": false,\n          \"countTeams\": -98525668,\n          \"countFights\": -38690661,\n          \"countFightsLive\": 65968998,\n          \"perfectNumber\": {\n            \"nostrud9e6\": 62805750,\n            \"eac7\": 82345108.98881084\n          },\n          \"isCompleted\": true,\n          \"isStarted\": true,\n          \"isRobin\": true,\n          \"isRobinGrouped\": true,\n          \"id\": \"laboris\",\n          \"averageDuration\": -73835539,\n          \"color\": \"l\",\n          \"odfCode\": \"cupidatat aute\",\n          \"uwwRanking\": true,\n          \"blockchainIds\": {\n            \"in_148\": false,\n            \"in5\": 52131641.80692834\n          },\n          \"sessionStartDay\": 76103619,\n          \"matAssignment\": 82770932,\n          \"visible\": false,\n          \"fightersUpdated\": \"2003-08-15T13:50:11.472Z\",\n          \"athenaFinalized\": true\n        },\n        {\n          \"name\": \"dolor culpa sint\",\n          \"audience\": \"ut ex eu Excepteur\",\n          \"sport\": \"ipsum Lorem\",\n          \"minWeight\": 371,\n          \"maxWeight\": 305,\n          \"roundsNumber\": 3,\n          \"roundDuration\": 79,\n          \"overtime\": 75622801,\n          \"tournamentType\": \"Lorem occaecat\",\n          \"sportEventId\": \"anim ullamco officia labore\",\n          \"sportAlternateName\": \"elit tempor\",\n          \"sportName\": \"minim sint\",\n          \"fullName\": \"dolore dolor\",\n          \"alternateName\": \"aute cupidatat ut\",\n          \"shortName\": \"esse sunt\",\n          \"sportId\": \"Excepteur veniam sunt nostrud\",\n          \"audienceId\": \"exercitation dolore velit\",\n          \"audienceName\": \"culpa et cillum dolor\",\n          \"isVeteran\": true,\n          \"audienceShortName\": \"proident ut velit in ex\",\n          \"isSinglebracketTournament\": true,\n          \"isDoublebracketTournament\": true,\n          \"isRoundRobinTournament\": true,\n          \"isBeltWrestlingCategory\": false,\n          \"isAlyshTournament\": true,\n          \"isKazakhCategory\": false,\n          \"isPankrationCategory\": false,\n          \"isBeachWrestlingTournament\": true,\n          \"fightersIsReady\": [\n            {\n              \"athleteId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategoryId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryFullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryShortName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasWeightCategoryBlockchainIds\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountReadyFighters\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"countFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"preferedName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"displayName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"givenName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"familyName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personPhoto\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"athenaPrintId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamAlternateName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamCountryFlag\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventTeamId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroupRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamRankingPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"uwwPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistBronze\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistGold\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalist\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"knockOutStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasLostknockOut\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"completed\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"wins\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"losses\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsEasy\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsSuperiority\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankRobinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fightByOpponent\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isCompeting\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasOpenFight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isDisqualified\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isInjured\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isForfeit\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isRobinGroupNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"accreditationStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategory\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"seedNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterWeight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"points\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            },\n            {\n              \"athleteId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategoryId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryFullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryShortName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasWeightCategoryBlockchainIds\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weightCategoryCountReadyFighters\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"countFights\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fullName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"preferedName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"displayName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"givenName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"familyName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"personPhoto\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"athenaPrintId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamAlternateName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamCountryFlag\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventTeamId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"robinGroupRank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"teamRankingPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"uwwPoint\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistBronze\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalistGold\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isFinalist\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"knockOutStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasLostknockOut\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"completed\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"wins\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"losses\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"technicalPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsFor\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsAgainst\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankingPointsDiff\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsEasy\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"winsSuperiority\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rank\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"rankRobinGroup\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fightByOpponent\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isCompeting\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"hasOpenFight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isDisqualified\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isInjured\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isForfeit\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"isRobinGroupNotRanked\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"accreditationStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"sportEventWeightCategory\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"weight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"drawNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"seedNumber\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterWeight\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"points\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"fighterStatus\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          ],\n          \"countReadyTeams\": -39708164,\n          \"countReadyFighters\": 16544515,\n          \"countReadySeededFighters\": -74770014,\n          \"countSeededFighters\": 97449849,\n          \"countFighters\": 18929173,\n          \"maxSeeds\": 43720564,\n          \"isRepechageSet\": true,\n          \"countTeams\": -29074460,\n          \"countFights\": -60666869,\n          \"countFightsLive\": -62429611,\n          \"perfectNumber\": {\n            \"esse6\": 58756526.69126755\n          },\n          \"isCompleted\": true,\n          \"isStarted\": false,\n          \"isRobin\": false,\n          \"isRobinGrouped\": false,\n          \"id\": \"sunt anim magna ullamco non\",\n          \"averageDuration\": -67937173,\n          \"color\": \"ut n\",\n          \"odfCode\": \"eiusmod do dolor est\",\n          \"uwwRanking\": false,\n          \"blockchainIds\": {\n            \"aliquip0c_\": \"quis laborum velit voluptate\",\n            \"incididuntb\": false\n          },\n          \"sessionStartDay\": -26601078,\n          \"matAssignment\": 78508813,\n          \"visible\": true,\n          \"fightersUpdated\": \"1972-05-01T18:09:36.868Z\",\n          \"athenaFinalized\": false\n        }\n      ],\n      \"id\": \"do\",\n      \"sportEventTeamId\": \"id in magna et\",\n      \"disqualified\": false,\n      \"accreditationStatus\": 31361353\n    }\n  ]\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id/athletes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"person",
														"get",
														":id",
														"athletes"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id/athletes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"person",
														"get",
														":id",
														"athletes"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get people",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/?filters=enim&start=72586250.56946471&limit=72586250.56946471&paginate=true&page=72586250.56946471",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "enim",
											"description": "Filter parameters"
										},
										{
											"key": "start",
											"value": "72586250.56946471",
											"description": "Range start"
										},
										{
											"key": "limit",
											"value": "72586250.56946471",
											"description": "Number of records to return"
										},
										{
											"key": "paginate",
											"value": "true",
											"description": "Use pagination"
										},
										{
											"key": "page",
											"value": "72586250.56946471",
											"description": "Page number"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns people",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/?filters=enim&start=72586250.56946471&limit=72586250.56946471&paginate=true&page=72586250.56946471",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												},
												{
													"key": "start",
													"value": "72586250.56946471"
												},
												{
													"key": "limit",
													"value": "72586250.56946471"
												},
												{
													"key": "paginate",
													"value": "true"
												},
												{
													"key": "page",
													"value": "72586250.56946471"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"people\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/?filters=enim&start=72586250.56946471&limit=72586250.56946471&paginate=true&page=72586250.56946471",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												},
												{
													"key": "start",
													"value": "72586250.56946471"
												},
												{
													"key": "limit",
													"value": "72586250.56946471"
												},
												{
													"key": "paginate",
													"value": "true"
												},
												{
													"key": "page",
													"value": "72586250.56946471"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a person",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"preferedName\": \"ullamco adipisicing ea\",\n  \"familyName\": \"ipsum irure eu veniam\",\n  \"givenName\": \"Lorem\",\n  \"displayName\": \"id consequat ut\",\n  \"athenaPrintId\": -1113660,\n  \"customId\": \"consectetur dolore\",\n  \"odfCode\": \"minim consequat\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Count people",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/count?filters=enim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										"count"
									],
									"query": [
										{
											"key": "filters",
											"value": "enim",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns people count",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/count?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"count"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"count\": -23095292.502610132\n}"
								}
							]
						},
						{
							"name": "Get a person by ODF code",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/odf/get/:odfCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										"odf",
										"get",
										":odfCode"
									],
									"variable": [
										{
											"key": "odfCode",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns person",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/odf/get/:odfCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"odf",
												"get",
												":odfCode"
											],
											"variable": [
												{
													"key": "odfCode",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"preferedName\": \"pariatur cillum\",\n  \"fullName\": \"do fugiat qui\",\n  \"photo\": \"velit in\",\n  \"id\": \"fugiat sunt nostrud veniam\",\n  \"familyName\": \"adipisicing mollit\",\n  \"givenName\": \"commodo proident incididunt\",\n  \"displayName\": \"id voluptate\",\n  \"athenaPrintId\": 67855939,\n  \"customId\": \"amet fugiat ipsum ut dolore\",\n  \"odfCode\": \"Lorem nisi labore qui\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/odf/get/:odfCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"odf",
												"get",
												":odfCode"
											],
											"variable": [
												{
													"key": "odfCode",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/odf/get/:odfCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"odf",
												"get",
												":odfCode"
											],
											"variable": [
												{
													"key": "odfCode",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get UWW rank by Athena ID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/athena/:athenaId/{{type}}-ranking/:audience/:sport/:maxWeight",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										"athena",
										":athenaId",
										"{{type}}-ranking",
										":audience",
										":sport",
										":maxWeight"
									],
									"variable": [
										{
											"key": "athenaId",
											"value": "enim",
											"description": "(Required) "
										},
										{
											"key": "audience",
											"value": "enim",
											"description": "(Required) "
										},
										{
											"key": "sport",
											"value": "enim",
											"description": "(Required) "
										},
										{
											"key": "maxWeight",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns all athletes of a person",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/athena/:athenaId/{{type}}-ranking/:audience/:sport/:maxWeight",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"athena",
												":athenaId",
												"{{type}}-ranking",
												":audience",
												":sport",
												":maxWeight"
											],
											"variable": [
												{
													"key": "athenaId",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "audience",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "sport",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "maxWeight",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/athena/:athenaId/{{type}}-ranking/:audience/:sport/:maxWeight",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"athena",
												":athenaId",
												"{{type}}-ranking",
												":audience",
												":sport",
												":maxWeight"
											],
											"variable": [
												{
													"key": "athenaId",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "audience",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "sport",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "maxWeight",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/athena/:athenaId/{{type}}-ranking/:audience/:sport/:maxWeight",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"athena",
												":athenaId",
												"{{type}}-ranking",
												":audience",
												":sport",
												":maxWeight"
											],
											"variable": [
												{
													"key": "athenaId",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "audience",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "sport",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "maxWeight",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "ranking-point",
					"item": [
						{
							"name": "{fightId}",
							"item": [
								{
									"name": "Get fight ranking points",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												":fightId"
											],
											"variable": [
												{
													"key": "fightId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fight ranking points",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fightRankingPoints\": {\n    \"fightId\": \"in laborum do eu velit\",\n    \"victoryType\": \"voluptate et\",\n    \"fighterId\": \"non\",\n    \"fighterFullName\": \"incididunt veniam Lorem laborum\",\n    \"victoryTypeId\": \"reprehenderit ullamco irure laborum\",\n    \"victoryTypeName\": \"eu ullamco Duis nostrud\",\n    \"victoryTypeNiceName\": \"anim amet\",\n    \"sportId\": \"ut et\",\n    \"sportEventId\": \"amet incididunt\",\n    \"id\": \"Duis ea ullamco officia\",\n    \"fighter\": \"voluptate laboris est ut irure\",\n    \"second\": 44089\n  },\n  \"sportEvent\": \"ipsum eiusmod in\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a fight ranking point",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"victoryType\": \"cillum eu aute\",\n  \"fighter\": \"aliquip cillum labore eiusmod minim\",\n  \"second\": 64638\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId?checked=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												":fightId"
											],
											"query": [
												{
													"key": "checked",
													"value": "true",
													"description": "Checked or not"
												}
											],
											"variable": [
												{
													"key": "fightId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns the current ranking point (if already set)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId?checked=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														":fightId"
													],
													"query": [
														{
															"key": "checked",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fightId\": \"ullamco consectetur eiusmod Duis\",\n  \"victoryType\": \"id\",\n  \"fighterId\": \"adipisicing cupidatat esse commodo ipsum\",\n  \"fighterFullName\": \"ullamco reprehenderit laborum occaecat\",\n  \"victoryTypeId\": \"aliquip\",\n  \"victoryTypeName\": \"esse amet\",\n  \"victoryTypeNiceName\": \"non esse\",\n  \"sportId\": \"ad dolor ea Excepteur\",\n  \"sportEventId\": \"Excepteur nulla\",\n  \"id\": \"velit\",\n  \"fighter\": \"reprehenderit consectet\",\n  \"second\": 80986\n}"
										},
										{
											"name": "Returned when create successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId?checked=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														":fightId"
													],
													"query": [
														{
															"key": "checked",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId?checked=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														":fightId"
													],
													"query": [
														{
															"key": "checked",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId?checked=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														":fightId"
													],
													"query": [
														{
															"key": "checked",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId?checked=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														":fightId"
													],
													"query": [
														{
															"key": "checked",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "Get a fight ranking point",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a fightRankingPoint",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fightRankingPoint\": {\n    \"fightId\": \"sunt com\",\n    \"victoryType\": \"laboris do sint consectet\",\n    \"fighterId\": \"nulla\",\n    \"fighterFullName\": \"ut Duis enim laborum\",\n    \"victoryTypeId\": \"ad consequat consectetur\",\n    \"victoryTypeName\": \"aliqua commodo ea\",\n    \"victoryTypeNiceName\": \"reprehenderit dolor nulla occaecat\",\n    \"sportId\": \"dolore velit consequat\",\n    \"sportEventId\": \"in nisi dolo\",\n    \"id\": \"et velit do\",\n    \"fighter\": \"id mollit irure\",\n    \"second\": 62170\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a fight ranking point",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"victoryType\": \"cillum eu aute\",\n  \"fighter\": \"aliquip cillum labore eiusmod minim\",\n  \"second\": 64638\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when update successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a fight ranking point",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when create successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"ranking-point",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "referee",
					"item": [
						{
							"name": "{sportEventId}",
							"item": [
								{
									"name": "draw",
									"item": [
										{
											"name": "Get referee numbers remaining",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId",
														"draw",
														""
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Remaining numbers for draw",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"referee",
																":sportEventId",
																"draw",
																""
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"numbers\": [\n    2127727,\n    44094626\n  ]\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"referee",
																":sportEventId",
																"draw",
																""
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"referee",
																":sportEventId",
																"draw",
																""
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get referee numbers remaining",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/:refereeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId",
														"draw",
														":refereeId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "refereeId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Remaining numbers for draw",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/:refereeId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"referee",
																":sportEventId",
																"draw",
																":refereeId"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "refereeId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"numbers\": [\n    2127727,\n    44094626\n  ]\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/:refereeId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"referee",
																":sportEventId",
																"draw",
																":refereeId"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "refereeId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/:refereeId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"referee",
																":sportEventId",
																"draw",
																":refereeId"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "refereeId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get referees",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns referees",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"referees\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a referee",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personId\": \"labore nisi laboris voluptate\",\n  \"sportEventTeamId\": \"veniam aute eiusmod in\",\n  \"number\": 7116,\n  \"refereeLevel\": \"amet sit cupidatat et\",\n  \"delegate\": true,\n  \"matchairman\": true,\n  \"referee\": false,\n  \"preferedStyle\": {\n    \"labore67\": false\n  },\n  \"deactivated\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Rotate referees across mats",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/rotatemat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId",
												"rotatemat"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/rotatemat",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId",
														"rotatemat"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/rotatemat",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId",
														"rotatemat"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/rotatemat",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId",
														"rotatemat"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get referee numbers remaining",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/print?matId=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId",
												"print"
											],
											"query": [
												{
													"key": "matId",
													"value": "enim",
													"description": "Filter for Mat if provided"
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/print?matId=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId",
														"print"
													],
													"query": [
														{
															"key": "matId",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/print?matId=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId",
														"print"
													],
													"query": [
														{
															"key": "matId",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/print?matId=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId",
														"print"
													],
													"query": [
														{
															"key": "matId",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "team",
									"item": [
										{
											"name": "Set a sport team",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sportEventTeamId\": \"dolore fugiat mollit\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id",
														"team"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sportEventTeamId\": \"dolore fugiat mollit\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"referee",
																"get",
																":id",
																"team"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when invalid parameters are submitted",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sportEventTeamId\": \"dolore fugiat mollit\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"referee",
																"get",
																":id",
																"team"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sportEventTeamId\": \"dolore fugiat mollit\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"referee",
																"get",
																":id",
																"team"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sportEventTeamId\": \"dolore fugiat mollit\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"referee",
																"get",
																":id",
																"team"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Remove sport team",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team/unset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id",
														"team",
														"unset"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team/unset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"referee",
																"get",
																":id",
																"team",
																"unset"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team/unset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"referee",
																"get",
																":id",
																"team",
																"unset"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team/unset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"referee",
																"get",
																":id",
																"team",
																"unset"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get a referee",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a referee",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"referee\": {\n    \"sportEventId\": \"ut esse aliqua in\",\n    \"personId\": \"sit aliqua ullamco officia\",\n    \"sportEventTeamId\": \"incididunt do\",\n    \"matName\": \"officia voluptate\",\n    \"origins\": {\n      \"qui_7d\": false\n    },\n    \"languages\": {\n      \"sunt_7b9\": true,\n      \"nostrud__\": \"magna ull\"\n    },\n    \"familyName\": \"id proident\",\n    \"givenName\": \"est commodo labore nostrud\",\n    \"fullName\": \"ullamco ut commodo\",\n    \"displayName\": \"voluptate irure\",\n    \"teamFullName\": \"sed\",\n    \"teamName\": \"commodo veniam et sint\",\n    \"teamAlternateName\": \"Ut sint aliquip sunt\",\n    \"teamCountryFlag\": \"dolore quis in sunt\",\n    \"full\": \"quis culpa tempor\",\n    \"id\": \"cillum Excepteur dolor minim\",\n    \"number\": 3293,\n    \"refereeLevel\": \"laborum aliqua voluptate\",\n    \"refereeGroup\": \"o\",\n    \"delegate\": true,\n    \"matchairman\": true,\n    \"referee\": true,\n    \"preferedStyle\": {\n      \"culpa2\": -225952,\n      \"reprehenderit7d_\": \"occaecat deserunt eiusmod ullamco\"\n    },\n    \"sportEventMatId\": \"in sunt et nostrud\",\n    \"deactivated\": false\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a referee",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"personId\": \"labore nisi laboris voluptate\",\n  \"sportEventTeamId\": \"veniam aute eiusmod in\",\n  \"number\": 7116,\n  \"refereeLevel\": \"amet sit cupidatat et\",\n  \"delegate\": true,\n  \"matchairman\": true,\n  \"referee\": false,\n  \"preferedStyle\": {\n    \"labore67\": false\n  },\n  \"deactivated\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a referee",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when entity has already been linked to other entities, thus can't be deleted",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Set Mat for referee",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"matId\": \"el\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/mat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id",
												"mat"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns SportEventMat",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"matId\": \"el\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/mat",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id",
														"mat"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"name\": \"ad sunt\",\n  \"sportEventId\": \"anim ullamco laborum ut nisi\",\n  \"id\": \"culpa in sit\",\n  \"streaming\": \"exercitation do tempor ullamco\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"matId\": \"el\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/mat",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id",
														"mat"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"matId\": \"el\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/mat",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id",
														"mat"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get a referee by Competition and Person",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEvent/get/:person",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"referee",
										":sportEvent",
										"get",
										":person"
									],
									"variable": [
										{
											"key": "sportEvent",
											"value": "enim",
											"description": "(Required) "
										},
										{
											"key": "person",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns a referee",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEvent/get/:person",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEvent",
												"get",
												":person"
											],
											"variable": [
												{
													"key": "sportEvent",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "person",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"sportEventId\": \"commodo occaecat\",\n  \"personId\": \"fugiat ex nisi\",\n  \"sportEventTeamId\": \"incididunt\",\n  \"matName\": \"esse dolore exercitation Duis\",\n  \"origins\": {\n    \"exf_9\": -89286708.0012162,\n    \"reprehenderit__\": 16889101.827529356\n  },\n  \"languages\": {\n    \"aliqua_cf8\": \"aliqua veniam qui\"\n  },\n  \"familyName\": \"nulla ut dolore irure\",\n  \"givenName\": \"laborum sit\",\n  \"fullName\": \"minim in est\",\n  \"displayName\": \"id nisi Lorem laborum sunt\",\n  \"teamFullName\": \"id dolor\",\n  \"teamName\": \"elit in\",\n  \"teamAlternateName\": \"laborum\",\n  \"teamCountryFlag\": \"aliqua pariatur occaecat\",\n  \"full\": \"occaecat mollit commodo dolore in\",\n  \"id\": \"in ut\",\n  \"number\": 1162,\n  \"refereeLevel\": \"aute in sed dolore\",\n  \"refereeGroup\": \"c\",\n  \"delegate\": false,\n  \"matchairman\": false,\n  \"referee\": true,\n  \"preferedStyle\": {\n    \"ex0\": -69914245.29594412\n  },\n  \"sportEventMatId\": \"proident aute\",\n  \"deactivated\": false\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEvent/get/:person",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEvent",
												"get",
												":person"
											],
											"variable": [
												{
													"key": "sportEvent",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "person",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Referee not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEvent/get/:person",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEvent",
												"get",
												":person"
											],
											"variable": [
												{
													"key": "sportEvent",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "person",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "remote",
					"item": [
						{
							"name": "get/{remote}",
							"item": [
								{
									"name": "Get a Remote",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote"
											],
											"variable": [
												{
													"key": "remote",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns remotes",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														"get",
														":remote"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 58960311,\n  \"apiUrl\": \"L\",\n  \"clientId\": \"dolore incididunt enim\",\n  \"clientSecret\": \"eu dolor nulla\",\n  \"apiKey\": \"irure dolore dolore d\",\n  \"available\": true,\n  \"paused\": false,\n  \"timeout\": -97679475\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														"get",
														":remote"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														"get",
														":remote"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a Remote",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"apiUrl\": \"sunt ea\",\n  \"clientId\": \"ut nulla ullamco exercitation\",\n  \"clientSecret\": \"occaecat nisi velit dolore\",\n  \"apiKey\": \"ea nulla ullamco\",\n  \"available\": true,\n  \"paused\": true,\n  \"timeout\": 43355206\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote"
											],
											"variable": [
												{
													"key": "remote",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														"get",
														":remote"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														"get",
														":remote"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														"get",
														":remote"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														"get",
														":remote"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a Remote",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote"
											],
											"variable": [
												{
													"key": "remote",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														"get",
														":remote"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														"get",
														":remote"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														"get",
														":remote"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get all SportEvent associated with a Remote",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote/athletes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote",
												"athletes"
											],
											"variable": [
												{
													"key": "remote",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns SportEvents",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote/athletes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														"get",
														":remote",
														"athletes"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"country\": {\n      \"flag\": \"deserunt ut in anim Excepteur\",\n      \"id\": -80100362,\n      \"name\": \"qui amet nisi dolore laborum\",\n      \"alternateName\": \"elit exercitation\",\n      \"isoCode\": \"dolor adipisicing\",\n      \"isoName\": \"nulla nostrud dolor amet deserunt\",\n      \"continent\": \"dolore\",\n      \"officialLanguages\": {\n        \"sed_d3\": -58874338\n      }\n    },\n    \"name\": \"tempor ea dolore\",\n    \"startDate\": \"1959-11-18T12:37:35.953Z\",\n    \"endDate\": \"1963-03-16T03:49:37.580Z\",\n    \"rankingType\": \"officia dolore\",\n    \"tournamentType\": \"laboris aute\",\n    \"sessionType\": \"amet\",\n    \"eventType\": \"anim cillum ut dolore\",\n    \"continent\": \"enim incididunt\",\n    \"scoreboardType\": \"velit\",\n    \"timezone\": \"incididunt\",\n    \"fullName\": \"sit do esse\",\n    \"date\": \"in s\",\n    \"address\": \"ut incididunt consectetur d\",\n    \"fullAddress\": \"Duis pariatur in\",\n    \"isIndividualEvent\": true,\n    \"isIndividualLegacyEvent\": false,\n    \"isTeamEvent\": true,\n    \"isSinglebracketTournament\": true,\n    \"isDoublebracketTournament\": true,\n    \"isRoundrobinTournament\": true,\n    \"isUwwRankingEvent\": false,\n    \"isBeachWrestlingTournament\": false,\n    \"isWorldChampionships\": false,\n    \"shorterNames\": true,\n    \"timezoneTimeOffset\": -12813005,\n    \"isSyncEnabled\": false,\n    \"countReferees\": -84326297,\n    \"countFights\": 81478281,\n    \"countWeightCategories\": -55923141,\n    \"sports\": {\n      \"id_d32\": true,\n      \"in_40\": -55381475,\n      \"dolore94\": 17802440.211368024\n    },\n    \"countWeightCategoriesBySport\": {\n      \"Excepteur__8\": 11718763\n    },\n    \"audiences\": {\n      \"ut56b\": -39692373.208126776\n    },\n    \"countTeams\": 99287210,\n    \"countSessions\": 46542689,\n    \"countMats\": 99317461,\n    \"countPools\": 65068367,\n    \"countryIsoCode\": \"esse sint proiden\",\n    \"logo\": \"Lorem quis\",\n    \"athlete1Color\": \"et esse\",\n    \"athlete1TextColor\": \"eu in\",\n    \"athlete2Color\": \"ex do\",\n    \"athlete2TextColor\": \"ullamco sit aliqua ad\",\n    \"id\": \"consectetur nisi eu mollit\",\n    \"addressLocality\": \"id eiusmod Duis nulla\",\n    \"uwwRankingType\": \"laborum ut minim\",\n    \"image\": \"est exercitation\",\n    \"restTime\": -86128850,\n    \"countdown\": true,\n    \"lightScoresheet\": true,\n    \"copyScoresheet\": -86572122,\n    \"bulkScoresheet\": false,\n    \"matAssignment\": true,\n    \"visible\": true,\n    \"secure\": false,\n    \"localClient\": {\n      \"fullname\": \"ex magna laborum ad\",\n      \"id\": \"Ut irure cupidatat\",\n      \"email\": \"dolore\",\n      \"name\": \"eiusmod id veniam\",\n      \"organization\": \"in nulla\",\n      \"version\": \"minim\",\n      \"remoteVersion\": \"consequat incididunt\",\n      \"maintenance\": true,\n      \"trusted\": false,\n      \"created\": \"1951-08-27T23:33:22.697Z\",\n      \"updated\": \"1986-05-12T00:42:36.224Z\"\n    },\n    \"remote\": {\n      \"id\": -32499656,\n      \"apiUrl\": \"dolor sunt qui\",\n      \"clientId\": \"ut cillum sint sed ut\",\n      \"clientSecret\": \"pariatur ex aliqua\",\n      \"apiKey\": \"aliquip ullamco nisi sit\",\n      \"available\": true,\n      \"paused\": true,\n      \"timeout\": -66702980\n    },\n    \"remoteStatus\": \"officia irure nisi non id\",\n    \"mats\": [\n      {\n        \"name\": \"ut labore Ut anim dolore\",\n        \"sportEventId\": \"sint Duis ad ea est\",\n        \"id\": \"sint voluptate dolor consequat do\",\n        \"streaming\": \"aliq\"\n      },\n      {\n        \"name\": \"commodo Lorem dolor\",\n        \"sportEventId\": \"non nulla pariatur\",\n        \"id\": \"culpa anim\",\n        \"streaming\": \"pariatur est\"\n      }\n    ],\n    \"forbidSyncAfter\": -29340540,\n    \"odfCode\": \"magna elit\",\n    \"videoChecksum\": \"dolor exercitation pariatur nisi au\",\n    \"nbSeeds\": -9519075,\n    \"athenaCompetitionId\": \"minim est\",\n    \"scoreboardOperator\": \"esse voluptate nisi amet\"\n  },\n  {\n    \"country\": {\n      \"flag\": \"exercitation velit nisi sint ex\",\n      \"id\": 4699604,\n      \"name\": \"minim ad do deserunt qui\",\n      \"alternateName\": \"fugiat velit\",\n      \"isoCode\": \"fugiat sit\",\n      \"isoName\": \"in\",\n      \"continent\": \"sunt amet\",\n      \"officialLanguages\": {\n        \"anim_35e\": 21963066,\n        \"inb6\": 37217138.828463316\n      }\n    },\n    \"name\": \"ut en\",\n    \"startDate\": \"1976-11-20T02:16:55.144Z\",\n    \"endDate\": \"1993-12-30T13:41:12.330Z\",\n    \"rankingType\": \"eu ut in veniam id\",\n    \"tournamentType\": \"aliquip reprehenderit Ut nulla\",\n    \"sessionType\": \"occaecat tempor nisi culpa\",\n    \"eventType\": \"elit Duis\",\n    \"continent\": \"eiusmod\",\n    \"scoreboardType\": \"et mollit non u\",\n    \"timezone\": \"aute ea dolore incididunt\",\n    \"fullName\": \"ut dolor in magna\",\n    \"date\": \"eiusmod ut sunt esse\",\n    \"address\": \"incididunt\",\n    \"fullAddress\": \"Lorem in in\",\n    \"isIndividualEvent\": false,\n    \"isIndividualLegacyEvent\": true,\n    \"isTeamEvent\": true,\n    \"isSinglebracketTournament\": true,\n    \"isDoublebracketTournament\": true,\n    \"isRoundrobinTournament\": true,\n    \"isUwwRankingEvent\": false,\n    \"isBeachWrestlingTournament\": true,\n    \"isWorldChampionships\": false,\n    \"shorterNames\": true,\n    \"timezoneTimeOffset\": 87025099,\n    \"isSyncEnabled\": true,\n    \"countReferees\": 64410352,\n    \"countFights\": -94319983,\n    \"countWeightCategories\": -97265331,\n    \"sports\": {\n      \"quif65\": -64938703\n    },\n    \"countWeightCategoriesBySport\": {\n      \"voluptate123\": true,\n      \"ea269\": 15191297\n    },\n    \"audiences\": {\n      \"est8be\": 97203529\n    },\n    \"countTeams\": 70748819,\n    \"countSessions\": -37367120,\n    \"countMats\": -84509486,\n    \"countPools\": 433571,\n    \"countryIsoCode\": \"i\",\n    \"logo\": \"in dolor consequat do\",\n    \"athlete1Color\": \"dolore\",\n    \"athlete1TextColor\": \"est tempor laborum\",\n    \"athlete2Color\": \"est Lorem dolor et minim\",\n    \"athlete2TextColor\": \"laboris\",\n    \"id\": \"quis consequat ea tempor\",\n    \"addressLocality\": \"nisi ut consequat\",\n    \"uwwRankingType\": \"sit\",\n    \"image\": \"eiusmod exercitation enim\",\n    \"restTime\": -96303941,\n    \"countdown\": true,\n    \"lightScoresheet\": false,\n    \"copyScoresheet\": 85757573,\n    \"bulkScoresheet\": true,\n    \"matAssignment\": false,\n    \"visible\": false,\n    \"secure\": false,\n    \"localClient\": {\n      \"fullname\": \"consequat officia\",\n      \"id\": \"dolore est\",\n      \"email\": \"aliquip velit labore sed et\",\n      \"name\": \"consequat aliqua velit cillum\",\n      \"organization\": \"elit deserunt nostrud ea\",\n      \"version\": \"reprehe\",\n      \"remoteVersion\": \"eu ut ut aliquip\",\n      \"maintenance\": false,\n      \"trusted\": true,\n      \"created\": \"1989-05-15T03:40:19.182Z\",\n      \"updated\": \"1977-07-19T03:29:42.094Z\"\n    },\n    \"remote\": {\n      \"id\": 15988027,\n      \"apiUrl\": \"aliquip fugiat\",\n      \"clientId\": \"anim mollit proident\",\n      \"clientSecret\": \"reprehenderit irure eiusmod Lorem culpa\",\n      \"apiKey\": \"consequat sit eu\",\n      \"available\": false,\n      \"paused\": true,\n      \"timeout\": 14643665\n    },\n    \"remoteStatus\": \"elit ut consectetur est deserunt\",\n    \"mats\": [\n      {\n        \"name\": \"commodo dolore mollit amet\",\n        \"sportEventId\": \"magna eiusmod veniam elit\",\n        \"id\": \"anim\",\n        \"streaming\": \"consequat\"\n      },\n      {\n        \"name\": \"sunt ad\",\n        \"sportEventId\": \"quis in\",\n        \"id\": \"eiusmod\",\n        \"streaming\": \"ipsum labore in consectetur consequat\"\n      }\n    ],\n    \"forbidSyncAfter\": 98960242,\n    \"odfCode\": \"sunt commodo eiusmod ad\",\n    \"videoChecksum\": \"quis\",\n    \"nbSeeds\": 92912135,\n    \"athenaCompetitionId\": \"nostrud consectetur in enim\",\n    \"scoreboardOperator\": \"cillum commodo minim eu\"\n  }\n]"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote/athletes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														"get",
														":remote",
														"athletes"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "{remote}",
							"item": [
								{
									"name": "Pause a Remote",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/pause",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												":remote",
												"pause"
											],
											"variable": [
												{
													"key": "remote",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns the remote",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/pause",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														":remote",
														"pause"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 58960311,\n  \"apiUrl\": \"L\",\n  \"clientId\": \"dolore incididunt enim\",\n  \"clientSecret\": \"eu dolor nulla\",\n  \"apiKey\": \"irure dolore dolore d\",\n  \"available\": true,\n  \"paused\": false,\n  \"timeout\": -97679475\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/pause",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														":remote",
														"pause"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/pause",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														":remote",
														"pause"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Resume a Remote",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/resume",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												":remote",
												"resume"
											],
											"variable": [
												{
													"key": "remote",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns the remote",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/resume",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														":remote",
														"resume"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 58960311,\n  \"apiUrl\": \"L\",\n  \"clientId\": \"dolore incididunt enim\",\n  \"clientSecret\": \"eu dolor nulla\",\n  \"apiKey\": \"irure dolore dolore d\",\n  \"available\": true,\n  \"paused\": false,\n  \"timeout\": -97679475\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/resume",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														":remote",
														"resume"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/resume",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"remote",
														":remote",
														"resume"
													],
													"variable": [
														{
															"key": "remote",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all remotes",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/remote/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"remote",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns remotes",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": -14309774,\n    \"apiUrl\": \"culpa Lorem sint fugiat dolor\",\n    \"available\": false,\n    \"paused\": false,\n    \"timeout\": 97700510\n  },\n  {\n    \"id\": 86898629,\n    \"apiUrl\": \"temp\",\n    \"available\": true,\n    \"paused\": false,\n    \"timeout\": 14455037\n  }\n]"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a Remote",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"apiUrl\": \"sunt ea\",\n  \"clientId\": \"ut nulla ullamco exercitation\",\n  \"clientSecret\": \"occaecat nisi velit dolore\",\n  \"apiKey\": \"ea nulla ullamco\",\n  \"available\": true,\n  \"paused\": true,\n  \"timeout\": 43355206\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/remote/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"remote",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "round",
					"item": [
						{
							"name": "{fightId}",
							"item": [
								{
									"name": "Get rounds of a fight",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												":fightId"
											],
											"variable": [
												{
													"key": "fightId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns rounds",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"rounds\": {},\n  \"sportEventId\": \"do cillum occaecat labore\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a round",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"number\": 686\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												":fightId"
											],
											"variable": [
												{
													"key": "fightId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "Get a round",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a round",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"round\": {\n    \"number\": 896,\n    \"fightId\": \"non adipisicing dolore\",\n    \"sportId\": \"dolor eu ut esse dolore\",\n    \"sportEventId\": \"tempor mollit laboris elit in\",\n    \"id\": \"in ut\"\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a round",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"number\": 686\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a round",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"round",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "scoreboard",
					"item": [
						{
							"name": "sport-event",
							"item": [
								{
									"name": "Get events",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"sport-event"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns RoundTechnicalPoints",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"scoreboard",
														"sport-event"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"events\": {},\n  \"time\": \"\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"scoreboard",
														"sport-event"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"scoreboard",
														"sport-event"
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get current score for team match",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event/get/:sportEvent/team-score/:teamFightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"sport-event",
												"get",
												":sportEvent",
												"team-score",
												":teamFightId"
											],
											"variable": [
												{
													"key": "sportEvent",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "teamFightId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns Team fight status",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event/get/:sportEvent/team-score/:teamFightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"scoreboard",
														"sport-event",
														"get",
														":sportEvent",
														"team-score",
														":teamFightId"
													],
													"variable": [
														{
															"key": "sportEvent",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "teamFightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"winsTeam1\": -87854200,\n  \"winsTeam2\": -26484056,\n  \"winnerTeamId\": \"in eu esse\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event/get/:sportEvent/team-score/:teamFightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"scoreboard",
														"sport-event",
														"get",
														":sportEvent",
														"team-score",
														":teamFightId"
													],
													"variable": [
														{
															"key": "sportEvent",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "teamFightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event/get/:sportEvent/team-score/:teamFightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"scoreboard",
														"sport-event",
														"get",
														":sportEvent",
														"team-score",
														":teamFightId"
													],
													"variable": [
														{
															"key": "sportEvent",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "teamFightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "fight-referee/{fightId}",
							"item": [
								{
									"name": "Get Fight Referee",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"fight-referee",
												":fightId"
											],
											"variable": [
												{
													"key": "fightId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns RoundTechnicalPoints",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"scoreboard",
														"fight-referee",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fightReferees\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"scoreboard",
														"fight-referee",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"scoreboard",
														"fight-referee",
														":fightId"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get Fight Referee",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId/:refereeRole",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"fight-referee",
												":fightId",
												":refereeRole"
											],
											"variable": [
												{
													"key": "fightId",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "refereeRole",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns RoundTechnicalPoints",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId/:refereeRole",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"scoreboard",
														"fight-referee",
														":fightId",
														":refereeRole"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "refereeRole",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"fightReferees\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId/:refereeRole",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"scoreboard",
														"fight-referee",
														":fightId",
														":refereeRole"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "refereeRole",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId/:refereeRole",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"scoreboard",
														"fight-referee",
														":fightId",
														":refereeRole"
													],
													"variable": [
														{
															"key": "fightId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "refereeRole",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get Fight Referees",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/referee/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"referee",
										":sportEventId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns RoundTechnicalPoints",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/referee/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"referee",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"referees\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/referee/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"referee",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/referee/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"referee",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get mats",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/mat/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"mat",
										":sportEventId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns Mats defined under a SportEvent",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/mat/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"mat",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"mats\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/mat/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"mat",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/mat/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"mat",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get upcoming matches by mats",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight/open/:sportEventMat",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"fight",
										"open",
										":sportEventMat"
									],
									"variable": [
										{
											"key": "sportEventMat",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns Mats defined under a SportEvent",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight/open/:sportEventMat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"fight",
												"open",
												":sportEventMat"
											],
											"variable": [
												{
													"key": "sportEventMat",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"fights\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight/open/:sportEventMat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"fight",
												"open",
												":sportEventMat"
											],
											"variable": [
												{
													"key": "sportEventMat",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight/open/:sportEventMat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"fight",
												"open",
												":sportEventMat"
											],
											"variable": [
												{
													"key": "sportEventMat",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get weightCategories",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/weight-category/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"weight-category",
										":sportEventId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns Weight Categories of a SportEvent",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/weight-category/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"weight-category",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"weightCategories\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/weight-category/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"weight-category",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/weight-category/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"weight-category",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get fighters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fighter/:sportEventWeightCategoryId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"fighter",
										":sportEventWeightCategoryId"
									],
									"variable": [
										{
											"key": "sportEventWeightCategoryId",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns fighters of a Weight Category",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fighter/:sportEventWeightCategoryId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"fighter",
												":sportEventWeightCategoryId"
											],
											"variable": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"weightCategories\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fighter/:sportEventWeightCategoryId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"fighter",
												":sportEventWeightCategoryId"
											],
											"variable": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fighter/:sportEventWeightCategoryId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"fighter",
												":sportEventWeightCategoryId"
											],
											"variable": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Request Mercure token for publishing live data",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/mercuretoken/:sportEvent/:localClient",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"mercuretoken",
										":sportEvent",
										":localClient"
									],
									"variable": [
										{
											"key": "sportEvent",
											"value": "enim",
											"description": "(Required) "
										},
										{
											"key": "localClient",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns RoundTechnicalPoints",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/mercuretoken/:sportEvent/:localClient",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"mercuretoken",
												":sportEvent",
												":localClient"
											],
											"variable": [
												{
													"key": "sportEvent",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "localClient",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"publish_token\": \"Ut\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/mercuretoken/:sportEvent/:localClient",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"mercuretoken",
												":sportEvent",
												":localClient"
											],
											"variable": [
												{
													"key": "sportEvent",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "localClient",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/mercuretoken/:sportEvent/:localClient",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"mercuretoken",
												":sportEvent",
												":localClient"
											],
											"variable": [
												{
													"key": "sportEvent",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "localClient",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "session",
					"item": [
						{
							"name": "{sportEventId}",
							"item": [
								{
									"name": "Get sessions",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns all Sessions of a SportEvent",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"sessions\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a session",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"incididunt\",\n  \"startDate\": \"1971-10-14T04:58:44.306Z\",\n  \"endDate\": \"1985-01-14T11:07:42.773Z\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get current (or next) session",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/current",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId",
												"current"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a SportEventSession",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/current",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														":sportEventId",
														"current"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"session\": {\n    \"name\": \"exercitation\",\n    \"sportEventId\": \"Excepteur irure tempor enim\",\n    \"countFightMats\": -85422216,\n    \"timezone\": \"pariatur et incidid\",\n    \"fullName\": \"ea ex\",\n    \"hasFightsNotCanceled\": false,\n    \"dayNumber\": -28383376,\n    \"id\": \"sint mollit ea est laborum\",\n    \"startDate\": \"1979-12-19T09:11:14.284Z\",\n    \"endDate\": \"2001-07-20T08:48:55.838Z\",\n    \"weight\": 249\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/current",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														":sportEventId",
														"current"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/current",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														":sportEventId",
														"current"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get next session",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/next",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId",
												"next"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a SportEventSession",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/next",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														":sportEventId",
														"next"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"sessions\": {\n    \"name\": \"Lorem sunt in\",\n    \"sportEventId\": \"aliqua pariatur\",\n    \"countFightMats\": 64459291,\n    \"timezone\": \"ex tempor\",\n    \"fullName\": \"mollit ut Excepteur irure anim\",\n    \"hasFightsNotCanceled\": false,\n    \"dayNumber\": -65281658,\n    \"id\": \"aliqua aute\",\n    \"startDate\": \"1943-06-04T10:52:03.024Z\",\n    \"endDate\": \"2000-01-17T02:13:03.973Z\",\n    \"weight\": 791\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/next",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														":sportEventId",
														"next"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/next",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														":sportEventId",
														"next"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "Get a session",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a SportEventSession",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"session\": {\n    \"name\": \"exercitation\",\n    \"sportEventId\": \"Excepteur irure tempor enim\",\n    \"countFightMats\": -85422216,\n    \"timezone\": \"pariatur et incidid\",\n    \"fullName\": \"ea ex\",\n    \"hasFightsNotCanceled\": false,\n    \"dayNumber\": -28383376,\n    \"id\": \"sint mollit ea est laborum\",\n    \"startDate\": \"1979-12-19T09:11:14.284Z\",\n    \"endDate\": \"2001-07-20T08:48:55.838Z\",\n    \"weight\": 249\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a session",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"incididunt\",\n  \"startDate\": \"1971-10-14T04:58:44.306Z\",\n  \"endDate\": \"1985-01-14T11:07:42.773Z\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a session",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when entity has already been linked to other entities, thus can't be deleted",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Print complete results",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id/print/complete-results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id",
												"print",
												"complete-results"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path to the Complete Results",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id/print/complete-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														"get",
														":id",
														"print",
														"complete-results"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id/print/complete-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														"get",
														":id",
														"print",
														"complete-results"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id/print/complete-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"session",
														"get",
														":id",
														"print",
														"complete-results"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "setup/country",
					"item": [
						{
							"name": "get",
							"item": [
								{
									"name": "Get countryCio",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"setup",
												"country",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns the CountryCio",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"setup",
														"country",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"country\": {\n    \"flag\": \"Lorem sint elit labore\",\n    \"id\": 89765831,\n    \"name\": \"in nisi est reprehenderit\",\n    \"alternateName\": \"fugiat mollit\",\n    \"isoCode\": \"sed consectetur incididunt minim\",\n    \"isoName\": \"id\",\n    \"continent\": \"volu\",\n    \"officialLanguages\": {\n      \"Loremd\": 13933965.065354317\n    }\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"setup",
														"country",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"setup",
														"country",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get a country by Code",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/code/:alternateName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"setup",
												"country",
												"get",
												"code",
												":alternateName"
											],
											"variable": [
												{
													"key": "alternateName",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns the Country",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/code/:alternateName",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"setup",
														"country",
														"get",
														"code",
														":alternateName"
													],
													"variable": [
														{
															"key": "alternateName",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"flag\": \"ea occaecat E\",\n  \"id\": 51263873,\n  \"name\": \"in cillum amet\",\n  \"alternateName\": \"fugiat nostrud\",\n  \"isoCode\": \"ut tempor\",\n  \"isoName\": \"fugiat velit\",\n  \"continent\": \"incididunt culpa Lorem\",\n  \"officialLanguages\": {\n    \"mollit_dce\": false\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/code/:alternateName",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"setup",
														"country",
														"get",
														"code",
														":alternateName"
													],
													"variable": [
														{
															"key": "alternateName",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/code/:alternateName",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"setup",
														"country",
														"get",
														"code",
														":alternateName"
													],
													"variable": [
														{
															"key": "alternateName",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get a country by ISOCode",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/isoCode/:isoCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"setup",
												"country",
												"get",
												"isoCode",
												":isoCode"
											],
											"variable": [
												{
													"key": "isoCode",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns the Country",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/isoCode/:isoCode",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"setup",
														"country",
														"get",
														"isoCode",
														":isoCode"
													],
													"variable": [
														{
															"key": "isoCode",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"flag\": \"ea occaecat E\",\n  \"id\": 51263873,\n  \"name\": \"in cillum amet\",\n  \"alternateName\": \"fugiat nostrud\",\n  \"isoCode\": \"ut tempor\",\n  \"isoName\": \"fugiat velit\",\n  \"continent\": \"incididunt culpa Lorem\",\n  \"officialLanguages\": {\n    \"mollit_dce\": false\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/isoCode/:isoCode",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"setup",
														"country",
														"get",
														"isoCode",
														":isoCode"
													],
													"variable": [
														{
															"key": "isoCode",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/isoCode/:isoCode",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"setup",
														"country",
														"get",
														"isoCode",
														":isoCode"
													],
													"variable": [
														{
															"key": "isoCode",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get All countryCios",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/setup/country/?filters=enim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"setup",
										"country",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "enim",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns all CountryCio's",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/setup/country/?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"setup",
												"country",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"countries\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/setup/country/?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"setup",
												"country",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "sport-event",
					"item": [
						{
							"name": "get",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "print",
											"item": [
												{
													"name": "Print scoresheets",
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print?range=enim&with-referees=true&template=data",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print"
															],
															"query": [
																{
																	"key": "range",
																	"value": "enim",
																	"description": "Fight number range to print scroresheets for"
																},
																{
																	"key": "with-referees",
																	"value": "true",
																	"description": "Print with referee information"
																},
																{
																	"key": "template",
																	"value": "data",
																	"description": "Scoresheet template"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Return the number of scoresheets printed into 'scoresheet-all.pdf' file",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print?range=enim&with-referees=true&template=data",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print"
																	],
																	"query": [
																		{
																			"key": "range",
																			"value": "enim"
																		},
																		{
																			"key": "with-referees",
																			"value": "true"
																		},
																		{
																			"key": "template",
																			"value": "data"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"count\": 79762230\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print?range=enim&with-referees=true&template=data",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print"
																	],
																	"query": [
																		{
																			"key": "range",
																			"value": "enim"
																		},
																		{
																			"key": "with-referees",
																			"value": "true"
																		},
																		{
																			"key": "template",
																			"value": "data"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print?range=enim&with-referees=true&template=data",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print"
																	],
																	"query": [
																		{
																			"key": "range",
																			"value": "enim"
																		},
																		{
																			"key": "with-referees",
																			"value": "true"
																		},
																		{
																			"key": "template",
																			"value": "data"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Print scoresheets for a SportEventSession",
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/session/:sportEventSessionId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"session",
																":sportEventSessionId"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "sportEventSessionId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Return the number of scoresheets printed into 'scoresheet-session-{sportEventSessionId}.pdf' file",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/session/:sportEventSessionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"session",
																		":sportEventSessionId"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		},
																		{
																			"key": "sportEventSessionId",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"count\": 79762230\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/session/:sportEventSessionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"session",
																		":sportEventSessionId"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		},
																		{
																			"key": "sportEventSessionId",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/session/:sportEventSessionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"session",
																		":sportEventSessionId"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		},
																		{
																			"key": "sportEventSessionId",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Print start list",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/start-list?sportEventSessionId=enim&sportEventMatId=72586250.56946471",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"start-list"
															],
															"query": [
																{
																	"key": "sportEventSessionId",
																	"value": "enim",
																	"description": "Filter for SportEventSession"
																},
																{
																	"key": "sportEventMatId",
																	"value": "72586250.56946471",
																	"description": "Filter for SportEventMat"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Return the PDF path to the Start List",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/start-list?sportEventSessionId=enim&sportEventMatId=72586250.56946471",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"start-list"
																	],
																	"query": [
																		{
																			"key": "sportEventSessionId",
																			"value": "enim"
																		},
																		{
																			"key": "sportEventMatId",
																			"value": "72586250.56946471"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/start-list?sportEventSessionId=enim&sportEventMatId=72586250.56946471",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"start-list"
																	],
																	"query": [
																		{
																			"key": "sportEventSessionId",
																			"value": "enim"
																		},
																		{
																			"key": "sportEventMatId",
																			"value": "72586250.56946471"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/start-list?sportEventSessionId=enim&sportEventMatId=72586250.56946471",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"start-list"
																	],
																	"query": [
																		{
																			"key": "sportEventSessionId",
																			"value": "enim"
																		},
																		{
																			"key": "sportEventMatId",
																			"value": "72586250.56946471"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Print cover sheet",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/cover",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"cover"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Return the PDF path to the Cover page",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/cover",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"cover"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/cover",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"cover"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/cover",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"cover"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Print Final Ranking",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-rankings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"final-rankings"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Return the PDF path to the Final Ranking",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-rankings",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"final-rankings"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-rankings",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"final-rankings"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-rankings",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"final-rankings"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Print Final Ranking",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/individual-rankings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"individual-rankings"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Return the PDF path to the Final Ranking",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/individual-rankings",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"individual-rankings"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/individual-rankings",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"individual-rankings"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/individual-rankings",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"individual-rankings"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Print Final Book",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-book",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"final-book"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Return the PDF path to the Final Book",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-book",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"final-book"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-book",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"final-book"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-book",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"sport-event",
																		"get",
																		":id",
																		"print",
																		"final-book"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Get an event",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns an event",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"country\": {\n    \"flag\": \"officia eiusmod\",\n    \"id\": 13547364,\n    \"name\": \"irure nostrud eu\",\n    \"alternateName\": \"culpa anim sunt\",\n    \"isoCode\": \"proident amet\",\n    \"isoName\": \"est quis ut irure\",\n    \"continent\": \"ex reprehenderit enim\",\n    \"officialLanguages\": {\n      \"esse_f\": \"irur\"\n    }\n  },\n  \"name\": \"nisi consectetur aliquip ad\",\n  \"startDate\": \"1951-10-29T14:43:18.754Z\",\n  \"endDate\": \"2009-06-18T16:39:19.250Z\",\n  \"rankingType\": \"occaecat veniam sint\",\n  \"tournamentType\": \"cupidatat officia dolore\",\n  \"sessionType\": \"ad Excepteur id officia\",\n  \"eventType\": \"et eiusmod elit\",\n  \"continent\": \"incididunt ea magna deserunt\",\n  \"scoreboardType\": \"do\",\n  \"timezone\": \"do qui\",\n  \"fullName\": \"id deserunt velit mollit\",\n  \"date\": \"Lorem Excepteur\",\n  \"address\": \"esse eiusmod labore\",\n  \"fullAddress\": \"sint\",\n  \"isIndividualEvent\": false,\n  \"isIndividualLegacyEvent\": true,\n  \"isTeamEvent\": true,\n  \"isSinglebracketTournament\": true,\n  \"isDoublebracketTournament\": true,\n  \"isRoundrobinTournament\": false,\n  \"isUwwRankingEvent\": true,\n  \"isBeachWrestlingTournament\": true,\n  \"isWorldChampionships\": true,\n  \"shorterNames\": true,\n  \"timezoneTimeOffset\": 23528764,\n  \"isSyncEnabled\": true,\n  \"countReferees\": 36489657,\n  \"countFights\": 66150838,\n  \"countWeightCategories\": -99225657,\n  \"sports\": {\n    \"fugiat6a\": -48464212.839656405\n  },\n  \"countWeightCategoriesBySport\": {\n    \"aliqua_156\": 31047976.531575114\n  },\n  \"audiences\": {\n    \"temporc67\": 56815176.91019389,\n    \"ut_2\": \"quis laborum ut\"\n  },\n  \"countTeams\": -88878812,\n  \"countSessions\": 12105756,\n  \"countMats\": 12942654,\n  \"countPools\": 76656209,\n  \"countryIsoCode\": \"aute ex\",\n  \"logo\": \"aliqua sit\",\n  \"athlete1Color\": \"sit esse exerc\",\n  \"athlete1TextColor\": \"cillum laboris et mollit\",\n  \"athlete2Color\": \"sit officia ullamco velit ut\",\n  \"athlete2TextColor\": \"esse labore eiusmod\",\n  \"id\": \"et commodo laborum aliquip amet\",\n  \"addressLocality\": \"non ad consequat\",\n  \"uwwRankingType\": \"voluptate minim veniam ut et\",\n  \"image\": \"qui reprehenderit laboris fugiat\",\n  \"restTime\": -93678472,\n  \"countdown\": false,\n  \"lightScoresheet\": false,\n  \"copyScoresheet\": -32950246,\n  \"bulkScoresheet\": true,\n  \"matAssignment\": false,\n  \"visible\": true,\n  \"secure\": false,\n  \"localClient\": {\n    \"fullname\": \"incididunt esse\",\n    \"id\": \"quis\",\n    \"email\": \"reprehenderit voluptate velit sint\",\n    \"name\": \"cupidatat cillum in enim\",\n    \"organization\": \"minim cillum qui est\",\n    \"version\": \"id dolor\",\n    \"remoteVersion\": \"aliqua commodo aute\",\n    \"maintenance\": true,\n    \"trusted\": false,\n    \"created\": \"1997-04-15T15:11:05.824Z\",\n    \"updated\": \"2004-01-08T07:43:36.616Z\"\n  },\n  \"remote\": {\n    \"id\": -22383782,\n    \"apiUrl\": \"est\",\n    \"clientId\": \"sed\",\n    \"clientSecret\": \"veniam magna\",\n    \"apiKey\": \"minim dolor\",\n    \"available\": true,\n    \"paused\": false,\n    \"timeout\": -87859744\n  },\n  \"remoteStatus\": \"sunt ex dolor\",\n  \"mats\": [\n    {\n      \"name\": \"dolore nisi\",\n      \"sportEventId\": \"ex velit aliqua\",\n      \"id\": \"sunt dolore anim et\",\n      \"streaming\": \"eu incididunt Duis enim\"\n    },\n    {\n      \"name\": \"amet commodo\",\n      \"sportEventId\": \"adipisicing voluptate pariatur\",\n      \"id\": \"amet exercitation in\",\n      \"streaming\": \"ipsum consequat do\"\n    }\n  ],\n  \"forbidSyncAfter\": -25168435,\n  \"odfCode\": \"s\",\n  \"videoChecksum\": \"minim consequat incididunt deserunt\",\n  \"nbSeeds\": -61991688,\n  \"athenaCompetitionId\": \"amet Lorem in\",\n  \"scoreboardOperator\": \"dolore labore\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update an event",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"country\": {},\n  \"name\": \"nostrud eu Excepteur culpa reprehenderit\",\n  \"startDate\": \"1994-09-06T00:49:40.352Z\",\n  \"endDate\": \"2013-02-18T23:56:15.535Z\",\n  \"rankingType\": \"voluptate nisi et in\",\n  \"tournamentType\": \"deserunt consequat sint Lorem dol\",\n  \"sessionType\": \"magna Lorem dolore minim\",\n  \"eventType\": \"mollit minim eiusmod\",\n  \"continent\": \"nisi velit\",\n  \"timezone\": \"tempor elit cillum dolore in\",\n  \"addressLocality\": \"mollit\",\n  \"uwwRankingType\": \"amet\",\n  \"restTime\": -2931977,\n  \"countdown\": false,\n  \"lightScoresheet\": true,\n  \"copyScoresheet\": -80565779,\n  \"bulkScoresheet\": true,\n  \"matAssignment\": true,\n  \"secure\": false,\n  \"localClient\": {\n    \"id\": \"velit\",\n    \"email\": \"velit et pariatur\",\n    \"name\": \"nulla\",\n    \"organization\": \"occaecat\",\n    \"remoteVersion\": \"dolor quis pariatur nulla et\"\n  },\n  \"odfCode\": \"ut officia\",\n  \"nbSeeds\": -87390487\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when invalid parameters are submitted",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update an event",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"country\": {},\n  \"name\": \"nostrud eu Excepteur culpa reprehenderit\",\n  \"startDate\": \"1994-09-06T00:49:40.352Z\",\n  \"endDate\": \"2013-02-18T23:56:15.535Z\",\n  \"rankingType\": \"voluptate nisi et in\",\n  \"tournamentType\": \"deserunt consequat sint Lorem dol\",\n  \"sessionType\": \"magna Lorem dolore minim\",\n  \"eventType\": \"mollit minim eiusmod\",\n  \"continent\": \"nisi velit\",\n  \"timezone\": \"tempor elit cillum dolore in\",\n  \"addressLocality\": \"mollit\",\n  \"uwwRankingType\": \"amet\",\n  \"restTime\": -2931977,\n  \"countdown\": false,\n  \"lightScoresheet\": true,\n  \"copyScoresheet\": -80565779,\n  \"bulkScoresheet\": true,\n  \"matAssignment\": true,\n  \"secure\": false,\n  \"localClient\": {\n    \"id\": \"velit\",\n    \"email\": \"velit et pariatur\",\n    \"name\": \"nulla\",\n    \"organization\": \"occaecat\",\n    \"remoteVersion\": \"dolor quis pariatur nulla et\"\n  },\n  \"odfCode\": \"ut officia\",\n  \"nbSeeds\": -87390487\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when invalid parameters are submitted",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete an event",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns when successful",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": false\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting went wrong",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get an event (light)",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/light",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"light"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns an event",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/light",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"light"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"event\": {}\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/light",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"light"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/light",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"light"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get Sync authorized status",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/syncable/:localClient",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"syncable",
														":localClient"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "localClient",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns the SportEvent's sync status",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/syncable/:localClient",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"syncable",
																":localClient"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "localClient",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": false\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/syncable/:localClient",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"syncable",
																":localClient"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "localClient",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Stop synchronization (break link between master and client)",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/stop-sync",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"stop-sync"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when update is successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/stop-sync",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"stop-sync"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": false\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/stop-sync",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"stop-sync"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get free draw numbers",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/draw/:entityId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"draw",
														":entityId"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "entityId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns free draw numbers",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/draw/:entityId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"draw",
																":entityId"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "entityId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"numbers\": [\n    2127727,\n    44094626\n  ]\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/draw/:entityId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"draw",
																":entityId"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "entityId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Secretariat Check",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/secretariat-check",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"secretariat-check"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns SportEvent status",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/secretariat-check",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"secretariat-check"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"scoresheetCount\": 43059124,\n  \"mactchesToCheck\": {},\n  \"matchesInProgress\": {},\n  \"weightCategories\": {},\n  \"sqlQueues\": -64488800,\n  \"syncStatus\": \"anim deserunt \"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/secretariat-check",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"secretariat-check"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Scoresheet count",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/scoresheet/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"scoresheet",
														"count"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns number of scoresheets to print",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/scoresheet/count",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"scoresheet",
																"count"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"count\": 79762230\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/scoresheet/count",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"scoresheet",
																"count"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get matches to check",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/check-matches",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"check-matches"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns list of matches to be checked",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/check-matches",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"check-matches"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"fights\": {}\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/check-matches",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"check-matches"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get matches in in-progress status",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/matches-inprogress",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"matches-inprogress"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns list of matches having their status as 'in-progress'",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/matches-inprogress",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"matches-inprogress"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"fights\": {}\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/matches-inprogress",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"matches-inprogress"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get fights for Start list",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/start-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"start-list"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/start-list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"start-list"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"sportEvent\": \"ea voluptate culpa\",\n  \"fightMats\": [\n    {\n      \"sessionName\": \"labore sint proident ad\",\n      \"sessionStartDate\": \"dolor cupidatat magna commodo\",\n      \"nextStartDate\": \"aliquip quis laboris et\",\n      \"matName\": \"sed qui\",\n      \"fights\": {}\n    },\n    {\n      \"sessionName\": \"voluptate a\",\n      \"sessionStartDate\": \"ex\",\n      \"nextStartDate\": \"occaecat proident ullamco\",\n      \"matName\": \"ex in\",\n      \"fights\": {}\n    }\n  ]\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/start-list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"start-list"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/start-list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"start-list"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get Final Ranking",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/final-rankings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"final-rankings"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path to the Final Ranking",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/final-rankings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"final-rankings"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"teams\": {}\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/final-rankings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"final-rankings"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/final-rankings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"final-rankings"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Print overall teams ranking by SportEvent. No ranking separation by sport or audience.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/allteam-ranking",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"allteam-ranking"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/allteam-ranking",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"allteam-ranking"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/allteam-ranking",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"allteam-ranking"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/allteam-ranking",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"allteam-ranking"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "{sportEvent}",
									"item": [
										{
											"name": "Dump a Sport Event",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/dump-event",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":sportEvent",
														"dump-event"
													],
													"variable": [
														{
															"key": "sportEvent",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returns the event's serialized content",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/dump-event",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":sportEvent",
																"dump-event"
															],
															"variable": [
																{
																	"key": "sportEvent",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"sport_event\": \"veniam ut elit\",\n  \"sport_event_mat\": \"consectetur amet in in\",\n  \"sport_event_session\": \"ipsum sed irure\",\n  \"fight_mat\": \"sunt id officia\",\n  \"sport_event_weight_category\": \"dolore\",\n  \"person\": \"mollit Duis dolore ipsum\",\n  \"sport_event_team\": \"tempor ea in eiusmod do\",\n  \"athlete\": \"dolor aute labore voluptate\",\n  \"fighter\": \"minim consectetur\",\n  \"referee\": \"quis adipisicing nostrud enim\",\n  \"sport_event_pool\": \"aliqua nostrud officia\",\n  \"fight\": \"dolor reprehenderit est commodo nulla\",\n  \"fight_referee\": \"dolor\",\n  \"fight_ranking_point\": \"sit aliquip enim magna labore\",\n  \"round\": \"fugiat voluptate qui\",\n  \"round_caution\": \"pariatur Duis esse sed \",\n  \"round_technical_point\": \"laborum adipisicing esse\",\n  \"activity\": \"veniam id in Excepteur\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/dump-event",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":sportEvent",
																"dump-event"
															],
															"variable": [
																{
																	"key": "sportEvent",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/dump-event",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":sportEvent",
																"dump-event"
															],
															"variable": [
																{
																	"key": "sportEvent",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Trigger a Remote sync action of an Event",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/remote-sync",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":sportEvent",
														"remote-sync"
													],
													"variable": [
														{
															"key": "sportEvent",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/remote-sync",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":sportEvent",
																"remote-sync"
															],
															"variable": [
																{
																	"key": "sportEvent",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/remote-sync",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":sportEvent",
																"remote-sync"
															],
															"variable": [
																{
																	"key": "sportEvent",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/remote-sync",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":sportEvent",
																"remote-sync"
															],
															"variable": [
																{
																	"key": "sportEvent",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Team Ranking list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:event/team-ranking/:audience/:sport",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":event",
												"team-ranking",
												":audience",
												":sport"
											],
											"variable": [
												{
													"key": "event",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "audience",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "sport",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Return team ranking",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:event/team-ranking/:audience/:sport",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":event",
														"team-ranking",
														":audience",
														":sport"
													],
													"variable": [
														{
															"key": "event",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "audience",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "sport",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"event\": {\n    \"name\": \"laborum\",\n    \"startDate\": \"1989-01-14T00:52:06.385Z\",\n    \"endDate\": \"1959-03-15T06:10:15.498Z\",\n    \"rankingType\": \"quis Ut sint irure\",\n    \"tournamentType\": \"adipisicing tempor\",\n    \"sessionType\": \"Duis aute Ut\",\n    \"eventType\": \"Excepteur amet eu irure\",\n    \"timezone\": \"Excepteur ad\",\n    \"fullName\": \"exercitation\",\n    \"address\": \"ea pariatur ut\",\n    \"isIndividualEvent\": false,\n    \"isIndividualLegacyEvent\": false,\n    \"isTeamEvent\": false,\n    \"isBeachWrestlingTournament\": false,\n    \"isSyncEnabled\": true,\n    \"logo\": \"in exercitation\",\n    \"id\": \"quis dolor\",\n    \"uwwRankingType\": \"fugiat\",\n    \"visible\": true,\n    \"secure\": false,\n    \"localClient\": {\n      \"fullname\": \"consectetur est Duis dolore\"\n    },\n    \"remote\": {\n      \"apiUrl\": \"culpa minim anim Lorem\"\n    },\n    \"remoteStatus\": \"do non in voluptate ad\",\n    \"odfCode\": \"dolor labore ut in\"\n  },\n  \"audience\": \"est\",\n  \"sport\": \"aliqua enim incididunt cupidatat\",\n  \"teamRanking\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:event/team-ranking/:audience/:sport",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":event",
														"team-ranking",
														":audience",
														":sport"
													],
													"variable": [
														{
															"key": "event",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "audience",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "sport",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:event/team-ranking/:audience/:sport",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":event",
														"team-ranking",
														":audience",
														":sport"
													],
													"variable": [
														{
															"key": "event",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "audience",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "sport",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "compare/{id}",
							"item": [
								{
									"name": "Compare synchronization endpoints and return with differences (GET) or apply changes (POST)",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"compare",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"compare",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"compare",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"compare",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Compare synchronization endpoints and return with differences (GET) or apply changes (POST)",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"compare",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"compare",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"compare",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"compare",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get events",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/?filters=enim&limit=50&page=72586250.56946471",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "enim",
											"description": "Filter parameters"
										},
										{
											"key": "limit",
											"value": "50",
											"description": "Number of records to return"
										},
										{
											"key": "page",
											"value": "72586250.56946471",
											"description": "Return the page set"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns events",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/?filters=enim&limit=50&page=72586250.56946471",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "page",
													"value": "72586250.56946471"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"events\": {\n    \"currentPageNumber\": 26807211,\n    \"numItemsPerPage\": 98608861,\n    \"items\": {},\n    \"totalCount\": 28623775,\n    \"paginatorOptions\": {},\n    \"customParameters\": {},\n    \"route\": \"quis nulla dolore\",\n    \"params\": {},\n    \"pageRange\": -18066082,\n    \"template\": \"sed\",\n    \"sortableTemplate\": \"Lorem laborum Ut\",\n    \"filtrationTemplate\": \"cillum tempor in veniam\"\n  }\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/?filters=enim&limit=50&page=72586250.56946471",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "page",
													"value": "72586250.56946471"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add an event",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"country\": {},\n  \"name\": \"laborum\",\n  \"startDate\": \"1986-05-26T05:54:58.228Z\",\n  \"endDate\": \"1961-09-10T17:00:15.485Z\",\n  \"rankingType\": \"tempo\",\n  \"tournamentType\": \"cillum\",\n  \"sessionType\": \"ullamco consectetur quis\",\n  \"eventType\": \"aliqua minim reprehenderit ad\",\n  \"continent\": \"sed consequat et dolor dolor\",\n  \"timezone\": \"Ut fugiat in\",\n  \"addressLocality\": \"aliquip non sunt sit\",\n  \"uwwRankingType\": \"aute officia\",\n  \"restTime\": 96609057,\n  \"countdown\": false,\n  \"lightScoresheet\": false,\n  \"copyScoresheet\": -6751657,\n  \"bulkScoresheet\": true,\n  \"matAssignment\": true,\n  \"secure\": false,\n  \"localClient\": {\n    \"id\": \"consectetur laboris labore eiusmod tempor\",\n    \"email\": \"pariatur nulla in\",\n    \"name\": \"ad aliquip elit\",\n    \"organization\": \"eu occaecat\",\n    \"remoteVersion\": \"tempor minim eiusmod\"\n  },\n  \"odfCode\": \"aliquip in\",\n  \"nbSeeds\": -83253116,\n  \"nbMats\": 26336189\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"country\": {},\n  \"name\": \"laborum\",\n  \"startDate\": \"1986-05-26T05:54:58.228Z\",\n  \"endDate\": \"1961-09-10T17:00:15.485Z\",\n  \"rankingType\": \"tempo\",\n  \"tournamentType\": \"cillum\",\n  \"sessionType\": \"ullamco consectetur quis\",\n  \"eventType\": \"aliqua minim reprehenderit ad\",\n  \"continent\": \"sed consequat et dolor dolor\",\n  \"timezone\": \"Ut fugiat in\",\n  \"addressLocality\": \"aliquip non sunt sit\",\n  \"uwwRankingType\": \"aute officia\",\n  \"restTime\": 96609057,\n  \"countdown\": false,\n  \"lightScoresheet\": false,\n  \"copyScoresheet\": -6751657,\n  \"bulkScoresheet\": true,\n  \"matAssignment\": true,\n  \"secure\": false,\n  \"localClient\": {\n    \"id\": \"consectetur laboris labore eiusmod tempor\",\n    \"email\": \"pariatur nulla in\",\n    \"name\": \"ad aliquip elit\",\n    \"organization\": \"eu occaecat\",\n    \"remoteVersion\": \"tempor minim eiusmod\"\n  },\n  \"odfCode\": \"aliquip in\",\n  \"nbSeeds\": -83253116,\n  \"nbMats\": 26336189\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"country\": {},\n  \"name\": \"laborum\",\n  \"startDate\": \"1986-05-26T05:54:58.228Z\",\n  \"endDate\": \"1961-09-10T17:00:15.485Z\",\n  \"rankingType\": \"tempo\",\n  \"tournamentType\": \"cillum\",\n  \"sessionType\": \"ullamco consectetur quis\",\n  \"eventType\": \"aliqua minim reprehenderit ad\",\n  \"continent\": \"sed consequat et dolor dolor\",\n  \"timezone\": \"Ut fugiat in\",\n  \"addressLocality\": \"aliquip non sunt sit\",\n  \"uwwRankingType\": \"aute officia\",\n  \"restTime\": 96609057,\n  \"countdown\": false,\n  \"lightScoresheet\": false,\n  \"copyScoresheet\": -6751657,\n  \"bulkScoresheet\": true,\n  \"matAssignment\": true,\n  \"secure\": false,\n  \"localClient\": {\n    \"id\": \"consectetur laboris labore eiusmod tempor\",\n    \"email\": \"pariatur nulla in\",\n    \"name\": \"ad aliquip elit\",\n    \"organization\": \"eu occaecat\",\n    \"remoteVersion\": \"tempor minim eiusmod\"\n  },\n  \"odfCode\": \"aliquip in\",\n  \"nbSeeds\": -83253116,\n  \"nbMats\": 26336189\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"country\": {},\n  \"name\": \"laborum\",\n  \"startDate\": \"1986-05-26T05:54:58.228Z\",\n  \"endDate\": \"1961-09-10T17:00:15.485Z\",\n  \"rankingType\": \"tempo\",\n  \"tournamentType\": \"cillum\",\n  \"sessionType\": \"ullamco consectetur quis\",\n  \"eventType\": \"aliqua minim reprehenderit ad\",\n  \"continent\": \"sed consequat et dolor dolor\",\n  \"timezone\": \"Ut fugiat in\",\n  \"addressLocality\": \"aliquip non sunt sit\",\n  \"uwwRankingType\": \"aute officia\",\n  \"restTime\": 96609057,\n  \"countdown\": false,\n  \"lightScoresheet\": false,\n  \"copyScoresheet\": -6751657,\n  \"bulkScoresheet\": true,\n  \"matAssignment\": true,\n  \"secure\": false,\n  \"localClient\": {\n    \"id\": \"consectetur laboris labore eiusmod tempor\",\n    \"email\": \"pariatur nulla in\",\n    \"name\": \"ad aliquip elit\",\n    \"organization\": \"eu occaecat\",\n    \"remoteVersion\": \"tempor minim eiusmod\"\n  },\n  \"odfCode\": \"aliquip in\",\n  \"nbSeeds\": -83253116,\n  \"nbMats\": 26336189\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List trusted events (Synchronization)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/trusted/:localClient?filters=enim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"trusted",
										":localClient"
									],
									"query": [
										{
											"key": "filters",
											"value": "enim",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "localClient",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns trusted events",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/trusted/:localClient?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"trusted",
												":localClient"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "localClient",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"name\": \"mollit veniam reprehenderit adipisicing\",\n  \"startDate\": \"1997-10-20T13:22:59.111Z\",\n  \"endDate\": \"2001-06-27T21:10:19.718Z\",\n  \"rankingType\": \"quis ut\",\n  \"tournamentType\": \"laboris\",\n  \"sessionType\": \"esse nulla non elit consectetu\",\n  \"eventType\": \"nisi nulla quis consectetur\",\n  \"timezone\": \"sed\",\n  \"fullName\": \"aute elit\",\n  \"address\": \"proident\",\n  \"isIndividualEvent\": false,\n  \"isIndividualLegacyEvent\": false,\n  \"isTeamEvent\": true,\n  \"isBeachWrestlingTournament\": true,\n  \"isSyncEnabled\": false,\n  \"logo\": \"officia Duis\",\n  \"id\": \"exercitation\",\n  \"uwwRankingType\": \"veniam Lorem\",\n  \"visible\": false,\n  \"secure\": false,\n  \"localClient\": {\n    \"fullname\": \"dolor laboris qui\"\n  },\n  \"remote\": {\n    \"apiUrl\": \"dolor quis aute ut\"\n  },\n  \"remoteStatus\": \"officia tempor\",\n  \"odfCode\": \"consequat pariatur\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/trusted/:localClient?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"trusted",
												":localClient"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "localClient",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/trusted/:localClient?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"trusted",
												":localClient"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "localClient",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get last events",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/last-{{limit}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"last-{{limit}}"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns events",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/last-{{limit}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"last-{{limit}}"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"events\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/last-{{limit}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"last-{{limit}}"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get an event by ODF code",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/odf/get/:odfCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"odf",
										"get",
										":odfCode"
									],
									"variable": [
										{
											"key": "odfCode",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns an event",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/odf/get/:odfCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"odf",
												"get",
												":odfCode"
											],
											"variable": [
												{
													"key": "odfCode",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"country\": {\n    \"flag\": \"officia eiusmod\",\n    \"id\": 13547364,\n    \"name\": \"irure nostrud eu\",\n    \"alternateName\": \"culpa anim sunt\",\n    \"isoCode\": \"proident amet\",\n    \"isoName\": \"est quis ut irure\",\n    \"continent\": \"ex reprehenderit enim\",\n    \"officialLanguages\": {\n      \"esse_f\": \"irur\"\n    }\n  },\n  \"name\": \"nisi consectetur aliquip ad\",\n  \"startDate\": \"1951-10-29T14:43:18.754Z\",\n  \"endDate\": \"2009-06-18T16:39:19.250Z\",\n  \"rankingType\": \"occaecat veniam sint\",\n  \"tournamentType\": \"cupidatat officia dolore\",\n  \"sessionType\": \"ad Excepteur id officia\",\n  \"eventType\": \"et eiusmod elit\",\n  \"continent\": \"incididunt ea magna deserunt\",\n  \"scoreboardType\": \"do\",\n  \"timezone\": \"do qui\",\n  \"fullName\": \"id deserunt velit mollit\",\n  \"date\": \"Lorem Excepteur\",\n  \"address\": \"esse eiusmod labore\",\n  \"fullAddress\": \"sint\",\n  \"isIndividualEvent\": false,\n  \"isIndividualLegacyEvent\": true,\n  \"isTeamEvent\": true,\n  \"isSinglebracketTournament\": true,\n  \"isDoublebracketTournament\": true,\n  \"isRoundrobinTournament\": false,\n  \"isUwwRankingEvent\": true,\n  \"isBeachWrestlingTournament\": true,\n  \"isWorldChampionships\": true,\n  \"shorterNames\": true,\n  \"timezoneTimeOffset\": 23528764,\n  \"isSyncEnabled\": true,\n  \"countReferees\": 36489657,\n  \"countFights\": 66150838,\n  \"countWeightCategories\": -99225657,\n  \"sports\": {\n    \"fugiat6a\": -48464212.839656405\n  },\n  \"countWeightCategoriesBySport\": {\n    \"aliqua_156\": 31047976.531575114\n  },\n  \"audiences\": {\n    \"temporc67\": 56815176.91019389,\n    \"ut_2\": \"quis laborum ut\"\n  },\n  \"countTeams\": -88878812,\n  \"countSessions\": 12105756,\n  \"countMats\": 12942654,\n  \"countPools\": 76656209,\n  \"countryIsoCode\": \"aute ex\",\n  \"logo\": \"aliqua sit\",\n  \"athlete1Color\": \"sit esse exerc\",\n  \"athlete1TextColor\": \"cillum laboris et mollit\",\n  \"athlete2Color\": \"sit officia ullamco velit ut\",\n  \"athlete2TextColor\": \"esse labore eiusmod\",\n  \"id\": \"et commodo laborum aliquip amet\",\n  \"addressLocality\": \"non ad consequat\",\n  \"uwwRankingType\": \"voluptate minim veniam ut et\",\n  \"image\": \"qui reprehenderit laboris fugiat\",\n  \"restTime\": -93678472,\n  \"countdown\": false,\n  \"lightScoresheet\": false,\n  \"copyScoresheet\": -32950246,\n  \"bulkScoresheet\": true,\n  \"matAssignment\": false,\n  \"visible\": true,\n  \"secure\": false,\n  \"localClient\": {\n    \"fullname\": \"incididunt esse\",\n    \"id\": \"quis\",\n    \"email\": \"reprehenderit voluptate velit sint\",\n    \"name\": \"cupidatat cillum in enim\",\n    \"organization\": \"minim cillum qui est\",\n    \"version\": \"id dolor\",\n    \"remoteVersion\": \"aliqua commodo aute\",\n    \"maintenance\": true,\n    \"trusted\": false,\n    \"created\": \"1997-04-15T15:11:05.824Z\",\n    \"updated\": \"2004-01-08T07:43:36.616Z\"\n  },\n  \"remote\": {\n    \"id\": -22383782,\n    \"apiUrl\": \"est\",\n    \"clientId\": \"sed\",\n    \"clientSecret\": \"veniam magna\",\n    \"apiKey\": \"minim dolor\",\n    \"available\": true,\n    \"paused\": false,\n    \"timeout\": -87859744\n  },\n  \"remoteStatus\": \"sunt ex dolor\",\n  \"mats\": [\n    {\n      \"name\": \"dolore nisi\",\n      \"sportEventId\": \"ex velit aliqua\",\n      \"id\": \"sunt dolore anim et\",\n      \"streaming\": \"eu incididunt Duis enim\"\n    },\n    {\n      \"name\": \"amet commodo\",\n      \"sportEventId\": \"adipisicing voluptate pariatur\",\n      \"id\": \"amet exercitation in\",\n      \"streaming\": \"ipsum consequat do\"\n    }\n  ],\n  \"forbidSyncAfter\": -25168435,\n  \"odfCode\": \"s\",\n  \"videoChecksum\": \"minim consequat incididunt deserunt\",\n  \"nbSeeds\": -61991688,\n  \"athenaCompetitionId\": \"amet Lorem in\",\n  \"scoreboardOperator\": \"dolore labore\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/odf/get/:odfCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"odf",
												"get",
												":odfCode"
											],
											"variable": [
												{
													"key": "odfCode",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/odf/get/:odfCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"odf",
												"get",
												":odfCode"
											],
											"variable": [
												{
													"key": "odfCode",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete all event",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/delete/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"delete",
										"all"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns when successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/delete/all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"delete",
												"all"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": false\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/delete/all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"delete",
												"all"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting went wrong",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/delete/all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"delete",
												"all"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Import Athletes and/or Referees",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "athletes",
											"value": "ea",
											"description": "Import file (XLS format)"
										},
										{
											"key": "referees",
											"value": "aute magna deserunt",
											"description": "Import file (XLS format)"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/import/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"import",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns person",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "athletes",
													"value": "ea",
													"description": "Import file (XLS format)"
												},
												{
													"key": "referees",
													"value": "aute magna deserunt",
													"description": "Import file (XLS format)"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/import/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"import",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"et ut dolore\",\n  \"error\": \"reprehenderit quis et Lorem\",\n  \"result\": \"Duis ex\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "athletes",
													"value": "ea",
													"description": "Import file (XLS format)"
												},
												{
													"key": "referees",
													"value": "aute magna deserunt",
													"description": "Import file (XLS format)"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/import/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"import",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "athletes",
													"value": "ea",
													"description": "Import file (XLS format)"
												},
												{
													"key": "referees",
													"value": "aute magna deserunt",
													"description": "Import file (XLS format)"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/import/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"import",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "pool",
					"item": [
						{
							"name": "{sportEventId}",
							"item": [
								{
									"name": "Get pools",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns filtered result on Pools",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"pools\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a pool",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"quis Du\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get pools rankings",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/rankings?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId",
												"rankings"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns filtered result on Pools",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/rankings?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														":sportEventId",
														"rankings"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"pools\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/rankings?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														":sportEventId",
														"rankings"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/rankings?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														":sportEventId",
														"rankings"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Print list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/print",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId",
												"print"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path to the Pool List",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/print",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														":sportEventId",
														"print"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/print",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														":sportEventId",
														"print"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/print",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														":sportEventId",
														"print"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "Get a pool",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns SportEventPool",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"mat\": {\n    \"name\": \"Excepteur u\",\n    \"sportEventId\": \"reprehend\",\n    \"teamsOrderByRank\": {\n      \"mollit4_f\": -94026953,\n      \"Duisb96\": \"minim pariatur in reprehenderit voluptate\"\n    },\n    \"id\": \"fugiat\",\n    \"teams\": [\n      {\n        \"name\": \"culpa amet\",\n        \"alternateName\": \"ea\",\n        \"sportEventId\": \"sit anim aliquip au\",\n        \"countryCioName\": \"eu do ipsum eiusmod\",\n        \"countryFlag\": \"nisi eu sed\",\n        \"countryFlagScoreboard\": \"magna\",\n        \"countryFlagRounded\": \"quis ad consequat cupidatat deserunt\",\n        \"countryFlagMobile\": \"exercitation eu\",\n        \"fullName\": \"nulla aute incididunt\",\n        \"athleteCount\": -61891840,\n        \"refereeCount\": -11302703,\n        \"poolName\": \"sit ullamco in\",\n        \"sportEventWeightCategories\": {\n          \"amet_ba\": 84814819,\n          \"cillum_42a\": -11470703.039459586,\n          \"mollit_b\": -69624756\n        },\n        \"completed\": 6903091,\n        \"wins\": -72932672,\n        \"losses\": 94859728,\n        \"points\": 45164573,\n        \"technicalPointsFor\": 35432428,\n        \"technicalPointsAgainst\": 35999282,\n        \"technicalPointsDiff\": 68186854,\n        \"rankingPointsFor\": 39975836,\n        \"rankingPointsAgainst\": -1389088,\n        \"rankingPointsDiff\": 67856142,\n        \"winsEasy\": 82443394,\n        \"winsSuperiority\": -24757270,\n        \"rank\": 93626321,\n        \"finalRank\": 74269763,\n        \"fightByOpponent\": {\n          \"ut6\": -21974928\n        },\n        \"id\": \"reprehenderit dolor qui\",\n        \"countryCioId\": -73007289,\n        \"logo\": \"cupidatat culpa consequat\",\n        \"sportEventPoolId\": \"laborum ad\",\n        \"drawNumber\": 11,\n        \"continent\": \"ut velit\"\n      },\n      {\n        \"name\": \"nisi est dolore \",\n        \"alternateName\": \"sed es\",\n        \"sportEventId\": \"minim\",\n        \"countryCioName\": \"est consectetur ad quis nisi\",\n        \"countryFlag\": \"enim non\",\n        \"countryFlagScoreboard\": \"dolo\",\n        \"countryFlagRounded\": \"sunt aliquip\",\n        \"countryFlagMobile\": \"ullamco\",\n        \"fullName\": \"occaecat dolore\",\n        \"athleteCount\": 62318768,\n        \"refereeCount\": -81717124,\n        \"poolName\": \"dolore ut commodo\",\n        \"sportEventWeightCategories\": {\n          \"reprehenderit_c3\": 60610576,\n          \"cillum__2d\": 57642844,\n          \"ea_2\": \"nisi voluptate aliqua ut\"\n        },\n        \"completed\": -5189514,\n        \"wins\": -4118326,\n        \"losses\": -80091620,\n        \"points\": 45058641,\n        \"technicalPointsFor\": 50477925,\n        \"technicalPointsAgainst\": -74271003,\n        \"technicalPointsDiff\": -18021064,\n        \"rankingPointsFor\": -85348139,\n        \"rankingPointsAgainst\": 45239393,\n        \"rankingPointsDiff\": 46807626,\n        \"winsEasy\": -55542966,\n        \"winsSuperiority\": -26018451,\n        \"rank\": -53157059,\n        \"finalRank\": -20436049,\n        \"fightByOpponent\": {\n          \"Excepteur_d6\": false,\n          \"deserunt_0\": 74540248\n        },\n        \"id\": \"cupida\",\n        \"countryCioId\": 23822734,\n        \"logo\": \"sunt cillum ea id\",\n        \"sportEventPoolId\": \"et anim Lorem consectetur dolore\",\n        \"drawNumber\": 89,\n        \"continent\": \"sed\"\n      }\n    ]\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a pool",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"quis Du\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a pool",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"pool",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "team",
					"item": [
						{
							"name": "{sportEventId}",
							"item": [
								{
									"name": "print",
									"item": [
										{
											"name": "entry-list",
											"item": [
												{
													"name": "Print Entry list for all teams",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"team",
																":sportEventId",
																"print",
																"entry-list"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Return the PDF path to the Entry list",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"team",
																		":sportEventId",
																		"print",
																		"entry-list"
																	],
																	"variable": [
																		{
																			"key": "sportEventId",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"team",
																		":sportEventId",
																		"print",
																		"entry-list"
																	],
																	"variable": [
																		{
																			"key": "sportEventId",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"team",
																		":sportEventId",
																		"print",
																		"entry-list"
																	],
																	"variable": [
																		{
																			"key": "sportEventId",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Print Entry list for all teams in table format",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list/table",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"team",
																":sportEventId",
																"print",
																"entry-list",
																"table"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Return the PDF path to the Complete Results",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list/table",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"team",
																		":sportEventId",
																		"print",
																		"entry-list",
																		"table"
																	],
																	"variable": [
																		{
																			"key": "sportEventId",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list/table",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"team",
																		":sportEventId",
																		"print",
																		"entry-list",
																		"table"
																	],
																	"variable": [
																		{
																			"key": "sportEventId",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list/table",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"team",
																		":sportEventId",
																		"print",
																		"entry-list",
																		"table"
																	],
																	"variable": [
																		{
																			"key": "sportEventId",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Print list",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId",
														"print"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path to the Team list",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"team",
																":sportEventId",
																"print"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"team",
																":sportEventId",
																"print"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"team",
																":sportEventId",
																"print"
															],
															"variable": [
																{
																	"key": "sportEventId",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get sportEventTeams",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId?filters=enim&page=1&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												},
												{
													"key": "page",
													"value": "1",
													"description": "Page number"
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Records per page"
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns filtered result on Teams",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId?filters=enim&page=1&limit=100",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "limit",
															"value": "100"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"sportEventTeams\": {\n    \"currentPageNumber\": 31203626,\n    \"numItemsPerPage\": -53506888,\n    \"items\": {},\n    \"totalCount\": -88511053,\n    \"paginatorOptions\": {},\n    \"customParameters\": {},\n    \"route\": \"tempor Excepteur\",\n    \"params\": {},\n    \"pageRange\": 78703998,\n    \"template\": \"enim veniam Duis sed\",\n    \"sortableTemplate\": \"Duis Ut fugiat sit commodo\",\n    \"filtrationTemplate\": \"anim quis eiusmod\"\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId?filters=enim&page=1&limit=100",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "limit",
															"value": "100"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId?filters=enim&page=1&limit=100",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "limit",
															"value": "100"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a sportEventTeam",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"elit\",\n  \"alternateName\": \"mollit elit cul\",\n  \"countryCioId\": -60497715,\n  \"sportEventPoolId\": \"aliqua sint nisi mollit\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get a Team by SportEvent and AlternateName",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/get/:alternateName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												":sportEventId",
												"get",
												":alternateName"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "alternateName",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns SportEventTeam",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/get/:alternateName",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId",
														"get",
														":alternateName"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "alternateName",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"name\": \"enim labore\",\n  \"alternateName\": \"voluptate\",\n  \"sportEventId\": \"aliquip ipsum\",\n  \"countryCioName\": \"eu laborum ex\",\n  \"countryFlag\": \"consequat enim magna\",\n  \"countryFlagScoreboard\": \"quis dolor ad\",\n  \"countryFlagRounded\": \"con\",\n  \"countryFlagMobile\": \"labor\",\n  \"fullName\": \"incididunt labore\",\n  \"athleteCount\": 47230026,\n  \"refereeCount\": -65267292,\n  \"poolName\": \"culpa voluptate deserunt nisi\",\n  \"sportEventWeightCategories\": {\n    \"laboris__\": \"non cupidatat\"\n  },\n  \"completed\": -98377848,\n  \"wins\": 41273937,\n  \"losses\": 73903000,\n  \"points\": 3103125,\n  \"technicalPointsFor\": 94706772,\n  \"technicalPointsAgainst\": -53433118,\n  \"technicalPointsDiff\": -37625773,\n  \"rankingPointsFor\": -53968111,\n  \"rankingPointsAgainst\": 83466222,\n  \"rankingPointsDiff\": 21400207,\n  \"winsEasy\": -21113390,\n  \"winsSuperiority\": 50147181,\n  \"rank\": -44729915,\n  \"finalRank\": -14608373,\n  \"fightByOpponent\": {\n    \"enim_4be\": \"dolor\",\n    \"labore_4\": false\n  },\n  \"id\": \"mollit commodo\",\n  \"countryCioId\": -67894861,\n  \"logo\": \"culpa magna eu elit\",\n  \"sportEventPoolId\": \"anim sit minim\",\n  \"drawNumber\": 13,\n  \"continent\": \"quis\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/get/:alternateName",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId",
														"get",
														":alternateName"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "alternateName",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/get/:alternateName",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId",
														"get",
														":alternateName"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "alternateName",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "Get an sportEventTeam",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns SportEventTeam",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"sportEventTeam\": {\n    \"name\": \"mollit nisi\",\n    \"alternateName\": \"esse ea Duis\",\n    \"sportEventId\": \"Excepteur aliqua sunt\",\n    \"countryFlag\": \"eu ut officia\",\n    \"countryFlagRounded\": \"proident in eiusmod dolor\",\n    \"countryFlagMobile\": \"dolore\",\n    \"athleteCount\": 20844487,\n    \"refereeCount\": -97037144,\n    \"poolName\": \"culpa adipisicing\",\n    \"finalRank\": -73975656,\n    \"id\": \"qui labori\",\n    \"sportEventPoolId\": \"et voluptate aute id\",\n    \"drawNumber\": 84,\n    \"continent\": \"nisi magna deserunt amet esse\"\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a sportEventTeam",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"elit\",\n  \"alternateName\": \"mollit elit cul\",\n  \"countryCioId\": -60497715,\n  \"sportEventPoolId\": \"aliqua sint nisi mollit\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a sportEventTeam",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a sportEventTeam draw",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"drawNumber\": 88\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/draw",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"draw"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"drawNumber\": 88\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/draw",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"draw"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"drawNumber\": 88\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/draw",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"draw"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"drawNumber\": 88\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/draw",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"draw"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"drawNumber\": 88\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/draw",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"draw"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a sportEventTeam pool",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sportEventPoolId\": \"ut dolor veniam magna aute\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/pool",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"pool"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sportEventPoolId\": \"ut dolor veniam magna aute\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/pool",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"pool"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sportEventPoolId\": \"ut dolor veniam magna aute\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/pool",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"pool"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sportEventPoolId\": \"ut dolor veniam magna aute\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/pool",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"pool"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sportEventPoolId\": \"ut dolor veniam magna aute\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/pool",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"pool"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add an athlete",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/athlete/:athleteId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"athlete",
												":athleteId"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "athleteId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/athlete/:athleteId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"athlete",
														":athleteId"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "athleteId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/athlete/:athleteId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"athlete",
														":athleteId"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "athleteId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/athlete/:athleteId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"athlete",
														":athleteId"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "athleteId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Print Entry list by team",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/print/entry-list",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"print",
												"entry-list"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path to the Entry list",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/print/entry-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"print",
														"entry-list"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/print/entry-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"print",
														"entry-list"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/print/entry-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"print",
														"entry-list"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "List team ranking",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/team-ranking/:audience/:sport",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"team-ranking",
												":audience",
												":sport"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "audience",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "sport",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the ranking object",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/team-ranking/:audience/:sport",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"team-ranking",
														":audience",
														":sport"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "audience",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "sport",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"team\": {\n    \"name\": \"ipsum et eu Lorem\",\n    \"alternateName\": \"sit fugia\",\n    \"sportEventId\": \"fugiat\",\n    \"countryFlag\": \"elit\",\n    \"countryFlagRounded\": \"sed exercitation dolor consequat nostrud\",\n    \"countryFlagMobile\": \"sunt reprehenderit nulla consectetur anim\",\n    \"athleteCount\": 7613219,\n    \"refereeCount\": 68685544,\n    \"poolName\": \"nostrud ut ad cupidatat\",\n    \"finalRank\": -20648778,\n    \"id\": \"laborum eu dolore\",\n    \"sportEventPoolId\": \"eiusmod amet culpa\",\n    \"drawNumber\": 52,\n    \"continent\": \"mollit\"\n  },\n  \"audience\": \"sit Ut\",\n  \"sport\": \"irure officia\",\n  \"rank\": 52513335\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/team-ranking/:audience/:sport",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"team-ranking",
														":audience",
														":sport"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "audience",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "sport",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/team-ranking/:audience/:sport",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														"get",
														":id",
														"team-ranking",
														":audience",
														":sport"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "audience",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "sport",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "technical-point",
					"item": [
						{
							"name": "{roundId}",
							"item": [
								{
									"name": "Get round technical points",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												":roundId"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												}
											],
											"variable": [
												{
													"key": "roundId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns RoundTechnicalPoints",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														":roundId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"roundTechnicalPoints\": {},\n  \"sportEventId\": \"exercitation do occaecat eiusmod\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														":roundId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														":roundId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a round technical point",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"points\": 17,\n  \"second\": 67481,\n  \"fighter\": \"Ut\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?force=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												":roundId"
											],
											"query": [
												{
													"key": "force",
													"value": "true",
													"description": "Override checked match exception"
												}
											],
											"variable": [
												{
													"key": "roundId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														":roundId"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														":roundId"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello, or the match has been checked",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														":roundId"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														":roundId"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a round technical point to Live table",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"points\": 17,\n  \"second\": 67481,\n  \"fighter\": \"Ut\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId/live",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												":roundId",
												"live"
											],
											"variable": [
												{
													"key": "roundId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId/live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														":roundId",
														"live"
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId/live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														":roundId",
														"live"
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId/live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														":roundId",
														"live"
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId/live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														":roundId",
														"live"
													],
													"variable": [
														{
															"key": "roundId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "Get a round technical point or caution",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a RoundTechnicalPoint or RoundCaution object",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"roundTechnicalPoint\": {\n    \"points\": 95,\n    \"second\": 89057,\n    \"roundId\": \"ea proident ad\",\n    \"fighterId\": \"ip\",\n    \"fighterFullName\": \"nisi aliquip consectetur sunt\",\n    \"sportEventId\": \"dolore eu officia ut\",\n    \"id\": \"labore nostrud sit anim dolore\",\n    \"round\": \"reprehenderit\",\n    \"fighter\": \"exercitation sit dolor\",\n    \"tag\": {\n      \"code\": \"ad mollit\",\n      \"name\": \"irure in tempor magna\",\n      \"sport\": \"occaecat in esse s\",\n      \"sportId\": \"sed elit dolore labore\",\n      \"description\": \"velit ullamco\",\n      \"position\": \"laboris est\",\n      \"type\": \"aliqua quis dolor mollit\",\n      \"points\": {\n        \"cupidatat5\": -89537830.04516542,\n        \"eu_513\": true,\n        \"incididuntf20\": false,\n        \"sed_f\": 54710702\n      }\n    }\n  },\n  \"caution\": {\n    \"second\": 53311,\n    \"type\": \"irure sed\",\n    \"roundId\": \"fugiat laboris ullamco\",\n    \"fighterId\": \"Duis Ut\",\n    \"fighterFullName\": \"proident Ut\",\n    \"sportEventId\": \"voluptate proident\",\n    \"id\": \"do anim\",\n    \"round\": \"enim\",\n    \"fighter\": \"anim dolor id\"\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a round technical point",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"points\": 17,\n  \"second\": 67481,\n  \"fighter\": \"Ut\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "true",
													"description": "Override checked match exception"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														"get",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														"get",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello, or the match has been checked",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														"get",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														"get",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a round technical point or a caution",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "true",
													"description": "Override checked match exception"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														"get",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello, or the match has been checked",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														"get",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														"get",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Tag a round technical point",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id/tag/:tag",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id",
												"tag",
												":tag"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												},
												{
													"key": "tag",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a RoundTechnicalPoint",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id/tag/:tag",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														"get",
														":id",
														"tag",
														":tag"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "tag",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"roundTechnicalPoint\": {\n    \"points\": 33,\n    \"second\": 60246,\n    \"roundId\": \"irure sint eiusmod ut\",\n    \"fighterId\": \"et\",\n    \"fighterFullName\": \"esse dolore velit\",\n    \"sportEventId\": \"sed esse\",\n    \"id\": \"in\",\n    \"round\": \"adipisicing do aute aliqua\",\n    \"fighter\": \"amet elit ullamco\",\n    \"tag\": {\n      \"code\": \"et \",\n      \"name\": \"commodo Duis ad\",\n      \"sport\": \"ex Lorem\",\n      \"sportId\": \"et nostrud dolore consequat\",\n      \"description\": \"tempor fugiat\",\n      \"position\": \"voluptate deserunt velit mollit\",\n      \"type\": \"Ut minim ullamco\",\n      \"points\": {\n        \"este\": 72848546,\n        \"eu_83\": 18712233.800416872,\n        \"veniam_faa\": \"ad aliquip\"\n      }\n    }\n  }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id/tag/:tag",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														"get",
														":id",
														"tag",
														":tag"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "tag",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id/tag/:tag",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"technical-point",
														"get",
														":id",
														"tag",
														":tag"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "tag",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "technical-point-tag",
					"item": [
						{
							"name": "Get technical point tags",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/?filters=enim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point-tag",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "enim",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns RoundTechnicalPointTags",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point-tag",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"roundTechnicalPointTags\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point-tag",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point-tag",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a technical point tag",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/get/:code",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point-tag",
										"get",
										":code"
									],
									"variable": [
										{
											"key": "code",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns RoundTechnicalPointTag",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/get/:code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point-tag",
												"get",
												":code"
											],
											"variable": [
												{
													"key": "code",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"roundTechnicalPointTag\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/get/:code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point-tag",
												"get",
												":code"
											],
											"variable": [
												{
													"key": "code",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/get/:code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point-tag",
												"get",
												":code"
											],
											"variable": [
												{
													"key": "code",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "weight-category",
					"item": [
						{
							"name": "{sportEventId}",
							"item": [
								{
									"name": "Get weightCategories",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns filtered result on Weight Categories",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"weightCategories\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														":sportEventId"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Add a weightCategory",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"elit occaecat id a\",\n  \"audience\": \"ullamco commodo\",\n  \"sport\": \"ad quis\",\n  \"minWeight\": 448,\n  \"maxWeight\": 427,\n  \"roundsNumber\": 9,\n  \"roundDuration\": 560,\n  \"overtime\": 51039967,\n  \"tournamentType\": \"aliqua aute\",\n  \"averageDuration\": 36270626,\n  \"color\": \"mo\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														":sportEventId"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get weightCategories - light form",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/light?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId",
												"light"
											],
											"query": [
												{
													"key": "filters",
													"value": "enim",
													"description": "Filter parameters"
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns filtered result on Weight Categories",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/light?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														":sportEventId",
														"light"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"weightCategories\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/light?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														":sportEventId",
														"light"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/light?filters=enim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														":sportEventId",
														"light"
													],
													"query": [
														{
															"key": "filters",
															"value": "enim"
														}
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Print entry list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/print/entry-list",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId",
												"print",
												"entry-list"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/print/entry-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														":sportEventId",
														"print",
														"entry-list"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/print/entry-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														":sportEventId",
														"print",
														"entry-list"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/print/entry-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														":sportEventId",
														"print",
														"entry-list"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "integrity",
									"item": [
										{
											"name": "Start integrity check",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/integrity",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"integrity"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/integrity",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"integrity"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/integrity",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"integrity"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/integrity",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"integrity"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update integrity check status",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/integrity/:status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"integrity",
														":status"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "status",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/integrity/:status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"integrity",
																":status"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "status",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Accepted",
													"code": 202,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/integrity/:status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"integrity",
																":status"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "status",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/integrity/:status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"integrity",
																":status"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "status",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "bracket",
									"item": [
										{
											"name": "Print bracket",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/print?showNumber=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"bracket",
														"print"
													],
													"query": [
														{
															"key": "showNumber",
															"value": "0",
															"description": "Include fight numbers"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/print?showNumber=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"bracket",
																"print"
															],
															"query": [
																{
																	"key": "showNumber",
																	"value": "0"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/print?showNumber=1",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"bracket",
																"print"
															],
															"query": [
																{
																	"key": "showNumber",
																	"value": "1"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/print?showNumber=1",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"bracket",
																"print"
															],
															"query": [
																{
																	"key": "showNumber",
																	"value": "1"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Generate/Print live bracket",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/live?print=1&showNumber=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"bracket",
														"live"
													],
													"query": [
														{
															"key": "print",
															"value": "1",
															"description": "Generate only (0), or print (1) as well"
														},
														{
															"key": "showNumber",
															"value": "1",
															"description": "Include fight numbers"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/live?print=1&showNumber=1",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"bracket",
																"live"
															],
															"query": [
																{
																	"key": "print",
																	"value": "1"
																},
																{
																	"key": "showNumber",
																	"value": "1"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/live?print=1&showNumber=1",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"bracket",
																"live"
															],
															"query": [
																{
																	"key": "print",
																	"value": "1"
																},
																{
																	"key": "showNumber",
																	"value": "1"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/live?print=1&showNumber=1",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"bracket",
																"live"
															],
															"query": [
																{
																	"key": "print",
																	"value": "1"
																},
																{
																	"key": "showNumber",
																	"value": "1"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "print",
									"item": [
										{
											"name": "entry-list",
											"item": [
												{
													"name": "Print this category entry list",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"entry-list"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Return the PDF path",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"weight-category",
																		"get",
																		":id",
																		"print",
																		"entry-list"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"weight-category",
																		"get",
																		":id",
																		"print",
																		"entry-list"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"weight-category",
																		"get",
																		":id",
																		"print",
																		"entry-list"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Print teams by sport",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list/table",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"entry-list",
																"table"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Return the PDF path",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list/table",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"weight-category",
																		"get",
																		":id",
																		"print",
																		"entry-list",
																		"table"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list/table",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"weight-category",
																		"get",
																		":id",
																		"print",
																		"entry-list",
																		"table"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list/table",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"weight-category",
																		"get",
																		":id",
																		"print",
																		"entry-list",
																		"table"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "teams",
											"item": [
												{
													"name": "Print teams by sport",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/sport",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"teams",
																"sport"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Return the PDF path",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/sport",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"weight-category",
																		"get",
																		":id",
																		"print",
																		"teams",
																		"sport"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/sport",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"weight-category",
																		"get",
																		":id",
																		"print",
																		"teams",
																		"sport"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/sport",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"weight-category",
																		"get",
																		":id",
																		"print",
																		"teams",
																		"sport"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Print teams by sport",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/ranking",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"teams",
																"ranking"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "Return the PDF path",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/ranking",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"weight-category",
																		"get",
																		":id",
																		"print",
																		"teams",
																		"ranking"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
														},
														{
															"name": "Returned when the entity is not authorized to say hello",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/ranking",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"weight-category",
																		"get",
																		":id",
																		"print",
																		"teams",
																		"ranking"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Returned when somehting is not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: oauth2",
																		"key": "Authorization",
																		"value": "<token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/ranking",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"{{_format}}",
																		"weight-category",
																		"get",
																		":id",
																		"print",
																		"teams",
																		"ranking"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "enim",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Print rankings",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/ranking",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"print",
														"ranking"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/ranking",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"ranking"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/ranking",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"ranking"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/ranking",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"ranking"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Print complete results",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/complete-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"print",
														"complete-results"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/complete-results",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"complete-results"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/complete-results",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"complete-results"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/complete-results",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"complete-results"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "draw",
									"item": [
										{
											"name": "Set Draw",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"exceptionDesc\": \"est magna ad\",\n  \"<fighterid>\": {\n    \"drawNumber\": -54433652.0598633,\n    \"seedNumber\": 32520425.824237004,\n    \"fighterWeight\": 2807690.058004424\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when there is an error",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"exceptionDesc\": \"est magna ad\",\n  \"<fighterid>\": {\n    \"drawNumber\": -54433652.0598633,\n    \"seedNumber\": 32520425.824237004,\n    \"fighterWeight\": 2807690.058004424\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"aliquip elit Ut\"\n}"
												},
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"exceptionDesc\": \"est magna ad\",\n  \"<fighterid>\": {\n    \"drawNumber\": -54433652.0598633,\n    \"seedNumber\": 32520425.824237004,\n    \"fighterWeight\": 2807690.058004424\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when invalid parameters are submitted",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"exceptionDesc\": \"est magna ad\",\n  \"<fighterid>\": {\n    \"drawNumber\": -54433652.0598633,\n    \"seedNumber\": 32520425.824237004,\n    \"fighterWeight\": 2807690.058004424\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"exceptionDesc\": \"est magna ad\",\n  \"<fighterid>\": {\n    \"drawNumber\": -54433652.0598633,\n    \"seedNumber\": 32520425.824237004,\n    \"fighterWeight\": 2807690.058004424\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"exceptionDesc\": \"est magna ad\",\n  \"<fighterid>\": {\n    \"drawNumber\": -54433652.0598633,\n    \"seedNumber\": 32520425.824237004,\n    \"fighterWeight\": 2807690.058004424\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Generate automatic draw",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"exceptionDesc\": \"Ut est\",\n  \"<fighterid>\": {\n    \"seedNumber\": -98803154.74983066,\n    \"fighterWeight\": -82739074.53694785\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/auto?drawType=block",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"auto"
													],
													"query": [
														{
															"key": "drawType",
															"value": "block",
															"description": "Set to use blockchain draw"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when there is an error",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"exceptionDesc\": \"Ut est\",\n  \"<fighterid>\": {\n    \"seedNumber\": -98803154.74983066,\n    \"fighterWeight\": -82739074.53694785\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/auto?drawType=block",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"auto"
															],
															"query": [
																{
																	"key": "drawType",
																	"value": "block"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"exceptionDesc\": \"Ut est\",\n  \"<fighterid>\": {\n    \"seedNumber\": -98803154.74983066,\n    \"fighterWeight\": -82739074.53694785\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/auto?drawType=block",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"auto"
															],
															"query": [
																{
																	"key": "drawType",
																	"value": "block"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when invalid parameters are submitted",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"exceptionDesc\": \"Ut est\",\n  \"<fighterid>\": {\n    \"seedNumber\": -98803154.74983066,\n    \"fighterWeight\": -82739074.53694785\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/auto?drawType=block",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"auto"
															],
															"query": [
																{
																	"key": "drawType",
																	"value": "block"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"exceptionDesc\": \"Ut est\",\n  \"<fighterid>\": {\n    \"seedNumber\": -98803154.74983066,\n    \"fighterWeight\": -82739074.53694785\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/auto?drawType=block",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"auto"
															],
															"query": [
																{
																	"key": "drawType",
																	"value": "block"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"exceptionDesc\": \"Ut est\",\n  \"<fighterid>\": {\n    \"seedNumber\": -98803154.74983066,\n    \"fighterWeight\": -82739074.53694785\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/auto?drawType=block",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"auto"
															],
															"query": [
																{
																	"key": "drawType",
																	"value": "block"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Generate automatic draw for all weight categories registered under the same Sport and Audience",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/allweights",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"allweights"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/allweights",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"allweights"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/allweights",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"allweights"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/allweights",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"allweights"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "List activities related to AutoDraw",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/activities",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"activities"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Return activities stored for the Weight Category",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/activities",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"activities"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/activities",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"activities"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/activities",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"activities"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Populate seed positions from an array of AthenaPrintId",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"order\": [\n    \"quis aliqua mollit deserunt\",\n    \"sed sunt officia velit\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/seeds",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"seeds"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"order\": [\n    \"Lorem sit do et\",\n    \"i\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/seeds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"seeds"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"order\": [\n    \"Lorem sit do et\",\n    \"i\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/seeds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"seeds"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"order\": [\n    \"Lorem sit do et\",\n    \"i\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/seeds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"seeds"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Validate AutoDraw on a weight category",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/validate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"validate"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Return blockchain validation status",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/validate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"validate"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"events\": [\n    {\n      \"id\": \"magna in non\",\n      \"weights\": [\n        {\n          \"id\": \"ullamco Duis officia adipisicing exercitation\",\n          \"block\": 35812664.70157063,\n          \"status\": \"Lorem labore fugiat in sed\"\n        },\n        {\n          \"id\": \"labore dolor ut do Lorem\",\n          \"block\": 48486662.26094979,\n          \"status\": \"eiusmod officia irure ad\"\n        }\n      ]\n    },\n    {\n      \"id\": \"ut esse dolor\",\n      \"weights\": [\n        {\n          \"id\": \"con\",\n          \"block\": -71480720.35327564,\n          \"status\": \"velit\"\n        },\n        {\n          \"id\": \"ut esse aliquip et\",\n          \"block\": 38599457.68905461,\n          \"status\": \"reprehenderit sunt magna ea\"\n        }\n      ]\n    }\n  ]\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/validate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"validate"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/validate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"validate"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Reset draw",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/clear",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"clear"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/clear",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"clear"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorStr\": \"ex sunt\",\n  \"success\": \"ut pariatur sit anim\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/clear",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"clear"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/clear",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"draw",
																"clear"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "toggle-uww-ranking",
									"item": [
										{
											"name": "Toggle UWW Ranking",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-uww-ranking",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"toggle-uww-ranking"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-uww-ranking",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"toggle-uww-ranking"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-uww-ranking",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"toggle-uww-ranking"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-uww-ranking",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"toggle-uww-ranking"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Toggle UWW Ranking",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-uww-ranking/:value",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"toggle-uww-ranking",
														":value"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "value",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-uww-ranking/:value",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"toggle-uww-ranking",
																":value"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "value",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-uww-ranking/:value",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"toggle-uww-ranking",
																":value"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "value",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-uww-ranking/:value",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"toggle-uww-ranking",
																":value"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "value",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "toggle-visibility",
									"item": [
										{
											"name": "Set/Toggle Public visibility",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-visibility",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"toggle-visibility"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-visibility",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"toggle-visibility"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-visibility",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"toggle-visibility"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-visibility",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"toggle-visibility"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Set/Toggle Public visibility",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-visibility/:value",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"toggle-visibility",
														":value"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														},
														{
															"key": "value",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-visibility/:value",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"toggle-visibility",
																":value"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "value",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-visibility/:value",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"toggle-visibility",
																":value"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "value",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-visibility/:value",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"toggle-visibility",
																":value"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "enim",
																	"description": "(Required) "
																},
																{
																	"key": "value",
																	"value": "enim",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get a weightCategory",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns a Weight Category",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"weightCategory\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a weightCategory",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"elit occaecat id a\",\n  \"audience\": \"ullamco commodo\",\n  \"sport\": \"ad quis\",\n  \"minWeight\": 448,\n  \"maxWeight\": 427,\n  \"roundsNumber\": 9,\n  \"roundDuration\": 560,\n  \"overtime\": 51039967,\n  \"tournamentType\": \"aliqua aute\",\n  \"averageDuration\": 36270626,\n  \"color\": \"mo\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a weightCategory",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Print round robin results",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/round-robin-results/print",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"round-robin-results",
												"print"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/round-robin-results/print",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"round-robin-results",
														"print"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/round-robin-results/print",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"round-robin-results",
														"print"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/round-robin-results/print",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"round-robin-results",
														"print"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Print beachwrestling results",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/beachwrestling-results/print",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"beachwrestling-results",
												"print"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/beachwrestling-results/print",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"beachwrestling-results",
														"print"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/beachwrestling-results/print",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"beachwrestling-results",
														"print"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/beachwrestling-results/print",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"beachwrestling-results",
														"print"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get a weightCategory ranking",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/ranking",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"ranking"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/ranking",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"ranking"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"ranking\": {},\n  \"sportEventId\": \"enim elit commodo sint\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/ranking",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"ranking"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/ranking",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"ranking"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get team ranking",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/team-rankings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"team-rankings"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns team rankings",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/team-rankings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"team-rankings"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"sportEvent\": {\n    \"countWeightCategories\": -27958275\n  },\n  \"sportEventWeightCategory\": \"commodo elit\",\n  \"sportEventWeightCategories\": {},\n  \"teamsRankings\": {}\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/team-rankings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"team-rankings"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/team-rankings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"team-rankings"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Reset fights",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/fights/clear",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"fights",
												"clear"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/fights/clear",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"fights",
														"clear"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"success\": \"dolore mollit amet sunt\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/fights/clear",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"fights",
														"clear"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/fights/clear",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"fights",
														"clear"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Set a session day for a Weight Category",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"day\": 95317118\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/session-day",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"session-day"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"day\": 95317118\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/session-day",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"session-day"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"name\": \"ullamco sed tempor amet\",\n  \"audience\": \"deserun\",\n  \"sport\": \"Lorem velit nostrud\",\n  \"minWeight\": 112,\n  \"maxWeight\": 361,\n  \"roundsNumber\": 7,\n  \"roundDuration\": 232,\n  \"overtime\": -43385865,\n  \"tournamentType\": \"sit occaecat\",\n  \"sportEventId\": \"qui Duis ea incididunt\",\n  \"sportAlternateName\": \"adipisicing sit quis cillum\",\n  \"sportName\": \"occaecat proident reprehenderit dolor Ut\",\n  \"fullName\": \"occaec\",\n  \"alternateName\": \"dolor laborum et nulla\",\n  \"shortName\": \"esse est\",\n  \"sportId\": \"laborum velit reprehender\",\n  \"audienceId\": \"dolor culpa\",\n  \"audienceName\": \"Duis Excepteur exercitation quis\",\n  \"isVeteran\": false,\n  \"audienceShortName\": \"Duis eu id anim aliquip\",\n  \"isSinglebracketTournament\": false,\n  \"isDoublebracketTournament\": true,\n  \"isRoundRobinTournament\": false,\n  \"isBeltWrestlingCategory\": true,\n  \"isAlyshTournament\": true,\n  \"isKazakhCategory\": true,\n  \"isPankrationCategory\": false,\n  \"isBeachWrestlingTournament\": false,\n  \"fightersIsReady\": [\n    {\n      \"athleteId\": \"ipsum\",\n      \"sportEventWeightCategoryId\": \"labore exercitation Duis consequat ullamco\",\n      \"weightCategoryFullName\": \"sed culpa\",\n      \"weightCategoryShortName\": \"velit dolore quis Lorem sit\",\n      \"weightCategoryCountFights\": -46112249,\n      \"hasWeightCategoryBlockchainIds\": true,\n      \"weightCategoryCountReadyFighters\": -34924802,\n      \"countFights\": 81867793,\n      \"personId\": \"nostrud in\",\n      \"fullName\": \"quis est\",\n      \"preferedName\": \"cillum elit aliquip dolore qui\",\n      \"displayName\": \"ipsum adipisicing dolore eu\",\n      \"givenName\": \"magna\",\n      \"familyName\": \"consequat in\",\n      \"personPhoto\": \"velit minim\",\n      \"athenaPrintId\": \"nulla reprehenderit Lorem do\",\n      \"teamAlternateName\": \"esse anim quis\",\n      \"teamName\": \"laborum ut\",\n      \"teamCountryFlag\": \"adipisicing dolore\",\n      \"sportEventTeamId\": \"L\",\n      \"sportEventId\": \"incididunt in consequat laborum\",\n      \"drawRank\": -73102248,\n      \"robinGroup\": {\n        \"do_a\": -62219030\n      },\n      \"robinGroupRank\": -69348793,\n      \"teamRankingPoint\": 95982336,\n      \"uwwPoint\": 30186924,\n      \"isFinalistBronze\": false,\n      \"isFinalistGold\": false,\n      \"isFinalist\": false,\n      \"knockOutStatus\": {\n        \"non_eb\": 50466492,\n        \"laborum5\": \"ullamco ut\",\n        \"mollite_\": \"aliquip\",\n        \"laboris_\": 38797664\n      },\n      \"hasLostknockOut\": false,\n      \"completed\": -28447786,\n      \"wins\": 94904145,\n      \"losses\": -99316811,\n      \"technicalPointsFor\": -3241174,\n      \"technicalPointsAgainst\": -78475389,\n      \"technicalPointsDiff\": 60468197,\n      \"rankingPointsFor\": -85831117,\n      \"rankingPointsAgainst\": 15293012,\n      \"rankingPointsDiff\": 37364461,\n      \"winsEasy\": 27804089,\n      \"winsSuperiority\": 31390266,\n      \"rank\": 45776466,\n      \"rankRobinGroup\": -10828065,\n      \"fightByOpponent\": {\n        \"sportEventId\": \"ipsum ea tempor in irure\",\n        \"sportEventWeightCategoryId\": \"mollit dolore laboris in\",\n        \"fighter1Id\": \"adipisicing ullamco proident\",\n        \"fighter2Id\": \"adipisicing velit dolore exercitation\",\n        \"fighter2AthenaId\": 76565927,\n        \"team1Name\": \"ut magna enim in\",\n        \"team1AlternateName\": \"ad ipsum\",\n        \"team1FullName\": \"minim Duis\",\n        \"team1CountryFlag\": \"Duis\",\n        \"team1CountryFlagScoreboard\": \"cupidatat exercitation\",\n        \"team1CountryFlagMobile\": \"in consequat ad commodo\",\n        \"team1PoolName\": \"quis\",\n        \"team1FightByOpponent\": {\n          \"Ut6d\": true\n        },\n        \"team2Name\": \"ea aliquip in\",\n        \"team2AlternateName\": \"enim consectetur\",\n        \"team2FullName\": \"nulla consequat fugiat\",\n        \"team2CountryFlag\": \"tempor culpa commodo ex\",\n        \"team2CountryFlagScoreboard\": \"non\",\n        \"team2CountryFlagMobile\": \"ip\",\n        \"team2PoolName\": \"dolore Duis in\",\n        \"team2FightByOpponent\": {\n          \"deserunt_9\": -15477208,\n          \"non_e5\": false\n        },\n        \"roundFriendlyName\": \"ut fugiat\",\n        \"displayOrderInRound\": -36476309,\n        \"round1Id\": \"amet\",\n        \"round2Id\": \"ex do\",\n        \"countReferees\": -59743602,\n        \"sportId\": \"velit officia laborum nisi esse\",\n        \"athlete1Color\": \"amet ea\",\n        \"athlete2Color\": \"aute eu aliqua ipsum\",\n        \"athlete1TextColor\": \"in et eu\",\n        \"athlete2TextColor\": \"sint adipisicing\",\n        \"matName\": \"irure\",\n        \"sessionId\": \"sit\",\n        \"sessionName\": \"sunt commodo anim irure\",\n        \"sessionStartDate\": \"1970-09-05T17:02:22.359Z\",\n        \"technicalPoints\": {\n          \"culpa_42\": -40868259.03368565\n        },\n        \"technicalPointsDetail\": {\n          \"elit4d3\": false,\n          \"commodo__\": -62119471\n        },\n        \"technicalPointsTagStatus\": \"dolore laboris commodo\",\n        \"technicalPointIds\": {\n          \"voluptate_8\": 46887001,\n          \"minim_3e_\": false\n        },\n        \"cautionsList\": {\n          \"elit_4\": \"in\",\n          \"ipsum_c30\": -93910502.46712323,\n          \"aliquip_4f5\": \"esse aliqua amet laborum\",\n          \"Excepteur4a\": 83686434.16635194\n        },\n        \"isCompleted\": false,\n        \"isReady\": true,\n        \"isRobinGroupFight\": true,\n        \"winnerFighter\": \"deserunt pariatur ad\",\n        \"winnerTeam\": \"consequat Ut deserunt\",\n        \"winnerTeamAlternateName\": \"sint eu occaecat aliquip\",\n        \"sportEventName\": \"cillum sint et\",\n        \"sportEventStartDate\": \"1964-04-20T09:58:05.169Z\",\n        \"sportEventLogo\": \"commodo\",\n        \"rankingPoint\": {\n          \"fightId\": \"cupidatat dolor amet\",\n          \"victoryType\": \"amet adipisicing do elit\",\n          \"fighterId\": \"exercitation elit minim\",\n          \"fighterFullName\": \"Duis ea\",\n          \"victoryTypeId\": \"culpa eu velit\",\n          \"victoryTypeName\": \"Excepteur qui fugiat\",\n          \"victoryTypeNiceName\": \"m\",\n          \"sportId\": \"do\",\n          \"sportEventId\": \"eiusmod labore ullamco laborum\",\n          \"id\": \"ex labor\",\n          \"fighter\": \"dolor anim non mollit\",\n          \"second\": 89119\n        },\n        \"completedDate\": \"1995-04-10T20:07:13.745Z\",\n        \"roundsNumber\": 56264634,\n        \"roundDuration\": -87971029,\n        \"sportAlternateName\": \"consectetur consequat\",\n        \"weightCategoryName\": \"occaeca\",\n        \"weightCategoryAlternateName\": \"velit elit quis \",\n        \"weightCategoryShortName\": \"pariatur\",\n        \"weightCategoryMaxWeight\": 87754096,\n        \"weightCategoryFullName\": \"consequat ullamco ad cupidatat proident\",\n        \"isWeightCategoryVisible\": true,\n        \"weightCategoryAverageDuration\": -36562592,\n        \"weightCategoryColor\": \"reprehenderit cupidatat\",\n        \"weightCategoryReady\": false,\n        \"weightCategoryStarted\": true,\n        \"weightCategoryCompleted\": true,\n        \"victoryTypes\": {\n          \"est_8\": true,\n          \"ex5d\": \"et\",\n          \"consequatb\": true\n        },\n        \"victoryTypesArray\": {\n          \"aute_e2\": false\n        },\n        \"audienceId\": \"labore\",\n        \"audienceName\": \"officia dolore mollit consectetur minim\",\n        \"audienceShortName\": \"minim\",\n        \"sportName\": \"id aute dolore\",\n        \"injuryTime\": -83706957,\n        \"warnings\": false,\n        \"cautions\": 37021408,\n        \"legFouls\": -69547557,\n        \"activityTime\": true,\n        \"fighter1FullName\": \"dolor minim officia cupidatat\",\n        \"fighter1DisplayName\": \"laborum laboris ad adipisicing\",\n        \"fighter1FamilyName\": \"est enim in tempor\",\n        \"fighter1GivenName\": \"ut est in consectetur\",\n        \"fighter1PreferedName\": \"ut elit voluptate dolor\",\n        \"fighter1DrawRank\": \"incididunt Lorem ad\",\n        \"fighter1RobinRank\": \"ex ipsum\",\n        \"fighter1SeedNumber\": -32410940,\n        \"fighter1AthleteId\": \"in ullamco\",\n        \"fighter1PersonId\": \"in\",\n        \"fighter1AthenaId\": -92481259,\n        \"fighter1IsSeeded\": true,\n        \"fighter1Status\": -96196548,\n        \"fighter1IsInjured\": false,\n        \"fighter1Weight\": 49936657.594882786,\n        \"fighter2FullName\": \"in eu tempor ea laboris\",\n        \"fighter2DisplayName\": \"deserunt non\",\n        \"fighter2FamilyName\": \"in mollit adipisicin\",\n        \"fighter2GivenName\": \"dolor magna exercitation\",\n        \"fighter2PreferedName\": \"dolore\",\n        \"fighter2DrawRank\": 46969925,\n        \"fighter2RobinRank\": -86445307,\n        \"fighter2SeedNumber\": 26922470,\n        \"fighter2AthleteId\": \"aliqua nisi\",\n        \"fighter2PersonId\": \"qui Excepteur proident\",\n        \"fighter2IsSeeded\": false,\n        \"fighter2Status\": -87362860,\n        \"fighter2IsInjured\": true,\n        \"fighter2Weight\": -21268905.526404724,\n        \"result\": \"amet sit\",\n        \"victoryType\": \"veniam sed\",\n        \"endTime\": 88607763,\n        \"endDate\": \"1993-12-20T08:48:50.677Z\",\n        \"expectedDateStart\": \"2021-07-29T08:46:29.320Z\",\n        \"expectedStartDate\": \"1975-06-19T21:37:30.142Z\",\n        \"team1Fighters\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          }\n        ],\n        \"team2Fighters\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          }\n        ],\n        \"rankingPointNiceName\": \"cupidatat minim Excepteur\",\n        \"resultText\": \"in\",\n        \"resultTextSmall\": \"dolore\",\n        \"roundRenamedSmall\": \"nostrud commodo\",\n        \"parentFightNumber1\": -58070405,\n        \"parentFightNumber2\": 26797020,\n        \"fightRefereesWithRole\": [\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"needsRefresh\": true,\n        \"isCountdown\": false,\n        \"branding\": \"do velit\",\n        \"id\": \"eiusmod cillum pro\",\n        \"parentFight1Id\": \"nisi in ut cu\",\n        \"parentFight2Id\": \"id officia est sed\",\n        \"fighter1\": \"Ut culpa\",\n        \"fighter1RankingPoint\": 3343,\n        \"fighter2\": \"proident nostrud ut et\",\n        \"fighter2RankingPoint\": 1460,\n        \"refereeGroup\": \"i\",\n        \"sportEventTeam1Id\": \"sit qui\",\n        \"sportEventTeam2Id\": \"pariatur sunt\",\n        \"fightMatId\": \"Ut\",\n        \"round\": \"Duis eiusmod\",\n        \"qualifying\": false,\n        \"teamFightId\": \"nulla sunt\",\n        \"status\": 51973797,\n        \"rankingCheck\": false,\n        \"technicalCheck\": true,\n        \"weight\": 97697984,\n        \"fightNumber\": 6716,\n        \"roundWeight\": 1421,\n        \"repechageWeight\": 5448,\n        \"repechageSection\": 4596,\n        \"displayOrder\": 202,\n        \"canceled\": \"1971-01-24T23:41:34.942Z\",\n        \"fightReferees\": [\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"odfCode\": \"proident i\",\n        \"refereeComment\": \"ut dolor ullamco aute e\",\n        \"uploaderFight\": {\n          \"qui_68\": false\n        }\n      },\n      \"isCompeting\": false,\n      \"hasOpenFight\": true,\n      \"isDisqualified\": false,\n      \"isNotRanked\": true,\n      \"isInjured\": false,\n      \"isForfeit\": false,\n      \"isRobinGroupNotRanked\": true,\n      \"accreditationStatus\": 43131621,\n      \"id\": \"ex occaecat\",\n      \"sportEventWeightCategory\": \"deserunt cupidatat\",\n      \"weight\": 259,\n      \"drawNumber\": 207,\n      \"seedNumber\": 0,\n      \"fighterWeight\": \"non cillum\",\n      \"points\": 58,\n      \"fighterStatus\": 78157267\n    },\n    {\n      \"athleteId\": \"eu Ut\",\n      \"sportEventWeightCategoryId\": \"culpa aliquip\",\n      \"weightCategoryFullName\": \"irure\",\n      \"weightCategoryShortName\": \"occaecat exercitation ex amet\",\n      \"weightCategoryCountFights\": -50605600,\n      \"hasWeightCategoryBlockchainIds\": false,\n      \"weightCategoryCountReadyFighters\": 29265179,\n      \"countFights\": -62525300,\n      \"personId\": \"voluptate deserunt pariatur amet\",\n      \"fullName\": \"culpa mollit pariatur dolore ex\",\n      \"preferedName\": \"dolor anim qui eiusmod culpa\",\n      \"displayName\": \"sint non amet Lorem\",\n      \"givenName\": \"aute enim\",\n      \"familyName\": \"in sed reprehenderit Lorem\",\n      \"personPhoto\": \"cupidatat qui\",\n      \"athenaPrintId\": \"officia pariatur minim\",\n      \"teamAlternateName\": \"do ullamco nulla\",\n      \"teamName\": \"aute consectetur\",\n      \"teamCountryFlag\": \"culpa aliqua eiusmod dolore\",\n      \"sportEventTeamId\": \"magna Lorem minim\",\n      \"sportEventId\": \"dolor ea officia consequat\",\n      \"drawRank\": -560004,\n      \"robinGroup\": {\n        \"commodo_59e\": 2141251,\n        \"sunt_84\": 58592135\n      },\n      \"robinGroupRank\": 2357150,\n      \"teamRankingPoint\": 28453512,\n      \"uwwPoint\": -69586696,\n      \"isFinalistBronze\": true,\n      \"isFinalistGold\": true,\n      \"isFinalist\": true,\n      \"knockOutStatus\": {\n        \"aliquip5\": true,\n        \"ex_560\": \"Excepteur quis non officia\",\n        \"consequat16\": true,\n        \"dolor71\": \"est do Lorem ullamco\"\n      },\n      \"hasLostknockOut\": true,\n      \"completed\": 29411846,\n      \"wins\": -36916242,\n      \"losses\": -55773707,\n      \"technicalPointsFor\": 49738570,\n      \"technicalPointsAgainst\": -64627222,\n      \"technicalPointsDiff\": -82341866,\n      \"rankingPointsFor\": -79190409,\n      \"rankingPointsAgainst\": -77436728,\n      \"rankingPointsDiff\": -17655500,\n      \"winsEasy\": -84638280,\n      \"winsSuperiority\": 72142393,\n      \"rank\": 51447839,\n      \"rankRobinGroup\": 97325081,\n      \"fightByOpponent\": {\n        \"sportEventId\": \"tempor\",\n        \"sportEventWeightCategoryId\": \"ex proident\",\n        \"fighter1Id\": \"exercitation Excepteur anim elit adipisicing\",\n        \"fighter2Id\": \"laborum sint\",\n        \"fighter2AthenaId\": -3092014,\n        \"team1Name\": \"ullamco adipisicing\",\n        \"team1AlternateName\": \"ut in mollit adipisicing\",\n        \"team1FullName\": \"do officia amet\",\n        \"team1CountryFlag\": \"ea ut\",\n        \"team1CountryFlagScoreboard\": \"sunt velit pariatur\",\n        \"team1CountryFlagMobile\": \"ad fugiat nisi\",\n        \"team1PoolName\": \"dolor velit deserunt dolor adipisicing\",\n        \"team1FightByOpponent\": {\n          \"culpa_c9\": -52509151,\n          \"nisi_c3\": 53724574.4608278\n        },\n        \"team2Name\": \"dolore ull\",\n        \"team2AlternateName\": \"in fugiat quis exercitation proident\",\n        \"team2FullName\": \"amet enim\",\n        \"team2CountryFlag\": \"ad Ut veniam\",\n        \"team2CountryFlagScoreboard\": \"aute mollit\",\n        \"team2CountryFlagMobile\": \"aliqua esse voluptate\",\n        \"team2PoolName\": \"sit dolore\",\n        \"team2FightByOpponent\": {\n          \"in_5\": \"aliqua nisi\",\n          \"dolor_c\": 54920831.374750495\n        },\n        \"roundFriendlyName\": \"minim eu\",\n        \"displayOrderInRound\": -10134379,\n        \"round1Id\": \"id dolor ut tempor\",\n        \"round2Id\": \"tempor\",\n        \"countReferees\": 52599831,\n        \"sportId\": \"laboris dolor quis fugi\",\n        \"athlete1Color\": \"in sed ipsum dolore qui\",\n        \"athlete2Color\": \"velit et ad pari\",\n        \"athlete1TextColor\": \"aliquip id est\",\n        \"athlete2TextColor\": \"et cillum Excepteur adipisicing\",\n        \"matName\": \"elit anim quis ad enim\",\n        \"sessionId\": \"dolor non ipsum nisi quis\",\n        \"sessionName\": \"reprehenderit elit adipisicing sint\",\n        \"sessionStartDate\": \"1964-10-06T06:47:39.829Z\",\n        \"technicalPoints\": {\n          \"consequat_499\": false,\n          \"fugiat17\": 58616991\n        },\n        \"technicalPointsDetail\": {\n          \"aliquip68\": 65063722.12670013,\n          \"cillum_9\": 23592815,\n          \"labore6b\": \"nulla dolor eu consequat fugiat\"\n        },\n        \"technicalPointsTagStatus\": \"eiusmod cillum\",\n        \"technicalPointIds\": {\n          \"esseab\": 68059443.40034458\n        },\n        \"cautionsList\": {\n          \"labore111\": false,\n          \"ut_87\": \"ad ullamco\",\n          \"cillum__\": \"culpa minim\"\n        },\n        \"isCompleted\": false,\n        \"isReady\": false,\n        \"isRobinGroupFight\": true,\n        \"winnerFighter\": \"Excepteur id Ut\",\n        \"winnerTeam\": \"aute voluptate dolore\",\n        \"winnerTeamAlternateName\": \"est in culpa\",\n        \"sportEventName\": \"consectetur velit id\",\n        \"sportEventStartDate\": \"1979-10-09T20:54:21.951Z\",\n        \"sportEventLogo\": \"id incididunt\",\n        \"rankingPoint\": {\n          \"fightId\": \"ut do\",\n          \"victoryType\": \"dolore\",\n          \"fighterId\": \"et quis nisi aliqua\",\n          \"fighterFullName\": \"Lorem aliquip\",\n          \"victoryTypeId\": \"Lorem do in proident\",\n          \"victoryTypeName\": \"aute exercita\",\n          \"victoryTypeNiceName\": \"laborum voluptate ut\",\n          \"sportId\": \"nulla consectetur\",\n          \"sportEventId\": \"reprehenderit de\",\n          \"id\": \"consequat nisi aliquip est\",\n          \"fighter\": \"consectetur ut dolor\",\n          \"second\": 70945\n        },\n        \"completedDate\": \"1978-09-27T18:54:59.463Z\",\n        \"roundsNumber\": 26591676,\n        \"roundDuration\": -36564297,\n        \"sportAlternateName\": \"fugiat sed\",\n        \"weightCategoryName\": \"ex sint\",\n        \"weightCategoryAlternateName\": \"dolore anim incididunt velit\",\n        \"weightCategoryShortName\": \"i\",\n        \"weightCategoryMaxWeight\": 40552733,\n        \"weightCategoryFullName\": \"veniam sunt aute non\",\n        \"isWeightCategoryVisible\": false,\n        \"weightCategoryAverageDuration\": 48333119,\n        \"weightCategoryColor\": \"deserunt cupidatat aliquip Ut do\",\n        \"weightCategoryReady\": true,\n        \"weightCategoryStarted\": true,\n        \"weightCategoryCompleted\": false,\n        \"victoryTypes\": {\n          \"Excepteur_0\": 41070264,\n          \"ullamco_281\": \"ea dolor\"\n        },\n        \"victoryTypesArray\": {\n          \"adipisicing_70\": \"in aute\",\n          \"cillumae\": \"pariatur\"\n        },\n        \"audienceId\": \"in mollit\",\n        \"audienceName\": \"proident quis\",\n        \"audienceShortName\": \"officia veniam consectetur\",\n        \"sportName\": \"dolor ex\",\n        \"injuryTime\": 1909450,\n        \"warnings\": true,\n        \"cautions\": 55193487,\n        \"legFouls\": -14983423,\n        \"activityTime\": true,\n        \"fighter1FullName\": \"ea id\",\n        \"fighter1DisplayName\": \"velit aute d\",\n        \"fighter1FamilyName\": \"reprehenderit incididunt\",\n        \"fighter1GivenName\": \"sed sunt consectetur\",\n        \"fighter1PreferedName\": \"esse ut dolore officia sed\",\n        \"fighter1DrawRank\": \"eiusmod\",\n        \"fighter1RobinRank\": \"ut\",\n        \"fighter1SeedNumber\": -34780934,\n        \"fighter1AthleteId\": \"sit dolor null\",\n        \"fighter1PersonId\": \"Ut laboris Lorem elit\",\n        \"fighter1AthenaId\": -29700342,\n        \"fighter1IsSeeded\": true,\n        \"fighter1Status\": -86197658,\n        \"fighter1IsInjured\": true,\n        \"fighter1Weight\": 17540672.277966335,\n        \"fighter2FullName\": \"laborum nisi ut\",\n        \"fighter2DisplayName\": \"magna\",\n        \"fighter2FamilyName\": \"esse enim aliquip\",\n        \"fighter2GivenName\": \"conse\",\n        \"fighter2PreferedName\": \"eu anim\",\n        \"fighter2DrawRank\": 69032984,\n        \"fighter2RobinRank\": 87111244,\n        \"fighter2SeedNumber\": -99731429,\n        \"fighter2AthleteId\": \"aute\",\n        \"fighter2PersonId\": \"irur\",\n        \"fighter2IsSeeded\": true,\n        \"fighter2Status\": 70948930,\n        \"fighter2IsInjured\": false,\n        \"fighter2Weight\": -6453713.679055631,\n        \"result\": \"dolor exercitation\",\n        \"victoryType\": \"aute tempor Excepteur\",\n        \"endTime\": -50045518,\n        \"endDate\": \"2001-08-12T11:02:59.527Z\",\n        \"expectedDateStart\": \"1985-06-11T09:59:20.789Z\",\n        \"expectedStartDate\": \"2015-05-24T23:17:09.696Z\",\n        \"team1Fighters\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          }\n        ],\n        \"team2Fighters\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          }\n        ],\n        \"rankingPointNiceName\": \"pariatur ex sint enim\",\n        \"resultText\": \"in ut tempor\",\n        \"resultTextSmall\": \"ex id veniam Lorem si\",\n        \"roundRenamedSmall\": \"Excepteur ex\",\n        \"parentFightNumber1\": 42689832,\n        \"parentFightNumber2\": 82903685,\n        \"fightRefereesWithRole\": [\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"needsRefresh\": true,\n        \"isCountdown\": false,\n        \"branding\": \"enim ea dolore in consequat\",\n        \"id\": \"velit qui\",\n        \"parentFight1Id\": \"aliqua ipsum velit\",\n        \"parentFight2Id\": \"nostrud velit cillum non\",\n        \"fighter1\": \"ipsum do sunt\",\n        \"fighter1RankingPoint\": 8524,\n        \"fighter2\": \"enim sint commodo\",\n        \"fighter2RankingPoint\": 2350,\n        \"refereeGroup\": \"e\",\n        \"sportEventTeam1Id\": \"non et nisi\",\n        \"sportEventTeam2Id\": \"voluptate\",\n        \"fightMatId\": \"labore\",\n        \"round\": \"in incididunt\",\n        \"qualifying\": false,\n        \"teamFightId\": \"exercitation ipsum adipisicing consequat e\",\n        \"status\": -33448786,\n        \"rankingCheck\": true,\n        \"technicalCheck\": false,\n        \"weight\": -59931647,\n        \"fightNumber\": 697,\n        \"roundWeight\": 2256,\n        \"repechageWeight\": 7393,\n        \"repechageSection\": 3378,\n        \"displayOrder\": 2504,\n        \"canceled\": \"1964-07-20T01:36:15.948Z\",\n        \"fightReferees\": [\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"odfCode\": \"quis veniam sint magna\",\n        \"refereeComment\": \"cillum ad enim\",\n        \"uploaderFight\": {\n          \"elit_8\": 17390028\n        }\n      },\n      \"isCompeting\": true,\n      \"hasOpenFight\": false,\n      \"isDisqualified\": false,\n      \"isNotRanked\": true,\n      \"isInjured\": false,\n      \"isForfeit\": false,\n      \"isRobinGroupNotRanked\": false,\n      \"accreditationStatus\": 51052269,\n      \"id\": \"amet sed\",\n      \"sportEventWeightCategory\": \"quis in esse\",\n      \"weight\": 478,\n      \"drawNumber\": 161,\n      \"seedNumber\": 9,\n      \"fighterWeight\": \"labore ut\",\n      \"points\": 26,\n      \"fighterStatus\": -33677595\n    }\n  ],\n  \"countReadyTeams\": 23469805,\n  \"countReadyFighters\": -66642024,\n  \"countReadySeededFighters\": 73262825,\n  \"countSeededFighters\": -57962519,\n  \"countFighters\": -12091959,\n  \"maxSeeds\": -16639937,\n  \"isRepechageSet\": true,\n  \"countTeams\": 6729096,\n  \"countFights\": 31348889,\n  \"countFightsLive\": 62259795,\n  \"perfectNumber\": {\n    \"eu_82\": 77161672,\n    \"sedd9\": false\n  },\n  \"isCompleted\": true,\n  \"isStarted\": false,\n  \"isRobin\": false,\n  \"isRobinGrouped\": false,\n  \"id\": \"ex Lorem cillum\",\n  \"averageDuration\": -45986190,\n  \"color\": \"adi\",\n  \"odfCode\": \"ex est ut\",\n  \"uwwRanking\": true,\n  \"blockchainIds\": {\n    \"culpa_df0\": true,\n    \"voluptate8\": -80055811\n  },\n  \"sessionStartDay\": 29390093,\n  \"matAssignment\": -82118587,\n  \"visible\": true,\n  \"fightersUpdated\": \"2008-11-10T22:03:23.125Z\",\n  \"athenaFinalized\": false\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"day\": 95317118\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/session-day",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"session-day"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"day\": 95317118\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/session-day",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"session-day"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Dedicate a Weight Category to a Mat",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"matNumber\": 12116157\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/assign-mat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"assign-mat"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"matNumber\": 12116157\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/assign-mat",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"assign-mat"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"name\": \"ullamco sed tempor amet\",\n  \"audience\": \"deserun\",\n  \"sport\": \"Lorem velit nostrud\",\n  \"minWeight\": 112,\n  \"maxWeight\": 361,\n  \"roundsNumber\": 7,\n  \"roundDuration\": 232,\n  \"overtime\": -43385865,\n  \"tournamentType\": \"sit occaecat\",\n  \"sportEventId\": \"qui Duis ea incididunt\",\n  \"sportAlternateName\": \"adipisicing sit quis cillum\",\n  \"sportName\": \"occaecat proident reprehenderit dolor Ut\",\n  \"fullName\": \"occaec\",\n  \"alternateName\": \"dolor laborum et nulla\",\n  \"shortName\": \"esse est\",\n  \"sportId\": \"laborum velit reprehender\",\n  \"audienceId\": \"dolor culpa\",\n  \"audienceName\": \"Duis Excepteur exercitation quis\",\n  \"isVeteran\": false,\n  \"audienceShortName\": \"Duis eu id anim aliquip\",\n  \"isSinglebracketTournament\": false,\n  \"isDoublebracketTournament\": true,\n  \"isRoundRobinTournament\": false,\n  \"isBeltWrestlingCategory\": true,\n  \"isAlyshTournament\": true,\n  \"isKazakhCategory\": true,\n  \"isPankrationCategory\": false,\n  \"isBeachWrestlingTournament\": false,\n  \"fightersIsReady\": [\n    {\n      \"athleteId\": \"ipsum\",\n      \"sportEventWeightCategoryId\": \"labore exercitation Duis consequat ullamco\",\n      \"weightCategoryFullName\": \"sed culpa\",\n      \"weightCategoryShortName\": \"velit dolore quis Lorem sit\",\n      \"weightCategoryCountFights\": -46112249,\n      \"hasWeightCategoryBlockchainIds\": true,\n      \"weightCategoryCountReadyFighters\": -34924802,\n      \"countFights\": 81867793,\n      \"personId\": \"nostrud in\",\n      \"fullName\": \"quis est\",\n      \"preferedName\": \"cillum elit aliquip dolore qui\",\n      \"displayName\": \"ipsum adipisicing dolore eu\",\n      \"givenName\": \"magna\",\n      \"familyName\": \"consequat in\",\n      \"personPhoto\": \"velit minim\",\n      \"athenaPrintId\": \"nulla reprehenderit Lorem do\",\n      \"teamAlternateName\": \"esse anim quis\",\n      \"teamName\": \"laborum ut\",\n      \"teamCountryFlag\": \"adipisicing dolore\",\n      \"sportEventTeamId\": \"L\",\n      \"sportEventId\": \"incididunt in consequat laborum\",\n      \"drawRank\": -73102248,\n      \"robinGroup\": {\n        \"do_a\": -62219030\n      },\n      \"robinGroupRank\": -69348793,\n      \"teamRankingPoint\": 95982336,\n      \"uwwPoint\": 30186924,\n      \"isFinalistBronze\": false,\n      \"isFinalistGold\": false,\n      \"isFinalist\": false,\n      \"knockOutStatus\": {\n        \"non_eb\": 50466492,\n        \"laborum5\": \"ullamco ut\",\n        \"mollite_\": \"aliquip\",\n        \"laboris_\": 38797664\n      },\n      \"hasLostknockOut\": false,\n      \"completed\": -28447786,\n      \"wins\": 94904145,\n      \"losses\": -99316811,\n      \"technicalPointsFor\": -3241174,\n      \"technicalPointsAgainst\": -78475389,\n      \"technicalPointsDiff\": 60468197,\n      \"rankingPointsFor\": -85831117,\n      \"rankingPointsAgainst\": 15293012,\n      \"rankingPointsDiff\": 37364461,\n      \"winsEasy\": 27804089,\n      \"winsSuperiority\": 31390266,\n      \"rank\": 45776466,\n      \"rankRobinGroup\": -10828065,\n      \"fightByOpponent\": {\n        \"sportEventId\": \"ipsum ea tempor in irure\",\n        \"sportEventWeightCategoryId\": \"mollit dolore laboris in\",\n        \"fighter1Id\": \"adipisicing ullamco proident\",\n        \"fighter2Id\": \"adipisicing velit dolore exercitation\",\n        \"fighter2AthenaId\": 76565927,\n        \"team1Name\": \"ut magna enim in\",\n        \"team1AlternateName\": \"ad ipsum\",\n        \"team1FullName\": \"minim Duis\",\n        \"team1CountryFlag\": \"Duis\",\n        \"team1CountryFlagScoreboard\": \"cupidatat exercitation\",\n        \"team1CountryFlagMobile\": \"in consequat ad commodo\",\n        \"team1PoolName\": \"quis\",\n        \"team1FightByOpponent\": {\n          \"Ut6d\": true\n        },\n        \"team2Name\": \"ea aliquip in\",\n        \"team2AlternateName\": \"enim consectetur\",\n        \"team2FullName\": \"nulla consequat fugiat\",\n        \"team2CountryFlag\": \"tempor culpa commodo ex\",\n        \"team2CountryFlagScoreboard\": \"non\",\n        \"team2CountryFlagMobile\": \"ip\",\n        \"team2PoolName\": \"dolore Duis in\",\n        \"team2FightByOpponent\": {\n          \"deserunt_9\": -15477208,\n          \"non_e5\": false\n        },\n        \"roundFriendlyName\": \"ut fugiat\",\n        \"displayOrderInRound\": -36476309,\n        \"round1Id\": \"amet\",\n        \"round2Id\": \"ex do\",\n        \"countReferees\": -59743602,\n        \"sportId\": \"velit officia laborum nisi esse\",\n        \"athlete1Color\": \"amet ea\",\n        \"athlete2Color\": \"aute eu aliqua ipsum\",\n        \"athlete1TextColor\": \"in et eu\",\n        \"athlete2TextColor\": \"sint adipisicing\",\n        \"matName\": \"irure\",\n        \"sessionId\": \"sit\",\n        \"sessionName\": \"sunt commodo anim irure\",\n        \"sessionStartDate\": \"1970-09-05T17:02:22.359Z\",\n        \"technicalPoints\": {\n          \"culpa_42\": -40868259.03368565\n        },\n        \"technicalPointsDetail\": {\n          \"elit4d3\": false,\n          \"commodo__\": -62119471\n        },\n        \"technicalPointsTagStatus\": \"dolore laboris commodo\",\n        \"technicalPointIds\": {\n          \"voluptate_8\": 46887001,\n          \"minim_3e_\": false\n        },\n        \"cautionsList\": {\n          \"elit_4\": \"in\",\n          \"ipsum_c30\": -93910502.46712323,\n          \"aliquip_4f5\": \"esse aliqua amet laborum\",\n          \"Excepteur4a\": 83686434.16635194\n        },\n        \"isCompleted\": false,\n        \"isReady\": true,\n        \"isRobinGroupFight\": true,\n        \"winnerFighter\": \"deserunt pariatur ad\",\n        \"winnerTeam\": \"consequat Ut deserunt\",\n        \"winnerTeamAlternateName\": \"sint eu occaecat aliquip\",\n        \"sportEventName\": \"cillum sint et\",\n        \"sportEventStartDate\": \"1964-04-20T09:58:05.169Z\",\n        \"sportEventLogo\": \"commodo\",\n        \"rankingPoint\": {\n          \"fightId\": \"cupidatat dolor amet\",\n          \"victoryType\": \"amet adipisicing do elit\",\n          \"fighterId\": \"exercitation elit minim\",\n          \"fighterFullName\": \"Duis ea\",\n          \"victoryTypeId\": \"culpa eu velit\",\n          \"victoryTypeName\": \"Excepteur qui fugiat\",\n          \"victoryTypeNiceName\": \"m\",\n          \"sportId\": \"do\",\n          \"sportEventId\": \"eiusmod labore ullamco laborum\",\n          \"id\": \"ex labor\",\n          \"fighter\": \"dolor anim non mollit\",\n          \"second\": 89119\n        },\n        \"completedDate\": \"1995-04-10T20:07:13.745Z\",\n        \"roundsNumber\": 56264634,\n        \"roundDuration\": -87971029,\n        \"sportAlternateName\": \"consectetur consequat\",\n        \"weightCategoryName\": \"occaeca\",\n        \"weightCategoryAlternateName\": \"velit elit quis \",\n        \"weightCategoryShortName\": \"pariatur\",\n        \"weightCategoryMaxWeight\": 87754096,\n        \"weightCategoryFullName\": \"consequat ullamco ad cupidatat proident\",\n        \"isWeightCategoryVisible\": true,\n        \"weightCategoryAverageDuration\": -36562592,\n        \"weightCategoryColor\": \"reprehenderit cupidatat\",\n        \"weightCategoryReady\": false,\n        \"weightCategoryStarted\": true,\n        \"weightCategoryCompleted\": true,\n        \"victoryTypes\": {\n          \"est_8\": true,\n          \"ex5d\": \"et\",\n          \"consequatb\": true\n        },\n        \"victoryTypesArray\": {\n          \"aute_e2\": false\n        },\n        \"audienceId\": \"labore\",\n        \"audienceName\": \"officia dolore mollit consectetur minim\",\n        \"audienceShortName\": \"minim\",\n        \"sportName\": \"id aute dolore\",\n        \"injuryTime\": -83706957,\n        \"warnings\": false,\n        \"cautions\": 37021408,\n        \"legFouls\": -69547557,\n        \"activityTime\": true,\n        \"fighter1FullName\": \"dolor minim officia cupidatat\",\n        \"fighter1DisplayName\": \"laborum laboris ad adipisicing\",\n        \"fighter1FamilyName\": \"est enim in tempor\",\n        \"fighter1GivenName\": \"ut est in consectetur\",\n        \"fighter1PreferedName\": \"ut elit voluptate dolor\",\n        \"fighter1DrawRank\": \"incididunt Lorem ad\",\n        \"fighter1RobinRank\": \"ex ipsum\",\n        \"fighter1SeedNumber\": -32410940,\n        \"fighter1AthleteId\": \"in ullamco\",\n        \"fighter1PersonId\": \"in\",\n        \"fighter1AthenaId\": -92481259,\n        \"fighter1IsSeeded\": true,\n        \"fighter1Status\": -96196548,\n        \"fighter1IsInjured\": false,\n        \"fighter1Weight\": 49936657.594882786,\n        \"fighter2FullName\": \"in eu tempor ea laboris\",\n        \"fighter2DisplayName\": \"deserunt non\",\n        \"fighter2FamilyName\": \"in mollit adipisicin\",\n        \"fighter2GivenName\": \"dolor magna exercitation\",\n        \"fighter2PreferedName\": \"dolore\",\n        \"fighter2DrawRank\": 46969925,\n        \"fighter2RobinRank\": -86445307,\n        \"fighter2SeedNumber\": 26922470,\n        \"fighter2AthleteId\": \"aliqua nisi\",\n        \"fighter2PersonId\": \"qui Excepteur proident\",\n        \"fighter2IsSeeded\": false,\n        \"fighter2Status\": -87362860,\n        \"fighter2IsInjured\": true,\n        \"fighter2Weight\": -21268905.526404724,\n        \"result\": \"amet sit\",\n        \"victoryType\": \"veniam sed\",\n        \"endTime\": 88607763,\n        \"endDate\": \"1993-12-20T08:48:50.677Z\",\n        \"expectedDateStart\": \"2021-07-29T08:46:29.320Z\",\n        \"expectedStartDate\": \"1975-06-19T21:37:30.142Z\",\n        \"team1Fighters\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          }\n        ],\n        \"team2Fighters\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          }\n        ],\n        \"rankingPointNiceName\": \"cupidatat minim Excepteur\",\n        \"resultText\": \"in\",\n        \"resultTextSmall\": \"dolore\",\n        \"roundRenamedSmall\": \"nostrud commodo\",\n        \"parentFightNumber1\": -58070405,\n        \"parentFightNumber2\": 26797020,\n        \"fightRefereesWithRole\": [\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"needsRefresh\": true,\n        \"isCountdown\": false,\n        \"branding\": \"do velit\",\n        \"id\": \"eiusmod cillum pro\",\n        \"parentFight1Id\": \"nisi in ut cu\",\n        \"parentFight2Id\": \"id officia est sed\",\n        \"fighter1\": \"Ut culpa\",\n        \"fighter1RankingPoint\": 3343,\n        \"fighter2\": \"proident nostrud ut et\",\n        \"fighter2RankingPoint\": 1460,\n        \"refereeGroup\": \"i\",\n        \"sportEventTeam1Id\": \"sit qui\",\n        \"sportEventTeam2Id\": \"pariatur sunt\",\n        \"fightMatId\": \"Ut\",\n        \"round\": \"Duis eiusmod\",\n        \"qualifying\": false,\n        \"teamFightId\": \"nulla sunt\",\n        \"status\": 51973797,\n        \"rankingCheck\": false,\n        \"technicalCheck\": true,\n        \"weight\": 97697984,\n        \"fightNumber\": 6716,\n        \"roundWeight\": 1421,\n        \"repechageWeight\": 5448,\n        \"repechageSection\": 4596,\n        \"displayOrder\": 202,\n        \"canceled\": \"1971-01-24T23:41:34.942Z\",\n        \"fightReferees\": [\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"odfCode\": \"proident i\",\n        \"refereeComment\": \"ut dolor ullamco aute e\",\n        \"uploaderFight\": {\n          \"qui_68\": false\n        }\n      },\n      \"isCompeting\": false,\n      \"hasOpenFight\": true,\n      \"isDisqualified\": false,\n      \"isNotRanked\": true,\n      \"isInjured\": false,\n      \"isForfeit\": false,\n      \"isRobinGroupNotRanked\": true,\n      \"accreditationStatus\": 43131621,\n      \"id\": \"ex occaecat\",\n      \"sportEventWeightCategory\": \"deserunt cupidatat\",\n      \"weight\": 259,\n      \"drawNumber\": 207,\n      \"seedNumber\": 0,\n      \"fighterWeight\": \"non cillum\",\n      \"points\": 58,\n      \"fighterStatus\": 78157267\n    },\n    {\n      \"athleteId\": \"eu Ut\",\n      \"sportEventWeightCategoryId\": \"culpa aliquip\",\n      \"weightCategoryFullName\": \"irure\",\n      \"weightCategoryShortName\": \"occaecat exercitation ex amet\",\n      \"weightCategoryCountFights\": -50605600,\n      \"hasWeightCategoryBlockchainIds\": false,\n      \"weightCategoryCountReadyFighters\": 29265179,\n      \"countFights\": -62525300,\n      \"personId\": \"voluptate deserunt pariatur amet\",\n      \"fullName\": \"culpa mollit pariatur dolore ex\",\n      \"preferedName\": \"dolor anim qui eiusmod culpa\",\n      \"displayName\": \"sint non amet Lorem\",\n      \"givenName\": \"aute enim\",\n      \"familyName\": \"in sed reprehenderit Lorem\",\n      \"personPhoto\": \"cupidatat qui\",\n      \"athenaPrintId\": \"officia pariatur minim\",\n      \"teamAlternateName\": \"do ullamco nulla\",\n      \"teamName\": \"aute consectetur\",\n      \"teamCountryFlag\": \"culpa aliqua eiusmod dolore\",\n      \"sportEventTeamId\": \"magna Lorem minim\",\n      \"sportEventId\": \"dolor ea officia consequat\",\n      \"drawRank\": -560004,\n      \"robinGroup\": {\n        \"commodo_59e\": 2141251,\n        \"sunt_84\": 58592135\n      },\n      \"robinGroupRank\": 2357150,\n      \"teamRankingPoint\": 28453512,\n      \"uwwPoint\": -69586696,\n      \"isFinalistBronze\": true,\n      \"isFinalistGold\": true,\n      \"isFinalist\": true,\n      \"knockOutStatus\": {\n        \"aliquip5\": true,\n        \"ex_560\": \"Excepteur quis non officia\",\n        \"consequat16\": true,\n        \"dolor71\": \"est do Lorem ullamco\"\n      },\n      \"hasLostknockOut\": true,\n      \"completed\": 29411846,\n      \"wins\": -36916242,\n      \"losses\": -55773707,\n      \"technicalPointsFor\": 49738570,\n      \"technicalPointsAgainst\": -64627222,\n      \"technicalPointsDiff\": -82341866,\n      \"rankingPointsFor\": -79190409,\n      \"rankingPointsAgainst\": -77436728,\n      \"rankingPointsDiff\": -17655500,\n      \"winsEasy\": -84638280,\n      \"winsSuperiority\": 72142393,\n      \"rank\": 51447839,\n      \"rankRobinGroup\": 97325081,\n      \"fightByOpponent\": {\n        \"sportEventId\": \"tempor\",\n        \"sportEventWeightCategoryId\": \"ex proident\",\n        \"fighter1Id\": \"exercitation Excepteur anim elit adipisicing\",\n        \"fighter2Id\": \"laborum sint\",\n        \"fighter2AthenaId\": -3092014,\n        \"team1Name\": \"ullamco adipisicing\",\n        \"team1AlternateName\": \"ut in mollit adipisicing\",\n        \"team1FullName\": \"do officia amet\",\n        \"team1CountryFlag\": \"ea ut\",\n        \"team1CountryFlagScoreboard\": \"sunt velit pariatur\",\n        \"team1CountryFlagMobile\": \"ad fugiat nisi\",\n        \"team1PoolName\": \"dolor velit deserunt dolor adipisicing\",\n        \"team1FightByOpponent\": {\n          \"culpa_c9\": -52509151,\n          \"nisi_c3\": 53724574.4608278\n        },\n        \"team2Name\": \"dolore ull\",\n        \"team2AlternateName\": \"in fugiat quis exercitation proident\",\n        \"team2FullName\": \"amet enim\",\n        \"team2CountryFlag\": \"ad Ut veniam\",\n        \"team2CountryFlagScoreboard\": \"aute mollit\",\n        \"team2CountryFlagMobile\": \"aliqua esse voluptate\",\n        \"team2PoolName\": \"sit dolore\",\n        \"team2FightByOpponent\": {\n          \"in_5\": \"aliqua nisi\",\n          \"dolor_c\": 54920831.374750495\n        },\n        \"roundFriendlyName\": \"minim eu\",\n        \"displayOrderInRound\": -10134379,\n        \"round1Id\": \"id dolor ut tempor\",\n        \"round2Id\": \"tempor\",\n        \"countReferees\": 52599831,\n        \"sportId\": \"laboris dolor quis fugi\",\n        \"athlete1Color\": \"in sed ipsum dolore qui\",\n        \"athlete2Color\": \"velit et ad pari\",\n        \"athlete1TextColor\": \"aliquip id est\",\n        \"athlete2TextColor\": \"et cillum Excepteur adipisicing\",\n        \"matName\": \"elit anim quis ad enim\",\n        \"sessionId\": \"dolor non ipsum nisi quis\",\n        \"sessionName\": \"reprehenderit elit adipisicing sint\",\n        \"sessionStartDate\": \"1964-10-06T06:47:39.829Z\",\n        \"technicalPoints\": {\n          \"consequat_499\": false,\n          \"fugiat17\": 58616991\n        },\n        \"technicalPointsDetail\": {\n          \"aliquip68\": 65063722.12670013,\n          \"cillum_9\": 23592815,\n          \"labore6b\": \"nulla dolor eu consequat fugiat\"\n        },\n        \"technicalPointsTagStatus\": \"eiusmod cillum\",\n        \"technicalPointIds\": {\n          \"esseab\": 68059443.40034458\n        },\n        \"cautionsList\": {\n          \"labore111\": false,\n          \"ut_87\": \"ad ullamco\",\n          \"cillum__\": \"culpa minim\"\n        },\n        \"isCompleted\": false,\n        \"isReady\": false,\n        \"isRobinGroupFight\": true,\n        \"winnerFighter\": \"Excepteur id Ut\",\n        \"winnerTeam\": \"aute voluptate dolore\",\n        \"winnerTeamAlternateName\": \"est in culpa\",\n        \"sportEventName\": \"consectetur velit id\",\n        \"sportEventStartDate\": \"1979-10-09T20:54:21.951Z\",\n        \"sportEventLogo\": \"id incididunt\",\n        \"rankingPoint\": {\n          \"fightId\": \"ut do\",\n          \"victoryType\": \"dolore\",\n          \"fighterId\": \"et quis nisi aliqua\",\n          \"fighterFullName\": \"Lorem aliquip\",\n          \"victoryTypeId\": \"Lorem do in proident\",\n          \"victoryTypeName\": \"aute exercita\",\n          \"victoryTypeNiceName\": \"laborum voluptate ut\",\n          \"sportId\": \"nulla consectetur\",\n          \"sportEventId\": \"reprehenderit de\",\n          \"id\": \"consequat nisi aliquip est\",\n          \"fighter\": \"consectetur ut dolor\",\n          \"second\": 70945\n        },\n        \"completedDate\": \"1978-09-27T18:54:59.463Z\",\n        \"roundsNumber\": 26591676,\n        \"roundDuration\": -36564297,\n        \"sportAlternateName\": \"fugiat sed\",\n        \"weightCategoryName\": \"ex sint\",\n        \"weightCategoryAlternateName\": \"dolore anim incididunt velit\",\n        \"weightCategoryShortName\": \"i\",\n        \"weightCategoryMaxWeight\": 40552733,\n        \"weightCategoryFullName\": \"veniam sunt aute non\",\n        \"isWeightCategoryVisible\": false,\n        \"weightCategoryAverageDuration\": 48333119,\n        \"weightCategoryColor\": \"deserunt cupidatat aliquip Ut do\",\n        \"weightCategoryReady\": true,\n        \"weightCategoryStarted\": true,\n        \"weightCategoryCompleted\": false,\n        \"victoryTypes\": {\n          \"Excepteur_0\": 41070264,\n          \"ullamco_281\": \"ea dolor\"\n        },\n        \"victoryTypesArray\": {\n          \"adipisicing_70\": \"in aute\",\n          \"cillumae\": \"pariatur\"\n        },\n        \"audienceId\": \"in mollit\",\n        \"audienceName\": \"proident quis\",\n        \"audienceShortName\": \"officia veniam consectetur\",\n        \"sportName\": \"dolor ex\",\n        \"injuryTime\": 1909450,\n        \"warnings\": true,\n        \"cautions\": 55193487,\n        \"legFouls\": -14983423,\n        \"activityTime\": true,\n        \"fighter1FullName\": \"ea id\",\n        \"fighter1DisplayName\": \"velit aute d\",\n        \"fighter1FamilyName\": \"reprehenderit incididunt\",\n        \"fighter1GivenName\": \"sed sunt consectetur\",\n        \"fighter1PreferedName\": \"esse ut dolore officia sed\",\n        \"fighter1DrawRank\": \"eiusmod\",\n        \"fighter1RobinRank\": \"ut\",\n        \"fighter1SeedNumber\": -34780934,\n        \"fighter1AthleteId\": \"sit dolor null\",\n        \"fighter1PersonId\": \"Ut laboris Lorem elit\",\n        \"fighter1AthenaId\": -29700342,\n        \"fighter1IsSeeded\": true,\n        \"fighter1Status\": -86197658,\n        \"fighter1IsInjured\": true,\n        \"fighter1Weight\": 17540672.277966335,\n        \"fighter2FullName\": \"laborum nisi ut\",\n        \"fighter2DisplayName\": \"magna\",\n        \"fighter2FamilyName\": \"esse enim aliquip\",\n        \"fighter2GivenName\": \"conse\",\n        \"fighter2PreferedName\": \"eu anim\",\n        \"fighter2DrawRank\": 69032984,\n        \"fighter2RobinRank\": 87111244,\n        \"fighter2SeedNumber\": -99731429,\n        \"fighter2AthleteId\": \"aute\",\n        \"fighter2PersonId\": \"irur\",\n        \"fighter2IsSeeded\": true,\n        \"fighter2Status\": 70948930,\n        \"fighter2IsInjured\": false,\n        \"fighter2Weight\": -6453713.679055631,\n        \"result\": \"dolor exercitation\",\n        \"victoryType\": \"aute tempor Excepteur\",\n        \"endTime\": -50045518,\n        \"endDate\": \"2001-08-12T11:02:59.527Z\",\n        \"expectedDateStart\": \"1985-06-11T09:59:20.789Z\",\n        \"expectedStartDate\": \"2015-05-24T23:17:09.696Z\",\n        \"team1Fighters\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          }\n        ],\n        \"team2Fighters\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          }\n        ],\n        \"rankingPointNiceName\": \"pariatur ex sint enim\",\n        \"resultText\": \"in ut tempor\",\n        \"resultTextSmall\": \"ex id veniam Lorem si\",\n        \"roundRenamedSmall\": \"Excepteur ex\",\n        \"parentFightNumber1\": 42689832,\n        \"parentFightNumber2\": 82903685,\n        \"fightRefereesWithRole\": [\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"needsRefresh\": true,\n        \"isCountdown\": false,\n        \"branding\": \"enim ea dolore in consequat\",\n        \"id\": \"velit qui\",\n        \"parentFight1Id\": \"aliqua ipsum velit\",\n        \"parentFight2Id\": \"nostrud velit cillum non\",\n        \"fighter1\": \"ipsum do sunt\",\n        \"fighter1RankingPoint\": 8524,\n        \"fighter2\": \"enim sint commodo\",\n        \"fighter2RankingPoint\": 2350,\n        \"refereeGroup\": \"e\",\n        \"sportEventTeam1Id\": \"non et nisi\",\n        \"sportEventTeam2Id\": \"voluptate\",\n        \"fightMatId\": \"labore\",\n        \"round\": \"in incididunt\",\n        \"qualifying\": false,\n        \"teamFightId\": \"exercitation ipsum adipisicing consequat e\",\n        \"status\": -33448786,\n        \"rankingCheck\": true,\n        \"technicalCheck\": false,\n        \"weight\": -59931647,\n        \"fightNumber\": 697,\n        \"roundWeight\": 2256,\n        \"repechageWeight\": 7393,\n        \"repechageSection\": 3378,\n        \"displayOrder\": 2504,\n        \"canceled\": \"1964-07-20T01:36:15.948Z\",\n        \"fightReferees\": [\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"odfCode\": \"quis veniam sint magna\",\n        \"refereeComment\": \"cillum ad enim\",\n        \"uploaderFight\": {\n          \"elit_8\": 17390028\n        }\n      },\n      \"isCompeting\": true,\n      \"hasOpenFight\": false,\n      \"isDisqualified\": false,\n      \"isNotRanked\": true,\n      \"isInjured\": false,\n      \"isForfeit\": false,\n      \"isRobinGroupNotRanked\": false,\n      \"accreditationStatus\": 51052269,\n      \"id\": \"amet sed\",\n      \"sportEventWeightCategory\": \"quis in esse\",\n      \"weight\": 478,\n      \"drawNumber\": 161,\n      \"seedNumber\": 9,\n      \"fighterWeight\": \"labore ut\",\n      \"points\": 26,\n      \"fighterStatus\": -33677595\n    }\n  ],\n  \"countReadyTeams\": 23469805,\n  \"countReadyFighters\": -66642024,\n  \"countReadySeededFighters\": 73262825,\n  \"countSeededFighters\": -57962519,\n  \"countFighters\": -12091959,\n  \"maxSeeds\": -16639937,\n  \"isRepechageSet\": true,\n  \"countTeams\": 6729096,\n  \"countFights\": 31348889,\n  \"countFightsLive\": 62259795,\n  \"perfectNumber\": {\n    \"eu_82\": 77161672,\n    \"sedd9\": false\n  },\n  \"isCompleted\": true,\n  \"isStarted\": false,\n  \"isRobin\": false,\n  \"isRobinGrouped\": false,\n  \"id\": \"ex Lorem cillum\",\n  \"averageDuration\": -45986190,\n  \"color\": \"adi\",\n  \"odfCode\": \"ex est ut\",\n  \"uwwRanking\": true,\n  \"blockchainIds\": {\n    \"culpa_df0\": true,\n    \"voluptate8\": -80055811\n  },\n  \"sessionStartDay\": 29390093,\n  \"matAssignment\": -82118587,\n  \"visible\": true,\n  \"fightersUpdated\": \"2008-11-10T22:03:23.125Z\",\n  \"athenaFinalized\": false\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"matNumber\": 12116157\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/assign-mat",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"assign-mat"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"matNumber\": 12116157\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/assign-mat",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"assign-mat"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "print",
							"item": [
								{
									"name": "entry-list",
									"item": [
										{
											"name": "Print category entry list - multiple Weight Categories",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list?sportEventWeightCategoryId=enim reprehenderit,laboris quis aliqua",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"entry-list"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "enim reprehenderit,laboris quis aliqua",
															"description": "Filter for Weight Category"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list?sportEventWeightCategoryId=a,elit nulla",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"print",
																"entry-list"
															],
															"query": [
																{
																	"key": "sportEventWeightCategoryId",
																	"value": "a,elit nulla"
																}
															],
															"variable": [
																{
																	"key": "_format"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list?sportEventWeightCategoryId=a,elit nulla",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"print",
																"entry-list"
															],
															"query": [
																{
																	"key": "sportEventWeightCategoryId",
																	"value": "a,elit nulla"
																}
															],
															"variable": [
																{
																	"key": "_format"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list?sportEventWeightCategoryId=a,elit nulla",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"print",
																"entry-list"
															],
															"query": [
																{
																	"key": "sportEventWeightCategoryId",
																	"value": "a,elit nulla"
																}
															],
															"variable": [
																{
																	"key": "_format"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Print teams by sport - multiple Weight Categories",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list/table?sportEventWeightCategoryId=enim reprehenderit,laboris quis aliqua",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"entry-list",
														"table"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "enim reprehenderit,laboris quis aliqua",
															"description": "Filter for Weight Category"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list/table?sportEventWeightCategoryId=a,elit nulla",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"print",
																"entry-list",
																"table"
															],
															"query": [
																{
																	"key": "sportEventWeightCategoryId",
																	"value": "a,elit nulla"
																}
															],
															"variable": [
																{
																	"key": "_format"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list/table?sportEventWeightCategoryId=a,elit nulla",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"print",
																"entry-list",
																"table"
															],
															"query": [
																{
																	"key": "sportEventWeightCategoryId",
																	"value": "a,elit nulla"
																}
															],
															"variable": [
																{
																	"key": "_format"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list/table?sportEventWeightCategoryId=a,elit nulla",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"print",
																"entry-list",
																"table"
															],
															"query": [
																{
																	"key": "sportEventWeightCategoryId",
																	"value": "a,elit nulla"
																}
															],
															"variable": [
																{
																	"key": "_format"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "teams",
									"item": [
										{
											"name": "Print teams by sport - multiple Weight Categories",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/sport?sportEventWeightCategoryId=enim reprehenderit,laboris quis aliqua",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"teams",
														"sport"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "enim reprehenderit,laboris quis aliqua",
															"description": "Filter for Weight Category"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/sport?sportEventWeightCategoryId=a,elit nulla",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"print",
																"teams",
																"sport"
															],
															"query": [
																{
																	"key": "sportEventWeightCategoryId",
																	"value": "a,elit nulla"
																}
															],
															"variable": [
																{
																	"key": "_format"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/sport?sportEventWeightCategoryId=a,elit nulla",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"print",
																"teams",
																"sport"
															],
															"query": [
																{
																	"key": "sportEventWeightCategoryId",
																	"value": "a,elit nulla"
																}
															],
															"variable": [
																{
																	"key": "_format"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/sport?sportEventWeightCategoryId=a,elit nulla",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"print",
																"teams",
																"sport"
															],
															"query": [
																{
																	"key": "sportEventWeightCategoryId",
																	"value": "a,elit nulla"
																}
															],
															"variable": [
																{
																	"key": "_format"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Print teams by sport - multiple Weight Categories",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/ranking?sportEventWeightCategoryId=enim reprehenderit,laboris quis aliqua",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"teams",
														"ranking"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "enim reprehenderit,laboris quis aliqua",
															"description": "Filter for Weight Category"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/ranking?sportEventWeightCategoryId=a,elit nulla",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"print",
																"teams",
																"ranking"
															],
															"query": [
																{
																	"key": "sportEventWeightCategoryId",
																	"value": "a,elit nulla"
																}
															],
															"variable": [
																{
																	"key": "_format"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/ranking?sportEventWeightCategoryId=a,elit nulla",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"print",
																"teams",
																"ranking"
															],
															"query": [
																{
																	"key": "sportEventWeightCategoryId",
																	"value": "a,elit nulla"
																}
															],
															"variable": [
																{
																	"key": "_format"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: oauth2",
																"key": "Authorization",
																"value": "<token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/ranking?sportEventWeightCategoryId=a,elit nulla",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"print",
																"teams",
																"ranking"
															],
															"query": [
																{
																	"key": "sportEventWeightCategoryId",
																	"value": "a,elit nulla"
																}
															],
															"variable": [
																{
																	"key": "_format"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Print rankings - multiple Weight Categories",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/ranking?sportEventWeightCategoryId=enim reprehenderit,laboris quis aliqua",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"print",
												"ranking"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "enim reprehenderit,laboris quis aliqua",
													"description": "Filter for Weight Category"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/ranking?sportEventWeightCategoryId=a,elit nulla",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"ranking"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "a,elit nulla"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/ranking?sportEventWeightCategoryId=a,elit nulla",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"ranking"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "a,elit nulla"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/ranking?sportEventWeightCategoryId=a,elit nulla",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"ranking"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "a,elit nulla"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Print complete results - multiple Weight Categories",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/complete-results?sportEventWeightCategoryId=enim reprehenderit,laboris quis aliqua",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"print",
												"complete-results"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "enim reprehenderit,laboris quis aliqua",
													"description": "Filter for Weight Category"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/complete-results?sportEventWeightCategoryId=a,elit nulla",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"complete-results"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "a,elit nulla"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/complete-results?sportEventWeightCategoryId=a,elit nulla",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"complete-results"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "a,elit nulla"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/complete-results?sportEventWeightCategoryId=a,elit nulla",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"complete-results"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "a,elit nulla"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get weightCategories",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/?filters=enim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "enim",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns filtered result on Weight Categories",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"weightCategories\": {}\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/?filters=enim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "enim"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a weightCategory by ODF code",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/odf/get/:odfCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"odf",
										"get",
										":odfCode"
									],
									"variable": [
										{
											"key": "odfCode",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns a Weight Category",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/odf/get/:odfCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"odf",
												"get",
												":odfCode"
											],
											"variable": [
												{
													"key": "odfCode",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"name\": \"ullamco sed tempor amet\",\n  \"audience\": \"deserun\",\n  \"sport\": \"Lorem velit nostrud\",\n  \"minWeight\": 112,\n  \"maxWeight\": 361,\n  \"roundsNumber\": 7,\n  \"roundDuration\": 232,\n  \"overtime\": -43385865,\n  \"tournamentType\": \"sit occaecat\",\n  \"sportEventId\": \"qui Duis ea incididunt\",\n  \"sportAlternateName\": \"adipisicing sit quis cillum\",\n  \"sportName\": \"occaecat proident reprehenderit dolor Ut\",\n  \"fullName\": \"occaec\",\n  \"alternateName\": \"dolor laborum et nulla\",\n  \"shortName\": \"esse est\",\n  \"sportId\": \"laborum velit reprehender\",\n  \"audienceId\": \"dolor culpa\",\n  \"audienceName\": \"Duis Excepteur exercitation quis\",\n  \"isVeteran\": false,\n  \"audienceShortName\": \"Duis eu id anim aliquip\",\n  \"isSinglebracketTournament\": false,\n  \"isDoublebracketTournament\": true,\n  \"isRoundRobinTournament\": false,\n  \"isBeltWrestlingCategory\": true,\n  \"isAlyshTournament\": true,\n  \"isKazakhCategory\": true,\n  \"isPankrationCategory\": false,\n  \"isBeachWrestlingTournament\": false,\n  \"fightersIsReady\": [\n    {\n      \"athleteId\": \"ipsum\",\n      \"sportEventWeightCategoryId\": \"labore exercitation Duis consequat ullamco\",\n      \"weightCategoryFullName\": \"sed culpa\",\n      \"weightCategoryShortName\": \"velit dolore quis Lorem sit\",\n      \"weightCategoryCountFights\": -46112249,\n      \"hasWeightCategoryBlockchainIds\": true,\n      \"weightCategoryCountReadyFighters\": -34924802,\n      \"countFights\": 81867793,\n      \"personId\": \"nostrud in\",\n      \"fullName\": \"quis est\",\n      \"preferedName\": \"cillum elit aliquip dolore qui\",\n      \"displayName\": \"ipsum adipisicing dolore eu\",\n      \"givenName\": \"magna\",\n      \"familyName\": \"consequat in\",\n      \"personPhoto\": \"velit minim\",\n      \"athenaPrintId\": \"nulla reprehenderit Lorem do\",\n      \"teamAlternateName\": \"esse anim quis\",\n      \"teamName\": \"laborum ut\",\n      \"teamCountryFlag\": \"adipisicing dolore\",\n      \"sportEventTeamId\": \"L\",\n      \"sportEventId\": \"incididunt in consequat laborum\",\n      \"drawRank\": -73102248,\n      \"robinGroup\": {\n        \"do_a\": -62219030\n      },\n      \"robinGroupRank\": -69348793,\n      \"teamRankingPoint\": 95982336,\n      \"uwwPoint\": 30186924,\n      \"isFinalistBronze\": false,\n      \"isFinalistGold\": false,\n      \"isFinalist\": false,\n      \"knockOutStatus\": {\n        \"non_eb\": 50466492,\n        \"laborum5\": \"ullamco ut\",\n        \"mollite_\": \"aliquip\",\n        \"laboris_\": 38797664\n      },\n      \"hasLostknockOut\": false,\n      \"completed\": -28447786,\n      \"wins\": 94904145,\n      \"losses\": -99316811,\n      \"technicalPointsFor\": -3241174,\n      \"technicalPointsAgainst\": -78475389,\n      \"technicalPointsDiff\": 60468197,\n      \"rankingPointsFor\": -85831117,\n      \"rankingPointsAgainst\": 15293012,\n      \"rankingPointsDiff\": 37364461,\n      \"winsEasy\": 27804089,\n      \"winsSuperiority\": 31390266,\n      \"rank\": 45776466,\n      \"rankRobinGroup\": -10828065,\n      \"fightByOpponent\": {\n        \"sportEventId\": \"ipsum ea tempor in irure\",\n        \"sportEventWeightCategoryId\": \"mollit dolore laboris in\",\n        \"fighter1Id\": \"adipisicing ullamco proident\",\n        \"fighter2Id\": \"adipisicing velit dolore exercitation\",\n        \"fighter2AthenaId\": 76565927,\n        \"team1Name\": \"ut magna enim in\",\n        \"team1AlternateName\": \"ad ipsum\",\n        \"team1FullName\": \"minim Duis\",\n        \"team1CountryFlag\": \"Duis\",\n        \"team1CountryFlagScoreboard\": \"cupidatat exercitation\",\n        \"team1CountryFlagMobile\": \"in consequat ad commodo\",\n        \"team1PoolName\": \"quis\",\n        \"team1FightByOpponent\": {\n          \"Ut6d\": true\n        },\n        \"team2Name\": \"ea aliquip in\",\n        \"team2AlternateName\": \"enim consectetur\",\n        \"team2FullName\": \"nulla consequat fugiat\",\n        \"team2CountryFlag\": \"tempor culpa commodo ex\",\n        \"team2CountryFlagScoreboard\": \"non\",\n        \"team2CountryFlagMobile\": \"ip\",\n        \"team2PoolName\": \"dolore Duis in\",\n        \"team2FightByOpponent\": {\n          \"deserunt_9\": -15477208,\n          \"non_e5\": false\n        },\n        \"roundFriendlyName\": \"ut fugiat\",\n        \"displayOrderInRound\": -36476309,\n        \"round1Id\": \"amet\",\n        \"round2Id\": \"ex do\",\n        \"countReferees\": -59743602,\n        \"sportId\": \"velit officia laborum nisi esse\",\n        \"athlete1Color\": \"amet ea\",\n        \"athlete2Color\": \"aute eu aliqua ipsum\",\n        \"athlete1TextColor\": \"in et eu\",\n        \"athlete2TextColor\": \"sint adipisicing\",\n        \"matName\": \"irure\",\n        \"sessionId\": \"sit\",\n        \"sessionName\": \"sunt commodo anim irure\",\n        \"sessionStartDate\": \"1970-09-05T17:02:22.359Z\",\n        \"technicalPoints\": {\n          \"culpa_42\": -40868259.03368565\n        },\n        \"technicalPointsDetail\": {\n          \"elit4d3\": false,\n          \"commodo__\": -62119471\n        },\n        \"technicalPointsTagStatus\": \"dolore laboris commodo\",\n        \"technicalPointIds\": {\n          \"voluptate_8\": 46887001,\n          \"minim_3e_\": false\n        },\n        \"cautionsList\": {\n          \"elit_4\": \"in\",\n          \"ipsum_c30\": -93910502.46712323,\n          \"aliquip_4f5\": \"esse aliqua amet laborum\",\n          \"Excepteur4a\": 83686434.16635194\n        },\n        \"isCompleted\": false,\n        \"isReady\": true,\n        \"isRobinGroupFight\": true,\n        \"winnerFighter\": \"deserunt pariatur ad\",\n        \"winnerTeam\": \"consequat Ut deserunt\",\n        \"winnerTeamAlternateName\": \"sint eu occaecat aliquip\",\n        \"sportEventName\": \"cillum sint et\",\n        \"sportEventStartDate\": \"1964-04-20T09:58:05.169Z\",\n        \"sportEventLogo\": \"commodo\",\n        \"rankingPoint\": {\n          \"fightId\": \"cupidatat dolor amet\",\n          \"victoryType\": \"amet adipisicing do elit\",\n          \"fighterId\": \"exercitation elit minim\",\n          \"fighterFullName\": \"Duis ea\",\n          \"victoryTypeId\": \"culpa eu velit\",\n          \"victoryTypeName\": \"Excepteur qui fugiat\",\n          \"victoryTypeNiceName\": \"m\",\n          \"sportId\": \"do\",\n          \"sportEventId\": \"eiusmod labore ullamco laborum\",\n          \"id\": \"ex labor\",\n          \"fighter\": \"dolor anim non mollit\",\n          \"second\": 89119\n        },\n        \"completedDate\": \"1995-04-10T20:07:13.745Z\",\n        \"roundsNumber\": 56264634,\n        \"roundDuration\": -87971029,\n        \"sportAlternateName\": \"consectetur consequat\",\n        \"weightCategoryName\": \"occaeca\",\n        \"weightCategoryAlternateName\": \"velit elit quis \",\n        \"weightCategoryShortName\": \"pariatur\",\n        \"weightCategoryMaxWeight\": 87754096,\n        \"weightCategoryFullName\": \"consequat ullamco ad cupidatat proident\",\n        \"isWeightCategoryVisible\": true,\n        \"weightCategoryAverageDuration\": -36562592,\n        \"weightCategoryColor\": \"reprehenderit cupidatat\",\n        \"weightCategoryReady\": false,\n        \"weightCategoryStarted\": true,\n        \"weightCategoryCompleted\": true,\n        \"victoryTypes\": {\n          \"est_8\": true,\n          \"ex5d\": \"et\",\n          \"consequatb\": true\n        },\n        \"victoryTypesArray\": {\n          \"aute_e2\": false\n        },\n        \"audienceId\": \"labore\",\n        \"audienceName\": \"officia dolore mollit consectetur minim\",\n        \"audienceShortName\": \"minim\",\n        \"sportName\": \"id aute dolore\",\n        \"injuryTime\": -83706957,\n        \"warnings\": false,\n        \"cautions\": 37021408,\n        \"legFouls\": -69547557,\n        \"activityTime\": true,\n        \"fighter1FullName\": \"dolor minim officia cupidatat\",\n        \"fighter1DisplayName\": \"laborum laboris ad adipisicing\",\n        \"fighter1FamilyName\": \"est enim in tempor\",\n        \"fighter1GivenName\": \"ut est in consectetur\",\n        \"fighter1PreferedName\": \"ut elit voluptate dolor\",\n        \"fighter1DrawRank\": \"incididunt Lorem ad\",\n        \"fighter1RobinRank\": \"ex ipsum\",\n        \"fighter1SeedNumber\": -32410940,\n        \"fighter1AthleteId\": \"in ullamco\",\n        \"fighter1PersonId\": \"in\",\n        \"fighter1AthenaId\": -92481259,\n        \"fighter1IsSeeded\": true,\n        \"fighter1Status\": -96196548,\n        \"fighter1IsInjured\": false,\n        \"fighter1Weight\": 49936657.594882786,\n        \"fighter2FullName\": \"in eu tempor ea laboris\",\n        \"fighter2DisplayName\": \"deserunt non\",\n        \"fighter2FamilyName\": \"in mollit adipisicin\",\n        \"fighter2GivenName\": \"dolor magna exercitation\",\n        \"fighter2PreferedName\": \"dolore\",\n        \"fighter2DrawRank\": 46969925,\n        \"fighter2RobinRank\": -86445307,\n        \"fighter2SeedNumber\": 26922470,\n        \"fighter2AthleteId\": \"aliqua nisi\",\n        \"fighter2PersonId\": \"qui Excepteur proident\",\n        \"fighter2IsSeeded\": false,\n        \"fighter2Status\": -87362860,\n        \"fighter2IsInjured\": true,\n        \"fighter2Weight\": -21268905.526404724,\n        \"result\": \"amet sit\",\n        \"victoryType\": \"veniam sed\",\n        \"endTime\": 88607763,\n        \"endDate\": \"1993-12-20T08:48:50.677Z\",\n        \"expectedDateStart\": \"2021-07-29T08:46:29.320Z\",\n        \"expectedStartDate\": \"1975-06-19T21:37:30.142Z\",\n        \"team1Fighters\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          }\n        ],\n        \"team2Fighters\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          }\n        ],\n        \"rankingPointNiceName\": \"cupidatat minim Excepteur\",\n        \"resultText\": \"in\",\n        \"resultTextSmall\": \"dolore\",\n        \"roundRenamedSmall\": \"nostrud commodo\",\n        \"parentFightNumber1\": -58070405,\n        \"parentFightNumber2\": 26797020,\n        \"fightRefereesWithRole\": [\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"needsRefresh\": true,\n        \"isCountdown\": false,\n        \"branding\": \"do velit\",\n        \"id\": \"eiusmod cillum pro\",\n        \"parentFight1Id\": \"nisi in ut cu\",\n        \"parentFight2Id\": \"id officia est sed\",\n        \"fighter1\": \"Ut culpa\",\n        \"fighter1RankingPoint\": 3343,\n        \"fighter2\": \"proident nostrud ut et\",\n        \"fighter2RankingPoint\": 1460,\n        \"refereeGroup\": \"i\",\n        \"sportEventTeam1Id\": \"sit qui\",\n        \"sportEventTeam2Id\": \"pariatur sunt\",\n        \"fightMatId\": \"Ut\",\n        \"round\": \"Duis eiusmod\",\n        \"qualifying\": false,\n        \"teamFightId\": \"nulla sunt\",\n        \"status\": 51973797,\n        \"rankingCheck\": false,\n        \"technicalCheck\": true,\n        \"weight\": 97697984,\n        \"fightNumber\": 6716,\n        \"roundWeight\": 1421,\n        \"repechageWeight\": 5448,\n        \"repechageSection\": 4596,\n        \"displayOrder\": 202,\n        \"canceled\": \"1971-01-24T23:41:34.942Z\",\n        \"fightReferees\": [\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"odfCode\": \"proident i\",\n        \"refereeComment\": \"ut dolor ullamco aute e\",\n        \"uploaderFight\": {\n          \"qui_68\": false\n        }\n      },\n      \"isCompeting\": false,\n      \"hasOpenFight\": true,\n      \"isDisqualified\": false,\n      \"isNotRanked\": true,\n      \"isInjured\": false,\n      \"isForfeit\": false,\n      \"isRobinGroupNotRanked\": true,\n      \"accreditationStatus\": 43131621,\n      \"id\": \"ex occaecat\",\n      \"sportEventWeightCategory\": \"deserunt cupidatat\",\n      \"weight\": 259,\n      \"drawNumber\": 207,\n      \"seedNumber\": 0,\n      \"fighterWeight\": \"non cillum\",\n      \"points\": 58,\n      \"fighterStatus\": 78157267\n    },\n    {\n      \"athleteId\": \"eu Ut\",\n      \"sportEventWeightCategoryId\": \"culpa aliquip\",\n      \"weightCategoryFullName\": \"irure\",\n      \"weightCategoryShortName\": \"occaecat exercitation ex amet\",\n      \"weightCategoryCountFights\": -50605600,\n      \"hasWeightCategoryBlockchainIds\": false,\n      \"weightCategoryCountReadyFighters\": 29265179,\n      \"countFights\": -62525300,\n      \"personId\": \"voluptate deserunt pariatur amet\",\n      \"fullName\": \"culpa mollit pariatur dolore ex\",\n      \"preferedName\": \"dolor anim qui eiusmod culpa\",\n      \"displayName\": \"sint non amet Lorem\",\n      \"givenName\": \"aute enim\",\n      \"familyName\": \"in sed reprehenderit Lorem\",\n      \"personPhoto\": \"cupidatat qui\",\n      \"athenaPrintId\": \"officia pariatur minim\",\n      \"teamAlternateName\": \"do ullamco nulla\",\n      \"teamName\": \"aute consectetur\",\n      \"teamCountryFlag\": \"culpa aliqua eiusmod dolore\",\n      \"sportEventTeamId\": \"magna Lorem minim\",\n      \"sportEventId\": \"dolor ea officia consequat\",\n      \"drawRank\": -560004,\n      \"robinGroup\": {\n        \"commodo_59e\": 2141251,\n        \"sunt_84\": 58592135\n      },\n      \"robinGroupRank\": 2357150,\n      \"teamRankingPoint\": 28453512,\n      \"uwwPoint\": -69586696,\n      \"isFinalistBronze\": true,\n      \"isFinalistGold\": true,\n      \"isFinalist\": true,\n      \"knockOutStatus\": {\n        \"aliquip5\": true,\n        \"ex_560\": \"Excepteur quis non officia\",\n        \"consequat16\": true,\n        \"dolor71\": \"est do Lorem ullamco\"\n      },\n      \"hasLostknockOut\": true,\n      \"completed\": 29411846,\n      \"wins\": -36916242,\n      \"losses\": -55773707,\n      \"technicalPointsFor\": 49738570,\n      \"technicalPointsAgainst\": -64627222,\n      \"technicalPointsDiff\": -82341866,\n      \"rankingPointsFor\": -79190409,\n      \"rankingPointsAgainst\": -77436728,\n      \"rankingPointsDiff\": -17655500,\n      \"winsEasy\": -84638280,\n      \"winsSuperiority\": 72142393,\n      \"rank\": 51447839,\n      \"rankRobinGroup\": 97325081,\n      \"fightByOpponent\": {\n        \"sportEventId\": \"tempor\",\n        \"sportEventWeightCategoryId\": \"ex proident\",\n        \"fighter1Id\": \"exercitation Excepteur anim elit adipisicing\",\n        \"fighter2Id\": \"laborum sint\",\n        \"fighter2AthenaId\": -3092014,\n        \"team1Name\": \"ullamco adipisicing\",\n        \"team1AlternateName\": \"ut in mollit adipisicing\",\n        \"team1FullName\": \"do officia amet\",\n        \"team1CountryFlag\": \"ea ut\",\n        \"team1CountryFlagScoreboard\": \"sunt velit pariatur\",\n        \"team1CountryFlagMobile\": \"ad fugiat nisi\",\n        \"team1PoolName\": \"dolor velit deserunt dolor adipisicing\",\n        \"team1FightByOpponent\": {\n          \"culpa_c9\": -52509151,\n          \"nisi_c3\": 53724574.4608278\n        },\n        \"team2Name\": \"dolore ull\",\n        \"team2AlternateName\": \"in fugiat quis exercitation proident\",\n        \"team2FullName\": \"amet enim\",\n        \"team2CountryFlag\": \"ad Ut veniam\",\n        \"team2CountryFlagScoreboard\": \"aute mollit\",\n        \"team2CountryFlagMobile\": \"aliqua esse voluptate\",\n        \"team2PoolName\": \"sit dolore\",\n        \"team2FightByOpponent\": {\n          \"in_5\": \"aliqua nisi\",\n          \"dolor_c\": 54920831.374750495\n        },\n        \"roundFriendlyName\": \"minim eu\",\n        \"displayOrderInRound\": -10134379,\n        \"round1Id\": \"id dolor ut tempor\",\n        \"round2Id\": \"tempor\",\n        \"countReferees\": 52599831,\n        \"sportId\": \"laboris dolor quis fugi\",\n        \"athlete1Color\": \"in sed ipsum dolore qui\",\n        \"athlete2Color\": \"velit et ad pari\",\n        \"athlete1TextColor\": \"aliquip id est\",\n        \"athlete2TextColor\": \"et cillum Excepteur adipisicing\",\n        \"matName\": \"elit anim quis ad enim\",\n        \"sessionId\": \"dolor non ipsum nisi quis\",\n        \"sessionName\": \"reprehenderit elit adipisicing sint\",\n        \"sessionStartDate\": \"1964-10-06T06:47:39.829Z\",\n        \"technicalPoints\": {\n          \"consequat_499\": false,\n          \"fugiat17\": 58616991\n        },\n        \"technicalPointsDetail\": {\n          \"aliquip68\": 65063722.12670013,\n          \"cillum_9\": 23592815,\n          \"labore6b\": \"nulla dolor eu consequat fugiat\"\n        },\n        \"technicalPointsTagStatus\": \"eiusmod cillum\",\n        \"technicalPointIds\": {\n          \"esseab\": 68059443.40034458\n        },\n        \"cautionsList\": {\n          \"labore111\": false,\n          \"ut_87\": \"ad ullamco\",\n          \"cillum__\": \"culpa minim\"\n        },\n        \"isCompleted\": false,\n        \"isReady\": false,\n        \"isRobinGroupFight\": true,\n        \"winnerFighter\": \"Excepteur id Ut\",\n        \"winnerTeam\": \"aute voluptate dolore\",\n        \"winnerTeamAlternateName\": \"est in culpa\",\n        \"sportEventName\": \"consectetur velit id\",\n        \"sportEventStartDate\": \"1979-10-09T20:54:21.951Z\",\n        \"sportEventLogo\": \"id incididunt\",\n        \"rankingPoint\": {\n          \"fightId\": \"ut do\",\n          \"victoryType\": \"dolore\",\n          \"fighterId\": \"et quis nisi aliqua\",\n          \"fighterFullName\": \"Lorem aliquip\",\n          \"victoryTypeId\": \"Lorem do in proident\",\n          \"victoryTypeName\": \"aute exercita\",\n          \"victoryTypeNiceName\": \"laborum voluptate ut\",\n          \"sportId\": \"nulla consectetur\",\n          \"sportEventId\": \"reprehenderit de\",\n          \"id\": \"consequat nisi aliquip est\",\n          \"fighter\": \"consectetur ut dolor\",\n          \"second\": 70945\n        },\n        \"completedDate\": \"1978-09-27T18:54:59.463Z\",\n        \"roundsNumber\": 26591676,\n        \"roundDuration\": -36564297,\n        \"sportAlternateName\": \"fugiat sed\",\n        \"weightCategoryName\": \"ex sint\",\n        \"weightCategoryAlternateName\": \"dolore anim incididunt velit\",\n        \"weightCategoryShortName\": \"i\",\n        \"weightCategoryMaxWeight\": 40552733,\n        \"weightCategoryFullName\": \"veniam sunt aute non\",\n        \"isWeightCategoryVisible\": false,\n        \"weightCategoryAverageDuration\": 48333119,\n        \"weightCategoryColor\": \"deserunt cupidatat aliquip Ut do\",\n        \"weightCategoryReady\": true,\n        \"weightCategoryStarted\": true,\n        \"weightCategoryCompleted\": false,\n        \"victoryTypes\": {\n          \"Excepteur_0\": 41070264,\n          \"ullamco_281\": \"ea dolor\"\n        },\n        \"victoryTypesArray\": {\n          \"adipisicing_70\": \"in aute\",\n          \"cillumae\": \"pariatur\"\n        },\n        \"audienceId\": \"in mollit\",\n        \"audienceName\": \"proident quis\",\n        \"audienceShortName\": \"officia veniam consectetur\",\n        \"sportName\": \"dolor ex\",\n        \"injuryTime\": 1909450,\n        \"warnings\": true,\n        \"cautions\": 55193487,\n        \"legFouls\": -14983423,\n        \"activityTime\": true,\n        \"fighter1FullName\": \"ea id\",\n        \"fighter1DisplayName\": \"velit aute d\",\n        \"fighter1FamilyName\": \"reprehenderit incididunt\",\n        \"fighter1GivenName\": \"sed sunt consectetur\",\n        \"fighter1PreferedName\": \"esse ut dolore officia sed\",\n        \"fighter1DrawRank\": \"eiusmod\",\n        \"fighter1RobinRank\": \"ut\",\n        \"fighter1SeedNumber\": -34780934,\n        \"fighter1AthleteId\": \"sit dolor null\",\n        \"fighter1PersonId\": \"Ut laboris Lorem elit\",\n        \"fighter1AthenaId\": -29700342,\n        \"fighter1IsSeeded\": true,\n        \"fighter1Status\": -86197658,\n        \"fighter1IsInjured\": true,\n        \"fighter1Weight\": 17540672.277966335,\n        \"fighter2FullName\": \"laborum nisi ut\",\n        \"fighter2DisplayName\": \"magna\",\n        \"fighter2FamilyName\": \"esse enim aliquip\",\n        \"fighter2GivenName\": \"conse\",\n        \"fighter2PreferedName\": \"eu anim\",\n        \"fighter2DrawRank\": 69032984,\n        \"fighter2RobinRank\": 87111244,\n        \"fighter2SeedNumber\": -99731429,\n        \"fighter2AthleteId\": \"aute\",\n        \"fighter2PersonId\": \"irur\",\n        \"fighter2IsSeeded\": true,\n        \"fighter2Status\": 70948930,\n        \"fighter2IsInjured\": false,\n        \"fighter2Weight\": -6453713.679055631,\n        \"result\": \"dolor exercitation\",\n        \"victoryType\": \"aute tempor Excepteur\",\n        \"endTime\": -50045518,\n        \"endDate\": \"2001-08-12T11:02:59.527Z\",\n        \"expectedDateStart\": \"1985-06-11T09:59:20.789Z\",\n        \"expectedStartDate\": \"2015-05-24T23:17:09.696Z\",\n        \"team1Fighters\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          }\n        ],\n        \"team2Fighters\": [\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          },\n          {\n            \"value\": \"<Circular reference to #/components/schemas/Fighter2 detected>\"\n          }\n        ],\n        \"rankingPointNiceName\": \"pariatur ex sint enim\",\n        \"resultText\": \"in ut tempor\",\n        \"resultTextSmall\": \"ex id veniam Lorem si\",\n        \"roundRenamedSmall\": \"Excepteur ex\",\n        \"parentFightNumber1\": 42689832,\n        \"parentFightNumber2\": 82903685,\n        \"fightRefereesWithRole\": [\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"needsRefresh\": true,\n        \"isCountdown\": false,\n        \"branding\": \"enim ea dolore in consequat\",\n        \"id\": \"velit qui\",\n        \"parentFight1Id\": \"aliqua ipsum velit\",\n        \"parentFight2Id\": \"nostrud velit cillum non\",\n        \"fighter1\": \"ipsum do sunt\",\n        \"fighter1RankingPoint\": 8524,\n        \"fighter2\": \"enim sint commodo\",\n        \"fighter2RankingPoint\": 2350,\n        \"refereeGroup\": \"e\",\n        \"sportEventTeam1Id\": \"non et nisi\",\n        \"sportEventTeam2Id\": \"voluptate\",\n        \"fightMatId\": \"labore\",\n        \"round\": \"in incididunt\",\n        \"qualifying\": false,\n        \"teamFightId\": \"exercitation ipsum adipisicing consequat e\",\n        \"status\": -33448786,\n        \"rankingCheck\": true,\n        \"technicalCheck\": false,\n        \"weight\": -59931647,\n        \"fightNumber\": 697,\n        \"roundWeight\": 2256,\n        \"repechageWeight\": 7393,\n        \"repechageSection\": 3378,\n        \"displayOrder\": 2504,\n        \"canceled\": \"1964-07-20T01:36:15.948Z\",\n        \"fightReferees\": [\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"refereeId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"fightId\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeRole\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFullName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeDisplayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeNumber\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeTeamAlternateName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeCountryFlag\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"refereeFull\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"odfCode\": \"quis veniam sint magna\",\n        \"refereeComment\": \"cillum ad enim\",\n        \"uploaderFight\": {\n          \"elit_8\": 17390028\n        }\n      },\n      \"isCompeting\": true,\n      \"hasOpenFight\": false,\n      \"isDisqualified\": false,\n      \"isNotRanked\": true,\n      \"isInjured\": false,\n      \"isForfeit\": false,\n      \"isRobinGroupNotRanked\": false,\n      \"accreditationStatus\": 51052269,\n      \"id\": \"amet sed\",\n      \"sportEventWeightCategory\": \"quis in esse\",\n      \"weight\": 478,\n      \"drawNumber\": 161,\n      \"seedNumber\": 9,\n      \"fighterWeight\": \"labore ut\",\n      \"points\": 26,\n      \"fighterStatus\": -33677595\n    }\n  ],\n  \"countReadyTeams\": 23469805,\n  \"countReadyFighters\": -66642024,\n  \"countReadySeededFighters\": 73262825,\n  \"countSeededFighters\": -57962519,\n  \"countFighters\": -12091959,\n  \"maxSeeds\": -16639937,\n  \"isRepechageSet\": true,\n  \"countTeams\": 6729096,\n  \"countFights\": 31348889,\n  \"countFightsLive\": 62259795,\n  \"perfectNumber\": {\n    \"eu_82\": 77161672,\n    \"sedd9\": false\n  },\n  \"isCompleted\": true,\n  \"isStarted\": false,\n  \"isRobin\": false,\n  \"isRobinGrouped\": false,\n  \"id\": \"ex Lorem cillum\",\n  \"averageDuration\": -45986190,\n  \"color\": \"adi\",\n  \"odfCode\": \"ex est ut\",\n  \"uwwRanking\": true,\n  \"blockchainIds\": {\n    \"culpa_df0\": true,\n    \"voluptate8\": -80055811\n  },\n  \"sessionStartDay\": 29390093,\n  \"matAssignment\": -82118587,\n  \"visible\": true,\n  \"fightersUpdated\": \"2008-11-10T22:03:23.125Z\",\n  \"athenaFinalized\": false\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/odf/get/:odfCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"odf",
												"get",
												":odfCode"
											],
											"variable": [
												{
													"key": "odfCode",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/odf/get/:odfCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"odf",
												"get",
												":odfCode"
											],
											"variable": [
												{
													"key": "odfCode",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Print bracket - multiple Weight Categories",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/bracket/print?sportEventWeightCategoryId=enim reprehenderit,laboris quis aliqua",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"bracket",
										"print"
									],
									"query": [
										{
											"key": "sportEventWeightCategoryId",
											"value": "enim reprehenderit,laboris quis aliqua",
											"description": "Filter for Weight Category"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Return the PDF path",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/bracket/print?sportEventWeightCategoryId=a,elit nulla",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"bracket",
												"print"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "a,elit nulla"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"pdf\": \"consectetur nisi do amet la\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/bracket/print?sportEventWeightCategoryId=a,elit nulla",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"bracket",
												"print"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "a,elit nulla"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/bracket/print?sportEventWeightCategoryId=a,elit nulla",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"bracket",
												"print"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "a,elit nulla"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "webhook",
					"item": [
						{
							"name": "get/{id}",
							"item": [
								{
									"name": "Get a Webhook",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"webhook",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns Webhook details",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"webhook",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"webhook\": {\n    \"id\": -98490154,\n    \"name\": \"exercitation consectetur est\",\n    \"url\": \"enim consequat anim labore\",\n    \"token\": \"esse eiusmod nostrud\",\n    \"status\": 62762160\n  }\n}"
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"webhook",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"webhook",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Edit a webhook",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 1735284,\n  \"name\": \"adipisicing cillum magn\",\n  \"url\": \"proident velit irure\",\n  \"token\": \"Excepteur\",\n  \"status\": -3436117\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"webhook",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"webhook",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"webhook",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"webhook",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a webhook",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"webhook",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"webhook",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"webhook",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"webhook",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Change status of a webhook",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id/:status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"webhook",
												"get",
												":id",
												":status"
											],
											"variable": [
												{
													"key": "status",
													"value": "enable",
													"description": "(Required) Webhook status (enable|disable)"
												},
												{
													"key": "id",
													"value": "enim",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id/:status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"webhook",
														"get",
														":id",
														":status"
													],
													"variable": [
														{
															"key": "status",
															"value": "enable",
															"description": "(Required) Webhook status (enable|disable)"
														},
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id/:status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"webhook",
														"get",
														":id",
														":status"
													],
													"variable": [
														{
															"key": "status",
															"value": "enable",
															"description": "(Required) Webhook status (enable|disable)"
														},
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: oauth2",
														"key": "Authorization",
														"value": "<token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/webhook/get/:id/:status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"webhook",
														"get",
														":id",
														":status"
													],
													"variable": [
														{
															"key": "status",
															"value": "enable",
															"description": "(Required) Webhook status (enable|disable)"
														},
														{
															"key": "id",
															"value": "enim",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "List all Webhooks",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/webhook/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"webhook",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns list of Webhooks",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/webhook/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"webhook",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"webhooks\": {\n    \"id\": -53465776,\n    \"name\": \"dolor pariatur ipsum ex magna\",\n    \"url\": \"Excepteur ex aliquip ei\",\n    \"token\": \"exercitation\",\n    \"status\": 58020035\n  }\n}"
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/webhook/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"webhook",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/webhook/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"webhook",
												""
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a webhook",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1735284,\n  \"name\": \"adipisicing cillum magn\",\n  \"url\": \"proident velit irure\",\n  \"token\": \"Excepteur\",\n  \"status\": -3436117\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/webhook/new",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"webhook",
										"new"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/webhook/new",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"webhook",
												"new"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/webhook/new",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"webhook",
												"new"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/webhook/new",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"webhook",
												"new"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get ranking by Weight Category",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/uww-ranking/:type/:audience/:sport/:maxWeight",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"uww-ranking",
								":type",
								":audience",
								":sport",
								":maxWeight"
							],
							"variable": [
								{
									"key": "type",
									"value": "beach",
									"description": "(Required) "
								},
								{
									"key": "audience",
									"value": "enim",
									"description": "(Required) "
								},
								{
									"key": "sport",
									"value": "enim",
									"description": "(Required) "
								},
								{
									"key": "maxWeight",
									"value": "enim",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when successful",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/uww-ranking/:type/:audience/:sport/:maxWeight",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"uww-ranking",
										":type",
										":audience",
										":sport",
										":maxWeight"
									],
									"variable": [
										{
											"key": "type",
											"value": "beach",
											"description": "(Required) "
										},
										{
											"key": "audience",
											"value": "enim",
											"description": "(Required) "
										},
										{
											"key": "sport",
											"value": "enim",
											"description": "(Required) "
										},
										{
											"key": "maxWeight",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"weightCategory\": \"ut ad pariatur\"\n}"
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/uww-ranking/:type/:audience/:sport/:maxWeight",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"uww-ranking",
										":type",
										":audience",
										":sport",
										":maxWeight"
									],
									"variable": [
										{
											"key": "type",
											"value": "beach",
											"description": "(Required) "
										},
										{
											"key": "audience",
											"value": "enim",
											"description": "(Required) "
										},
										{
											"key": "sport",
											"value": "enim",
											"description": "(Required) "
										},
										{
											"key": "maxWeight",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/uww-ranking/:type/:audience/:sport/:maxWeight",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"uww-ranking",
										":type",
										":audience",
										":sport",
										":maxWeight"
									],
									"variable": [
										{
											"key": "type",
											"value": "beach",
											"description": "(Required) "
										},
										{
											"key": "audience",
											"value": "enim",
											"description": "(Required) "
										},
										{
											"key": "sport",
											"value": "enim",
											"description": "(Required) "
										},
										{
											"key": "maxWeight",
											"value": "enim",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{api_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const moment = require(\"moment\")",
					"var tokenData = Array()",
					"",
					"try {",
					"    tokenData['exp'] = pm.environment.get(\"api_token_valid_until\")",
					"    if (tokenData['exp'].length < 5) {",
					"        tokenData['exp'] = 0;",
					"    }",
					"} catch(e) {",
					"    tokenData['exp'] = 0",
					"}",
					"if (request.name !== \"Request Arena Token\" && moment(tokenData['exp']).isSameOrBefore(moment())) {",
					"    console.log(\"calling auth, then calling \" + request.name)",
					"    pm.sendRequest(",
					"    {",
					"          url:  pm.environment.get(\"baseUrl\") + \"/oauth/v2/token\", ",
					"          method: 'POST',",
					"          header: {",
					"                'Accept': 'application/json',",
					"                'Content-Type': 'application/x-www-form-urlencoded',",
					"          },",
					"          body: {",
					"                mode: 'urlencoded',",
					"                urlencoded: [",
					"                    {key: \"grant_type\", value: \"https://arena.uww.io/grants/api_key\", disabled: false},",
					"                    {key: \"client_id\", value: pm.environment.get(\"client_id\"), disabled: false},",
					"                    {key: \"client_secret\", value: pm.environment.get(\"client_secret\"), disabled: false},",
					"                    {key: \"api_key\", value: pm.environment.get(\"api_key\"), disabled: false}",
					"                ]",
					"            }",
					"      }, function (err, res) {",
					"            response = res.json();",
					"            if (res.code == 200) {",
					"                pm.environment.set(\"api_token\", response.access_token);",
					"                pm.environment.set(\"api_token_valid_until\", moment().add(response.expires_in,'seconds') );",
					"            }",
					"",
					"      });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "limit",
			"value": "50",
			"type": "any"
		},
		{
			"key": "_format",
			"value": "json",
			"type": "default"
		}
	]
}